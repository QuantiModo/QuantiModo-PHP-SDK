<?php
/**
 * Column
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * Column Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Column implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Column';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'border_width' => 'int',
        'color_by_point' => 'bool',
        'enable_mouse_tracking' => 'bool',
        'point_padding' => 'double',
        'point_width' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'border_width' => null,
        'color_by_point' => null,
        'enable_mouse_tracking' => null,
        'point_padding' => 'double',
        'point_width' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'border_width' => 'borderWidth',
        'color_by_point' => 'colorByPoint',
        'enable_mouse_tracking' => 'enableMouseTracking',
        'point_padding' => 'pointPadding',
        'point_width' => 'pointWidth'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'border_width' => 'setBorderWidth',
        'color_by_point' => 'setColorByPoint',
        'enable_mouse_tracking' => 'setEnableMouseTracking',
        'point_padding' => 'setPointPadding',
        'point_width' => 'setPointWidth'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'border_width' => 'getBorderWidth',
        'color_by_point' => 'getColorByPoint',
        'enable_mouse_tracking' => 'getEnableMouseTracking',
        'point_padding' => 'getPointPadding',
        'point_width' => 'getPointWidth'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['border_width'] = isset($data['border_width']) ? $data['border_width'] : null;
        $this->container['color_by_point'] = isset($data['color_by_point']) ? $data['color_by_point'] : null;
        $this->container['enable_mouse_tracking'] = isset($data['enable_mouse_tracking']) ? $data['enable_mouse_tracking'] : null;
        $this->container['point_padding'] = isset($data['point_padding']) ? $data['point_padding'] : null;
        $this->container['point_width'] = isset($data['point_width']) ? $data['point_width'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['border_width'] === null) {
            $invalid_properties[] = "'border_width' can't be null";
        }
        if ($this->container['color_by_point'] === null) {
            $invalid_properties[] = "'color_by_point' can't be null";
        }
        if ($this->container['enable_mouse_tracking'] === null) {
            $invalid_properties[] = "'enable_mouse_tracking' can't be null";
        }
        if ($this->container['point_padding'] === null) {
            $invalid_properties[] = "'point_padding' can't be null";
        }
        if ($this->container['point_width'] === null) {
            $invalid_properties[] = "'point_width' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['border_width'] === null) {
            return false;
        }
        if ($this->container['color_by_point'] === null) {
            return false;
        }
        if ($this->container['enable_mouse_tracking'] === null) {
            return false;
        }
        if ($this->container['point_padding'] === null) {
            return false;
        }
        if ($this->container['point_width'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets border_width
     * @return int
     */
    public function getBorderWidth()
    {
        return $this->container['border_width'];
    }

    /**
     * Sets border_width
     * @param int $border_width Example: 0
     * @return $this
     */
    public function setBorderWidth($border_width)
    {
        $this->container['border_width'] = $border_width;

        return $this;
    }

    /**
     * Gets color_by_point
     * @return bool
     */
    public function getColorByPoint()
    {
        return $this->container['color_by_point'];
    }

    /**
     * Sets color_by_point
     * @param bool $color_by_point Example: true
     * @return $this
     */
    public function setColorByPoint($color_by_point)
    {
        $this->container['color_by_point'] = $color_by_point;

        return $this;
    }

    /**
     * Gets enable_mouse_tracking
     * @return bool
     */
    public function getEnableMouseTracking()
    {
        return $this->container['enable_mouse_tracking'];
    }

    /**
     * Sets enable_mouse_tracking
     * @param bool $enable_mouse_tracking Example: true
     * @return $this
     */
    public function setEnableMouseTracking($enable_mouse_tracking)
    {
        $this->container['enable_mouse_tracking'] = $enable_mouse_tracking;

        return $this;
    }

    /**
     * Gets point_padding
     * @return double
     */
    public function getPointPadding()
    {
        return $this->container['point_padding'];
    }

    /**
     * Sets point_padding
     * @param double $point_padding Example: 0.2
     * @return $this
     */
    public function setPointPadding($point_padding)
    {
        $this->container['point_padding'] = $point_padding;

        return $this;
    }

    /**
     * Gets point_width
     * @return double
     */
    public function getPointWidth()
    {
        return $this->container['point_width'];
    }

    /**
     * Sets point_width
     * @param double $point_width Example: 33.333333333333
     * @return $this
     */
    public function setPointWidth($point_width)
    {
        $this->container['point_width'] = $point_width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


