<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace SwaggerClient\models;

use \ArrayAccess;

class Unit implements ArrayAccess {
  static $swaggerTypes = array(
      'name' => 'string',
      'abbreviated_name' => 'string',
      'category' => 'string',
      'minimum' => 'double',
      'maximum' => 'double',
      'conversion_steps' => 'array[ConversionStep]'
  );

  static $attributeMap = array(
      'name' => 'name',
      'abbreviated_name' => 'abbreviatedName',
      'category' => 'category',
      'minimum' => 'minimum',
      'maximum' => 'maximum',
      'conversion_steps' => 'conversionSteps'
  );

  
  /**
  * Unit name
  */
  public $name; /* string */
  /**
  * Unit abbreviation
  */
  public $abbreviated_name; /* string */
  /**
  * Unit category
  */
  public $category; /* string */
  /**
  * Unit minimum value
  */
  public $minimum; /* double */
  /**
  * Unit maximum value
  */
  public $maximum; /* double */
  /**
  * Conversion steps list
  */
  public $conversion_steps; /* array[ConversionStep] */

  public function __construct(array $data = null) {
    $this->name = $data["name"];
    $this->abbreviated_name = $data["abbreviated_name"];
    $this->category = $data["category"];
    $this->minimum = $data["minimum"];
    $this->maximum = $data["maximum"];
    $this->conversion_steps = $data["conversion_steps"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
