<?php
/**
 * MeasurementSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * MeasurementSet Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MeasurementSet implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'measurements' => '\Swagger\Client\Model\ValueObject[]',
        'name' => 'string',
        'source' => 'string',
        'category' => 'string',
        'combination_operation' => 'string',
        'unit' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'measurements' => 'measurements',
        'name' => 'name',
        'source' => 'source',
        'category' => 'category',
        'combination_operation' => 'combinationOperation',
        'unit' => 'unit'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'measurements' => 'setMeasurements',
        'name' => 'setName',
        'source' => 'setSource',
        'category' => 'setCategory',
        'combination_operation' => 'setCombinationOperation',
        'unit' => 'setUnit'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'measurements' => 'getMeasurements',
        'name' => 'getName',
        'source' => 'getSource',
        'category' => 'getCategory',
        'combination_operation' => 'getCombinationOperation',
        'unit' => 'getUnit'
    );
  
    
    /**
      * $measurements Array of timestamps, values, and optional notes
      * @var \Swagger\Client\Model\ValueObject[]
      */
    protected $measurements;
    
    /**
      * $name ORIGINAL name of the variable for which we are creating the measurement records
      * @var string
      */
    protected $name;
    
    /**
      * $source Name of the application or device used to record the measurement values
      * @var string
      */
    protected $source;
    
    /**
      * $category Variable category name
      * @var string
      */
    protected $category;
    
    /**
      * $combination_operation Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\".  SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
      * @var string
      */
    protected $combination_operation;
    
    /**
      * $unit Unit of measurement
      * @var string
      */
    protected $unit;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->measurements = $data["measurements"];
            $this->name = $data["name"];
            $this->source = $data["source"];
            $this->category = $data["category"];
            $this->combination_operation = $data["combination_operation"];
            $this->unit = $data["unit"];
        }
    }
    
    /**
     * Gets measurements
     * @return \Swagger\Client\Model\ValueObject[]
     */
    public function getMeasurements()
    {
        return $this->measurements;
    }
  
    /**
     * Sets measurements
     * @param \Swagger\Client\Model\ValueObject[] $measurements Array of timestamps, values, and optional notes
     * @return $this
     */
    public function setMeasurements($measurements)
    {
        
        $this->measurements = $measurements;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name ORIGINAL name of the variable for which we are creating the measurement records
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }
  
    /**
     * Sets source
     * @param string $source Name of the application or device used to record the measurement values
     * @return $this
     */
    public function setSource($source)
    {
        
        $this->source = $source;
        return $this;
    }
    
    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }
  
    /**
     * Sets category
     * @param string $category Variable category name
     * @return $this
     */
    public function setCategory($category)
    {
        
        $this->category = $category;
        return $this;
    }
    
    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->combination_operation;
    }
  
    /**
     * Sets combination_operation
     * @param string $combination_operation Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\".  SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $allowed_values = array("MEAN", "SUM");
        if (!in_array($combination_operation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'combination_operation', must be one of 'MEAN', 'SUM'");
        }
        $this->combination_operation = $combination_operation;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit Unit of measurement
     * @return $this
     */
    public function setUnit($unit)
    {
        
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
