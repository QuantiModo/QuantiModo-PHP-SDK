<?php
/**
 * UserVariableApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * UserVariableApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserVariableApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.quantimo.do/api/v2');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return UserVariableApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * userVariablesGet
     *
     * Get all UserVariables
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this user variable (optional)
     * @param int $parent_id ID of the parent variable if this variable has any parent (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $user_id User ID (optional)
     * @param int $default_unit_id D of unit to use for this variable (optional)
     * @param Number $minimum_allowed_value Minimum reasonable value for this variable (uses default unit) (optional)
     * @param Number $maximum_allowed_value Maximum reasonable value for this variable (uses default unit) (optional)
     * @param Number $filling_value Value for replacing null measurements (optional)
     * @param int $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param int $variable_category_id ID of variable category (optional)
     * @param int $updated updated (optional)
     * @param int $public Is variable public (optional)
     * @param bool $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     * @param string $filling_type 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     * @param int $number_of_measurements Number of measurements (optional)
     * @param int $number_of_processed_measurements Number of processed measurements (optional)
     * @param int $measurements_at_last_analysis Number of measurements at last analysis (optional)
     * @param int $last_unit_id ID of last Unit (optional)
     * @param int $last_original_unit_id ID of last original Unit (optional)
     * @param int $last_original_value Last original value which is stored (optional)
     * @param Number $last_value Last Value (optional)
     * @param Number $last_original_value2 Last original value which is stored (optional)
     * @param int $last_source_id ID of last source (optional)
     * @param int $number_of_correlations Number of correlations for this variable (optional)
     * @param string $status status (optional)
     * @param string $error_message error_message (optional)
     * @param string $last_successful_update_time When this variable or its settings were last updated (optional)
     * @param Number $standard_deviation Standard deviation (optional)
     * @param Number $variance Variance (optional)
     * @param Number $minimum_recorded_value Minimum recorded value of this variable (optional)
     * @param Number $maximum_recorded_value Maximum recorded value of this variable (optional)
     * @param Number $mean Mean (optional)
     * @param Number $median Median (optional)
     * @param int $most_common_unit_id Most common Unit ID (optional)
     * @param Number $most_common_value Most common value (optional)
     * @param Number $number_of_unique_daily_values Number of unique daily values (optional)
     * @param int $number_of_changes Number of changes (optional)
     * @param Number $skewness Skewness (optional)
     * @param Number $kurtosis Kurtosis (optional)
     * @param Number $latitude Latitude (optional)
     * @param Number $longitude Longitude (optional)
     * @param string $location Location (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param bool $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     * @param string $sources Comma-separated list of source names to limit variables to those sources (optional)
     * @param int $earliest_source_time Earliest source time (optional)
     * @param int $latest_source_time Latest source time (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param int $earliest_filling_time Earliest filling time (optional)
     * @param int $latest_filling_time Latest filling time (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2009
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesGet($access_token = null, $client_id = null, $parent_id = null, $variable_id = null, $user_id = null, $default_unit_id = null, $minimum_allowed_value = null, $maximum_allowed_value = null, $filling_value = null, $join_with = null, $onset_delay = null, $duration_of_action = null, $variable_category_id = null, $updated = null, $public = null, $cause_only = null, $filling_type = null, $number_of_measurements = null, $number_of_processed_measurements = null, $measurements_at_last_analysis = null, $last_unit_id = null, $last_original_unit_id = null, $last_original_value = null, $last_value = null, $last_original_value2 = null, $last_source_id = null, $number_of_correlations = null, $status = null, $error_message = null, $last_successful_update_time = null, $standard_deviation = null, $variance = null, $minimum_recorded_value = null, $maximum_recorded_value = null, $mean = null, $median = null, $most_common_unit_id = null, $most_common_value = null, $number_of_unique_daily_values = null, $number_of_changes = null, $skewness = null, $kurtosis = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $outcome = null, $sources = null, $earliest_source_time = null, $latest_source_time = null, $earliest_measurement_time = null, $latest_measurement_time = null, $earliest_filling_time = null, $latest_filling_time = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userVariablesGetWithHttpInfo ($access_token, $client_id, $parent_id, $variable_id, $user_id, $default_unit_id, $minimum_allowed_value, $maximum_allowed_value, $filling_value, $join_with, $onset_delay, $duration_of_action, $variable_category_id, $updated, $public, $cause_only, $filling_type, $number_of_measurements, $number_of_processed_measurements, $measurements_at_last_analysis, $last_unit_id, $last_original_unit_id, $last_original_value, $last_value, $last_original_value2, $last_source_id, $number_of_correlations, $status, $error_message, $last_successful_update_time, $standard_deviation, $variance, $minimum_recorded_value, $maximum_recorded_value, $mean, $median, $most_common_unit_id, $most_common_value, $number_of_unique_daily_values, $number_of_changes, $skewness, $kurtosis, $latitude, $longitude, $location, $created_at, $updated_at, $outcome, $sources, $earliest_source_time, $latest_source_time, $earliest_measurement_time, $latest_measurement_time, $earliest_filling_time, $latest_filling_time, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * userVariablesGetWithHttpInfo
     *
     * Get all UserVariables
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this user variable (optional)
     * @param int $parent_id ID of the parent variable if this variable has any parent (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $user_id User ID (optional)
     * @param int $default_unit_id D of unit to use for this variable (optional)
     * @param Number $minimum_allowed_value Minimum reasonable value for this variable (uses default unit) (optional)
     * @param Number $maximum_allowed_value Maximum reasonable value for this variable (uses default unit) (optional)
     * @param Number $filling_value Value for replacing null measurements (optional)
     * @param int $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param int $variable_category_id ID of variable category (optional)
     * @param int $updated updated (optional)
     * @param int $public Is variable public (optional)
     * @param bool $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     * @param string $filling_type 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     * @param int $number_of_measurements Number of measurements (optional)
     * @param int $number_of_processed_measurements Number of processed measurements (optional)
     * @param int $measurements_at_last_analysis Number of measurements at last analysis (optional)
     * @param int $last_unit_id ID of last Unit (optional)
     * @param int $last_original_unit_id ID of last original Unit (optional)
     * @param int $last_original_value Last original value which is stored (optional)
     * @param Number $last_value Last Value (optional)
     * @param Number $last_original_value2 Last original value which is stored (optional)
     * @param int $last_source_id ID of last source (optional)
     * @param int $number_of_correlations Number of correlations for this variable (optional)
     * @param string $status status (optional)
     * @param string $error_message error_message (optional)
     * @param string $last_successful_update_time When this variable or its settings were last updated (optional)
     * @param Number $standard_deviation Standard deviation (optional)
     * @param Number $variance Variance (optional)
     * @param Number $minimum_recorded_value Minimum recorded value of this variable (optional)
     * @param Number $maximum_recorded_value Maximum recorded value of this variable (optional)
     * @param Number $mean Mean (optional)
     * @param Number $median Median (optional)
     * @param int $most_common_unit_id Most common Unit ID (optional)
     * @param Number $most_common_value Most common value (optional)
     * @param Number $number_of_unique_daily_values Number of unique daily values (optional)
     * @param int $number_of_changes Number of changes (optional)
     * @param Number $skewness Skewness (optional)
     * @param Number $kurtosis Kurtosis (optional)
     * @param Number $latitude Latitude (optional)
     * @param Number $longitude Longitude (optional)
     * @param string $location Location (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param bool $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     * @param string $sources Comma-separated list of source names to limit variables to those sources (optional)
     * @param int $earliest_source_time Earliest source time (optional)
     * @param int $latest_source_time Latest source time (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param int $earliest_filling_time Earliest filling time (optional)
     * @param int $latest_filling_time Latest filling time (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesGetWithHttpInfo($access_token = null, $client_id = null, $parent_id = null, $variable_id = null, $user_id = null, $default_unit_id = null, $minimum_allowed_value = null, $maximum_allowed_value = null, $filling_value = null, $join_with = null, $onset_delay = null, $duration_of_action = null, $variable_category_id = null, $updated = null, $public = null, $cause_only = null, $filling_type = null, $number_of_measurements = null, $number_of_processed_measurements = null, $measurements_at_last_analysis = null, $last_unit_id = null, $last_original_unit_id = null, $last_original_value = null, $last_value = null, $last_original_value2 = null, $last_source_id = null, $number_of_correlations = null, $status = null, $error_message = null, $last_successful_update_time = null, $standard_deviation = null, $variance = null, $minimum_recorded_value = null, $maximum_recorded_value = null, $mean = null, $median = null, $most_common_unit_id = null, $most_common_value = null, $number_of_unique_daily_values = null, $number_of_changes = null, $skewness = null, $kurtosis = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $outcome = null, $sources = null, $earliest_source_time = null, $latest_source_time = null, $earliest_measurement_time = null, $latest_measurement_time = null, $earliest_filling_time = null, $latest_filling_time = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/userVariables";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }// query params
        
        if ($parent_id !== null) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }// query params
        
        if ($variable_id !== null) {
            $queryParams['variable_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_id);
        }// query params
        
        if ($user_id !== null) {
            $queryParams['user_id'] = $this->apiClient->getSerializer()->toQueryValue($user_id);
        }// query params
        
        if ($default_unit_id !== null) {
            $queryParams['default_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($default_unit_id);
        }// query params
        
        if ($minimum_allowed_value !== null) {
            $queryParams['minimum_allowed_value'] = $this->apiClient->getSerializer()->toQueryValue($minimum_allowed_value);
        }// query params
        
        if ($maximum_allowed_value !== null) {
            $queryParams['maximum_allowed_value'] = $this->apiClient->getSerializer()->toQueryValue($maximum_allowed_value);
        }// query params
        
        if ($filling_value !== null) {
            $queryParams['filling_value'] = $this->apiClient->getSerializer()->toQueryValue($filling_value);
        }// query params
        
        if ($join_with !== null) {
            $queryParams['join_with'] = $this->apiClient->getSerializer()->toQueryValue($join_with);
        }// query params
        
        if ($onset_delay !== null) {
            $queryParams['onset_delay'] = $this->apiClient->getSerializer()->toQueryValue($onset_delay);
        }// query params
        
        if ($duration_of_action !== null) {
            $queryParams['duration_of_action'] = $this->apiClient->getSerializer()->toQueryValue($duration_of_action);
        }// query params
        
        if ($variable_category_id !== null) {
            $queryParams['variable_category_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_category_id);
        }// query params
        
        if ($updated !== null) {
            $queryParams['updated'] = $this->apiClient->getSerializer()->toQueryValue($updated);
        }// query params
        
        if ($public !== null) {
            $queryParams['public'] = $this->apiClient->getSerializer()->toQueryValue($public);
        }// query params
        
        if ($cause_only !== null) {
            $queryParams['cause_only'] = $this->apiClient->getSerializer()->toQueryValue($cause_only);
        }// query params
        
        if ($filling_type !== null) {
            $queryParams['filling_type'] = $this->apiClient->getSerializer()->toQueryValue($filling_type);
        }// query params
        
        if ($number_of_measurements !== null) {
            $queryParams['number_of_measurements'] = $this->apiClient->getSerializer()->toQueryValue($number_of_measurements);
        }// query params
        
        if ($number_of_processed_measurements !== null) {
            $queryParams['number_of_processed_measurements'] = $this->apiClient->getSerializer()->toQueryValue($number_of_processed_measurements);
        }// query params
        
        if ($measurements_at_last_analysis !== null) {
            $queryParams['measurements_at_last_analysis'] = $this->apiClient->getSerializer()->toQueryValue($measurements_at_last_analysis);
        }// query params
        
        if ($last_unit_id !== null) {
            $queryParams['last_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($last_unit_id);
        }// query params
        
        if ($last_original_unit_id !== null) {
            $queryParams['last_original_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($last_original_unit_id);
        }// query params
        
        if ($last_original_value !== null) {
            $queryParams['last_original_value'] = $this->apiClient->getSerializer()->toQueryValue($last_original_value);
        }// query params
        
        if ($last_value !== null) {
            $queryParams['last_value'] = $this->apiClient->getSerializer()->toQueryValue($last_value);
        }// query params
        
        if ($last_original_value2 !== null) {
            $queryParams['last_original_value'] = $this->apiClient->getSerializer()->toQueryValue($last_original_value2);
        }// query params
        
        if ($last_source_id !== null) {
            $queryParams['last_source_id'] = $this->apiClient->getSerializer()->toQueryValue($last_source_id);
        }// query params
        
        if ($number_of_correlations !== null) {
            $queryParams['number_of_correlations'] = $this->apiClient->getSerializer()->toQueryValue($number_of_correlations);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($error_message !== null) {
            $queryParams['error_message'] = $this->apiClient->getSerializer()->toQueryValue($error_message);
        }// query params
        
        if ($last_successful_update_time !== null) {
            $queryParams['last_successful_update_time'] = $this->apiClient->getSerializer()->toQueryValue($last_successful_update_time);
        }// query params
        
        if ($standard_deviation !== null) {
            $queryParams['standard_deviation'] = $this->apiClient->getSerializer()->toQueryValue($standard_deviation);
        }// query params
        
        if ($variance !== null) {
            $queryParams['variance'] = $this->apiClient->getSerializer()->toQueryValue($variance);
        }// query params
        
        if ($minimum_recorded_value !== null) {
            $queryParams['minimum_recorded_value'] = $this->apiClient->getSerializer()->toQueryValue($minimum_recorded_value);
        }// query params
        
        if ($maximum_recorded_value !== null) {
            $queryParams['maximum_recorded_value'] = $this->apiClient->getSerializer()->toQueryValue($maximum_recorded_value);
        }// query params
        
        if ($mean !== null) {
            $queryParams['mean'] = $this->apiClient->getSerializer()->toQueryValue($mean);
        }// query params
        
        if ($median !== null) {
            $queryParams['median'] = $this->apiClient->getSerializer()->toQueryValue($median);
        }// query params
        
        if ($most_common_unit_id !== null) {
            $queryParams['most_common_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($most_common_unit_id);
        }// query params
        
        if ($most_common_value !== null) {
            $queryParams['most_common_value'] = $this->apiClient->getSerializer()->toQueryValue($most_common_value);
        }// query params
        
        if ($number_of_unique_daily_values !== null) {
            $queryParams['number_of_unique_daily_values'] = $this->apiClient->getSerializer()->toQueryValue($number_of_unique_daily_values);
        }// query params
        
        if ($number_of_changes !== null) {
            $queryParams['number_of_changes'] = $this->apiClient->getSerializer()->toQueryValue($number_of_changes);
        }// query params
        
        if ($skewness !== null) {
            $queryParams['skewness'] = $this->apiClient->getSerializer()->toQueryValue($skewness);
        }// query params
        
        if ($kurtosis !== null) {
            $queryParams['kurtosis'] = $this->apiClient->getSerializer()->toQueryValue($kurtosis);
        }// query params
        
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }// query params
        
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }// query params
        
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($outcome !== null) {
            $queryParams['outcome'] = $this->apiClient->getSerializer()->toQueryValue($outcome);
        }// query params
        
        if ($sources !== null) {
            $queryParams['sources'] = $this->apiClient->getSerializer()->toQueryValue($sources);
        }// query params
        
        if ($earliest_source_time !== null) {
            $queryParams['earliest_source_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_source_time);
        }// query params
        
        if ($latest_source_time !== null) {
            $queryParams['latest_source_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_source_time);
        }// query params
        
        if ($earliest_measurement_time !== null) {
            $queryParams['earliest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_measurement_time);
        }// query params
        
        if ($latest_measurement_time !== null) {
            $queryParams['latest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_measurement_time);
        }// query params
        
        if ($earliest_filling_time !== null) {
            $queryParams['earliest_filling_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_filling_time);
        }// query params
        
        if ($latest_filling_time !== null) {
            $queryParams['latest_filling_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_filling_time);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2009'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2009', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2009', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userVariablesPost
     *
     * Store UserVariable
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\UserVariable $body UserVariable that should be stored (optional)
     * @return \Swagger\Client\Model\InlineResponse20030
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesPost($access_token = null, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userVariablesPostWithHttpInfo ($access_token, $body);
        return $response; 
    }


    /**
     * userVariablesPostWithHttpInfo
     *
     * Store UserVariable
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\UserVariable $body UserVariable that should be stored (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20030, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesPostWithHttpInfo($access_token = null, $body = null)
    {
        
  
        // parse inputs
        $resourcePath = "/userVariables";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse20030'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse20030', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20030', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userVariablesIdGet
     *
     * Get UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return \Swagger\Client\Model\InlineResponse20030
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdGet($id, $access_token = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userVariablesIdGetWithHttpInfo ($id, $access_token);
        return $response; 
    }


    /**
     * userVariablesIdGetWithHttpInfo
     *
     * Get UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20030, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdGetWithHttpInfo($id, $access_token = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userVariablesIdGet');
        }
  
        // parse inputs
        $resourcePath = "/userVariables/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse20030'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse20030', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20030', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userVariablesIdPut
     *
     * Update UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\UserVariable $body UserVariable that should be updated (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdPut($id, $access_token = null, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userVariablesIdPutWithHttpInfo ($id, $access_token, $body);
        return $response; 
    }


    /**
     * userVariablesIdPutWithHttpInfo
     *
     * Update UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\UserVariable $body UserVariable that should be updated (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdPutWithHttpInfo($id, $access_token = null, $body = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userVariablesIdPut');
        }
  
        // parse inputs
        $resourcePath = "/userVariables/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * userVariablesIdDelete
     *
     * Delete UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdDelete($id, $access_token = null)
    {
        list($response, $statusCode, $httpHeader) = $this->userVariablesIdDeleteWithHttpInfo ($id, $access_token);
        return $response; 
    }


    /**
     * userVariablesIdDeleteWithHttpInfo
     *
     * Delete UserVariable
     *
     * @param int $id id of UserVariable (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function userVariablesIdDeleteWithHttpInfo($id, $access_token = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userVariablesIdDelete');
        }
  
        // parse inputs
        $resourcePath = "/userVariables/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
