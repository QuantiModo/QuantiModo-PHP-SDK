<?php
/**
 * DataSource
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * DataSource Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DataSource implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DataSource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affiliate' => 'bool',
        'connector_client_id' => 'string',
        'default_variable_category_name' => 'string',
        'display_name' => 'string',
        'enabled' => 'int',
        'get_it_url' => 'string',
        'id' => 'int',
        'image' => 'string',
        'image_html' => 'string',
        'linked_display_name_html' => 'string',
        'long_description' => 'string',
        'name' => 'string',
        'short_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affiliate' => null,
        'connector_client_id' => null,
        'default_variable_category_name' => null,
        'display_name' => null,
        'enabled' => null,
        'get_it_url' => null,
        'id' => null,
        'image' => null,
        'image_html' => null,
        'linked_display_name_html' => null,
        'long_description' => null,
        'name' => null,
        'short_description' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliate' => 'affiliate',
        'connector_client_id' => 'connectorClientId',
        'default_variable_category_name' => 'defaultVariableCategoryName',
        'display_name' => 'displayName',
        'enabled' => 'enabled',
        'get_it_url' => 'getItUrl',
        'id' => 'id',
        'image' => 'image',
        'image_html' => 'imageHtml',
        'linked_display_name_html' => 'linkedDisplayNameHtml',
        'long_description' => 'longDescription',
        'name' => 'name',
        'short_description' => 'shortDescription'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'affiliate' => 'setAffiliate',
        'connector_client_id' => 'setConnectorClientId',
        'default_variable_category_name' => 'setDefaultVariableCategoryName',
        'display_name' => 'setDisplayName',
        'enabled' => 'setEnabled',
        'get_it_url' => 'setGetItUrl',
        'id' => 'setId',
        'image' => 'setImage',
        'image_html' => 'setImageHtml',
        'linked_display_name_html' => 'setLinkedDisplayNameHtml',
        'long_description' => 'setLongDescription',
        'name' => 'setName',
        'short_description' => 'setShortDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'affiliate' => 'getAffiliate',
        'connector_client_id' => 'getConnectorClientId',
        'default_variable_category_name' => 'getDefaultVariableCategoryName',
        'display_name' => 'getDisplayName',
        'enabled' => 'getEnabled',
        'get_it_url' => 'getGetItUrl',
        'id' => 'getId',
        'image' => 'getImage',
        'image_html' => 'getImageHtml',
        'linked_display_name_html' => 'getLinkedDisplayNameHtml',
        'long_description' => 'getLongDescription',
        'name' => 'getName',
        'short_description' => 'getShortDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliate'] = isset($data['affiliate']) ? $data['affiliate'] : null;
        $this->container['connector_client_id'] = isset($data['connector_client_id']) ? $data['connector_client_id'] : null;
        $this->container['default_variable_category_name'] = isset($data['default_variable_category_name']) ? $data['default_variable_category_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['get_it_url'] = isset($data['get_it_url']) ? $data['get_it_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['image_html'] = isset($data['image_html']) ? $data['image_html'] : null;
        $this->container['linked_display_name_html'] = isset($data['linked_display_name_html']) ? $data['linked_display_name_html'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['affiliate'] === null) {
            $invalid_properties[] = "'affiliate' can't be null";
        }
        if ($this->container['connector_client_id'] === null) {
            $invalid_properties[] = "'connector_client_id' can't be null";
        }
        if ($this->container['default_variable_category_name'] === null) {
            $invalid_properties[] = "'default_variable_category_name' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalid_properties[] = "'display_name' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalid_properties[] = "'enabled' can't be null";
        }
        if ($this->container['get_it_url'] === null) {
            $invalid_properties[] = "'get_it_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalid_properties[] = "'image' can't be null";
        }
        if ($this->container['image_html'] === null) {
            $invalid_properties[] = "'image_html' can't be null";
        }
        if ($this->container['linked_display_name_html'] === null) {
            $invalid_properties[] = "'linked_display_name_html' can't be null";
        }
        if ($this->container['long_description'] === null) {
            $invalid_properties[] = "'long_description' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['short_description'] === null) {
            $invalid_properties[] = "'short_description' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['affiliate'] === null) {
            return false;
        }
        if ($this->container['connector_client_id'] === null) {
            return false;
        }
        if ($this->container['default_variable_category_name'] === null) {
            return false;
        }
        if ($this->container['display_name'] === null) {
            return false;
        }
        if ($this->container['enabled'] === null) {
            return false;
        }
        if ($this->container['get_it_url'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['image'] === null) {
            return false;
        }
        if ($this->container['image_html'] === null) {
            return false;
        }
        if ($this->container['linked_display_name_html'] === null) {
            return false;
        }
        if ($this->container['long_description'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['short_description'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets affiliate
     * @return bool
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     * @param bool $affiliate Example: true
     * @return $this
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets connector_client_id
     * @return string
     */
    public function getConnectorClientId()
    {
        return $this->container['connector_client_id'];
    }

    /**
     * Sets connector_client_id
     * @param string $connector_client_id Example: ba7d0c12432650e23b3ce924ae2d21e2ff59e7e4e28650759633700af7ed0a30
     * @return $this
     */
    public function setConnectorClientId($connector_client_id)
    {
        $this->container['connector_client_id'] = $connector_client_id;

        return $this;
    }

    /**
     * Gets default_variable_category_name
     * @return string
     */
    public function getDefaultVariableCategoryName()
    {
        return $this->container['default_variable_category_name'];
    }

    /**
     * Sets default_variable_category_name
     * @param string $default_variable_category_name Example: Foods
     * @return $this
     */
    public function setDefaultVariableCategoryName($default_variable_category_name)
    {
        $this->container['default_variable_category_name'] = $default_variable_category_name;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Example: QuantiModo
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets enabled
     * @return int
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param int $enabled Example: 0
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets get_it_url
     * @return string
     */
    public function getGetItUrl()
    {
        return $this->container['get_it_url'];
    }

    /**
     * Sets get_it_url
     * @param string $get_it_url Example: https://quantimo.do
     * @return $this
     */
    public function setGetItUrl($get_it_url)
    {
        $this->container['get_it_url'] = $get_it_url;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Example: 72
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image Example: https://app.quantimo.do/ionic/Modo/www/img/logos/quantimodo-logo-qm-rainbow-200-200.png
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_html
     * @return string
     */
    public function getImageHtml()
    {
        return $this->container['image_html'];
    }

    /**
     * Sets image_html
     * @param string $image_html Example: <a href=\"https://quantimo.do\"><img id=\"quantimodo_image\" title=\"QuantiModo\" src=\"https://app.quantimo.do/ionic/Modo/www/img/logos/quantimodo-logo-qm-rainbow-200-200.png\" alt=\"QuantiModo\"></a>
     * @return $this
     */
    public function setImageHtml($image_html)
    {
        $this->container['image_html'] = $image_html;

        return $this;
    }

    /**
     * Gets linked_display_name_html
     * @return string
     */
    public function getLinkedDisplayNameHtml()
    {
        return $this->container['linked_display_name_html'];
    }

    /**
     * Sets linked_display_name_html
     * @param string $linked_display_name_html Example: <a href=\"https://quantimo.do\">QuantiModo</a>
     * @return $this
     */
    public function setLinkedDisplayNameHtml($linked_display_name_html)
    {
        $this->container['linked_display_name_html'] = $linked_display_name_html;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description Example: QuantiModo is a Chrome extension, Android app, iOS app, and web app that allows you to easily track mood, symptoms, or any outcome you want to optimize in a fraction of a second.  You can also import your data from over 30 other apps and devices like Fitbit, Rescuetime, Jawbone Up, Withings, Facebook, Github, Google Calendar, Runkeeper, MoodPanda, Slice, Google Fit, and more.  QuantiModo then analyzes your data to identify which hidden factors are most likely to be influencing your mood or symptoms and their optimal daily values.
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Example: quantimodo
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description Example: Tracks anything
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


