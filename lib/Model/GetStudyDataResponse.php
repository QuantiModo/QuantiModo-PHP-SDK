<?php
/**
 * GetStudyDataResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * GetStudyDataResponse Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetStudyDataResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetStudyDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cause_processed_daily_measurements' => '\QuantiModo\Client\Model\ProcessedDailyMeasurement[]',
        'cause_variable' => '\QuantiModo\Client\Model\UserVariable',
        'charts' => '\QuantiModo\Client\Model\Chart[]',
        'effect_processed_daily_measurements' => '\QuantiModo\Client\Model\ProcessedDailyMeasurement[]',
        'effect_variable' => '\QuantiModo\Client\Model\UserVariable',
        'pairs' => '\QuantiModo\Client\Model\Pair[]',
        'statistics' => '\QuantiModo\Client\Model\Correlation',
        'text' => 'string',
        'user' => 'string',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cause_processed_daily_measurements' => null,
        'cause_variable' => null,
        'charts' => null,
        'effect_processed_daily_measurements' => null,
        'effect_variable' => null,
        'pairs' => null,
        'statistics' => null,
        'text' => null,
        'user' => null,
        'user_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cause_processed_daily_measurements' => 'causeProcessedDailyMeasurements',
        'cause_variable' => 'causeVariable',
        'charts' => 'charts',
        'effect_processed_daily_measurements' => 'effectProcessedDailyMeasurements',
        'effect_variable' => 'effectVariable',
        'pairs' => 'pairs',
        'statistics' => 'statistics',
        'text' => 'text',
        'user' => 'user',
        'user_id' => 'userId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cause_processed_daily_measurements' => 'setCauseProcessedDailyMeasurements',
        'cause_variable' => 'setCauseVariable',
        'charts' => 'setCharts',
        'effect_processed_daily_measurements' => 'setEffectProcessedDailyMeasurements',
        'effect_variable' => 'setEffectVariable',
        'pairs' => 'setPairs',
        'statistics' => 'setStatistics',
        'text' => 'setText',
        'user' => 'setUser',
        'user_id' => 'setUserId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cause_processed_daily_measurements' => 'getCauseProcessedDailyMeasurements',
        'cause_variable' => 'getCauseVariable',
        'charts' => 'getCharts',
        'effect_processed_daily_measurements' => 'getEffectProcessedDailyMeasurements',
        'effect_variable' => 'getEffectVariable',
        'pairs' => 'getPairs',
        'statistics' => 'getStatistics',
        'text' => 'getText',
        'user' => 'getUser',
        'user_id' => 'getUserId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cause_processed_daily_measurements'] = isset($data['cause_processed_daily_measurements']) ? $data['cause_processed_daily_measurements'] : null;
        $this->container['cause_variable'] = isset($data['cause_variable']) ? $data['cause_variable'] : null;
        $this->container['charts'] = isset($data['charts']) ? $data['charts'] : null;
        $this->container['effect_processed_daily_measurements'] = isset($data['effect_processed_daily_measurements']) ? $data['effect_processed_daily_measurements'] : null;
        $this->container['effect_variable'] = isset($data['effect_variable']) ? $data['effect_variable'] : null;
        $this->container['pairs'] = isset($data['pairs']) ? $data['pairs'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cause_processed_daily_measurements'] === null) {
            $invalid_properties[] = "'cause_processed_daily_measurements' can't be null";
        }
        if ($this->container['cause_variable'] === null) {
            $invalid_properties[] = "'cause_variable' can't be null";
        }
        if ($this->container['charts'] === null) {
            $invalid_properties[] = "'charts' can't be null";
        }
        if ($this->container['effect_processed_daily_measurements'] === null) {
            $invalid_properties[] = "'effect_processed_daily_measurements' can't be null";
        }
        if ($this->container['effect_variable'] === null) {
            $invalid_properties[] = "'effect_variable' can't be null";
        }
        if ($this->container['pairs'] === null) {
            $invalid_properties[] = "'pairs' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalid_properties[] = "'text' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalid_properties[] = "'user' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cause_processed_daily_measurements'] === null) {
            return false;
        }
        if ($this->container['cause_variable'] === null) {
            return false;
        }
        if ($this->container['charts'] === null) {
            return false;
        }
        if ($this->container['effect_processed_daily_measurements'] === null) {
            return false;
        }
        if ($this->container['effect_variable'] === null) {
            return false;
        }
        if ($this->container['pairs'] === null) {
            return false;
        }
        if ($this->container['text'] === null) {
            return false;
        }
        if ($this->container['user'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cause_processed_daily_measurements
     * @return \QuantiModo\Client\Model\ProcessedDailyMeasurement[]
     */
    public function getCauseProcessedDailyMeasurements()
    {
        return $this->container['cause_processed_daily_measurements'];
    }

    /**
     * Sets cause_processed_daily_measurements
     * @param \QuantiModo\Client\Model\ProcessedDailyMeasurement[] $cause_processed_daily_measurements
     * @return $this
     */
    public function setCauseProcessedDailyMeasurements($cause_processed_daily_measurements)
    {
        $this->container['cause_processed_daily_measurements'] = $cause_processed_daily_measurements;

        return $this;
    }

    /**
     * Gets cause_variable
     * @return \QuantiModo\Client\Model\UserVariable
     */
    public function getCauseVariable()
    {
        return $this->container['cause_variable'];
    }

    /**
     * Sets cause_variable
     * @param \QuantiModo\Client\Model\UserVariable $cause_variable
     * @return $this
     */
    public function setCauseVariable($cause_variable)
    {
        $this->container['cause_variable'] = $cause_variable;

        return $this;
    }

    /**
     * Gets charts
     * @return \QuantiModo\Client\Model\Chart[]
     */
    public function getCharts()
    {
        return $this->container['charts'];
    }

    /**
     * Sets charts
     * @param \QuantiModo\Client\Model\Chart[] $charts
     * @return $this
     */
    public function setCharts($charts)
    {
        $this->container['charts'] = $charts;

        return $this;
    }

    /**
     * Gets effect_processed_daily_measurements
     * @return \QuantiModo\Client\Model\ProcessedDailyMeasurement[]
     */
    public function getEffectProcessedDailyMeasurements()
    {
        return $this->container['effect_processed_daily_measurements'];
    }

    /**
     * Sets effect_processed_daily_measurements
     * @param \QuantiModo\Client\Model\ProcessedDailyMeasurement[] $effect_processed_daily_measurements
     * @return $this
     */
    public function setEffectProcessedDailyMeasurements($effect_processed_daily_measurements)
    {
        $this->container['effect_processed_daily_measurements'] = $effect_processed_daily_measurements;

        return $this;
    }

    /**
     * Gets effect_variable
     * @return \QuantiModo\Client\Model\UserVariable
     */
    public function getEffectVariable()
    {
        return $this->container['effect_variable'];
    }

    /**
     * Sets effect_variable
     * @param \QuantiModo\Client\Model\UserVariable $effect_variable
     * @return $this
     */
    public function setEffectVariable($effect_variable)
    {
        $this->container['effect_variable'] = $effect_variable;

        return $this;
    }

    /**
     * Gets pairs
     * @return \QuantiModo\Client\Model\Pair[]
     */
    public function getPairs()
    {
        return $this->container['pairs'];
    }

    /**
     * Sets pairs
     * @param \QuantiModo\Client\Model\Pair[] $pairs
     * @return $this
     */
    public function setPairs($pairs)
    {
        $this->container['pairs'] = $pairs;

        return $this;
    }

    /**
     * Gets statistics
     * @return \QuantiModo\Client\Model\Correlation
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     * @param \QuantiModo\Client\Model\Correlation $statistics
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text Example:
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets user
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     * @param string $user Example:
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Example: 230
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


