<?php
/**
 * VariableNew
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * VariableNew Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VariableNew implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'name' => 'string',
        'category' => 'string',
        'unit' => 'string',
        'combination_operation' => 'string',
        'parent' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'name' => 'name',
        'category' => 'category',
        'unit' => 'unit',
        'combination_operation' => 'combinationOperation',
        'parent' => 'parent'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'name' => 'setName',
        'category' => 'setCategory',
        'unit' => 'setUnit',
        'combination_operation' => 'setCombinationOperation',
        'parent' => 'setParent'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'name' => 'getName',
        'category' => 'getCategory',
        'unit' => 'getUnit',
        'combination_operation' => 'getCombinationOperation',
        'parent' => 'getParent'
    );
  
    
    /**
      * $name User-defined variable display name.
      * @var string
      */
    protected $name;
    
    /**
      * $category Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
      * @var string
      */
    protected $category;
    
    /**
      * $unit Abbreviated name of the default unit for the variable
      * @var string
      */
    protected $unit;
    
    /**
      * $combination_operation How to aggregate measurements over time.
      * @var string
      */
    protected $combination_operation;
    
    /**
      * $parent Parent
      * @var string
      */
    protected $parent;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->name = $data["name"];
            $this->category = $data["category"];
            $this->unit = $data["unit"];
            $this->combination_operation = $data["combination_operation"];
            $this->parent = $data["parent"];
        }
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name User-defined variable display name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }
  
    /**
     * Sets category
     * @param string $category Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
     * @return $this
     */
    public function setCategory($category)
    {
        
        $this->category = $category;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit Abbreviated name of the default unit for the variable
     * @return $this
     */
    public function setUnit($unit)
    {
        
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->combination_operation;
    }
  
    /**
     * Sets combination_operation
     * @param string $combination_operation How to aggregate measurements over time.
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $allowed_values = array("MEAN", "SUM");
        if (!in_array($combination_operation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'combination_operation', must be one of 'MEAN', 'SUM'");
        }
        $this->combination_operation = $combination_operation;
        return $this;
    }
    
    /**
     * Gets parent
     * @return string
     */
    public function getParent()
    {
        return $this->parent;
    }
  
    /**
     * Sets parent
     * @param string $parent Parent
     * @return $this
     */
    public function setParent($parent)
    {
        
        $this->parent = $parent;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
