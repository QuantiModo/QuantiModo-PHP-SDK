<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class MeasurementsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  
	/**
	 * measurementSourcesGet
   *
	 * Get measurement sources
   
	 * @return 
	 */

   public function measurementSourcesGet() {

  		// parse inputs
  		$resourcePath = "/measurementSources";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * measurementSourcesPost
   *
	 * Set measurement source
   * Measurements, array[MeasurementSource]: An array of measurements you want to insert (required)
   * 
	 * @return 
	 */

   public function measurementSourcesPost($Measurements) {

  		// parse inputs
  		$resourcePath = "/measurementSources";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      // body params
      $body = null;
      if (isset($Measurements)) {
        $body = $Measurements;
      }

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * measurementsGet
   *
	 * Get measurements for this user
   * variableName, string: Name of the variable you want measurements for (required)
   * * unit, string: The unit your want the measurements in (required)
   * * startTime, string: The lower limit of measurements returned (Epoch) (required)
   * * endTime, string: The upper limit of measurements returned (Epoch) (required)
   * * groupingWidth, int: The time (in seconds) over which measurements are grouped together (required)
   * * groupingTimezone, string: The time (in seconds) over which measurements are grouped together (required)
   * 
	 * @return 
	 */

   public function measurementsGet($variableName, $unit, $startTime, $endTime, $groupingWidth, $groupingTimezone) {

  		// parse inputs
  		$resourcePath = "/measurements";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($variableName !== null) {
  		  $queryParams['variableName'] = $this->apiClient->toQueryValue($variableName);
  		}// query params
      if($unit !== null) {
  		  $queryParams['unit'] = $this->apiClient->toQueryValue($unit);
  		}// query params
      if($startTime !== null) {
  		  $queryParams['startTime'] = $this->apiClient->toQueryValue($startTime);
  		}// query params
      if($endTime !== null) {
  		  $queryParams['endTime'] = $this->apiClient->toQueryValue($endTime);
  		}// query params
      if($groupingWidth !== null) {
  		  $queryParams['groupingWidth'] = $this->apiClient->toQueryValue($groupingWidth);
  		}// query params
      if($groupingTimezone !== null) {
  		  $queryParams['groupingTimezone'] = $this->apiClient->toQueryValue($groupingTimezone);
  		}
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * measurementsV2Post
   *
	 * Set measurement
   * Measurements, array[Measurement]: An array of measurements you want to insert (required)
   * 
	 * @return 
	 */

   public function measurementsV2Post($Measurements) {

  		// parse inputs
  		$resourcePath = "/measurements/v2";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      // body params
      $body = null;
      if (isset($Measurements)) {
        $body = $Measurements;
      }

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * measurementsRangeGet
   *
	 * Get measurements range for this user
   * sources, string: Enter source name to limit to specific source (varchar) (required)
   * * user, int: If not specified, uses currently logged in user (bigint) (required)
   * 
	 * @return 
	 */

   public function measurementsRangeGet($sources, $user) {

  		// parse inputs
  		$resourcePath = "/measurementsRange";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($sources !== null) {
  		  $queryParams['sources'] = $this->apiClient->toQueryValue($sources);
  		}// query params
      if($user !== null) {
  		  $queryParams['user'] = $this->apiClient->toQueryValue($user);
  		}
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  

}
