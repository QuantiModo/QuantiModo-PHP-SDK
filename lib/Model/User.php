<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * User Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class User implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'wp_id' => 'int',
        'display_name' => 'string',
        'login_name' => 'string',
        'email' => 'string',
        'token' => 'string',
        'administrator' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'wp_id' => 'wpId',
        'display_name' => 'displayName',
        'login_name' => 'loginName',
        'email' => 'email',
        'token' => 'token',
        'administrator' => 'administrator'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'wp_id' => 'setWpId',
        'display_name' => 'setDisplayName',
        'login_name' => 'setLoginName',
        'email' => 'setEmail',
        'token' => 'setToken',
        'administrator' => 'setAdministrator'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'wp_id' => 'getWpId',
        'display_name' => 'getDisplayName',
        'login_name' => 'getLoginName',
        'email' => 'getEmail',
        'token' => 'getToken',
        'administrator' => 'getAdministrator'
    );
  
    
    /**
      * $id User id
      * @var int
      */
    protected $id;
    
    /**
      * $wp_id Wordpress user id
      * @var int
      */
    protected $wp_id;
    
    /**
      * $display_name User display name
      * @var string
      */
    protected $display_name;
    
    /**
      * $login_name User login name
      * @var string
      */
    protected $login_name;
    
    /**
      * $email User email
      * @var string
      */
    protected $email;
    
    /**
      * $token User token
      * @var string
      */
    protected $token;
    
    /**
      * $administrator Is user administrator
      * @var bool
      */
    protected $administrator;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->wp_id = $data["wp_id"];
            $this->display_name = $data["display_name"];
            $this->login_name = $data["login_name"];
            $this->email = $data["email"];
            $this->token = $data["token"];
            $this->administrator = $data["administrator"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id User id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets wp_id
     * @return int
     */
    public function getWpId()
    {
        return $this->wp_id;
    }
  
    /**
     * Sets wp_id
     * @param int $wp_id Wordpress user id
     * @return $this
     */
    public function setWpId($wp_id)
    {
        
        $this->wp_id = $wp_id;
        return $this;
    }
    
    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }
  
    /**
     * Sets display_name
     * @param string $display_name User display name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        
        $this->display_name = $display_name;
        return $this;
    }
    
    /**
     * Gets login_name
     * @return string
     */
    public function getLoginName()
    {
        return $this->login_name;
    }
  
    /**
     * Sets login_name
     * @param string $login_name User login name
     * @return $this
     */
    public function setLoginName($login_name)
    {
        
        $this->login_name = $login_name;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email User email
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets token
     * @return string
     */
    public function getToken()
    {
        return $this->token;
    }
  
    /**
     * Sets token
     * @param string $token User token
     * @return $this
     */
    public function setToken($token)
    {
        
        $this->token = $token;
        return $this;
    }
    
    /**
     * Gets administrator
     * @return bool
     */
    public function getAdministrator()
    {
        return $this->administrator;
    }
  
    /**
     * Sets administrator
     * @param bool $administrator Is user administrator
     * @return $this
     */
    public function setAdministrator($administrator)
    {
        
        $this->administrator = $administrator;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
