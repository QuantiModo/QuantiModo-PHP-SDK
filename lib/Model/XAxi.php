<?php
/**
 * XAxi
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * XAxi Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class XAxi implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'XAxi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'categories' => 'string[]',
        'end_on_tick' => 'bool',
        'show_last_label' => 'bool',
        'start_on_tick' => 'bool',
        'text' => 'string',
        'title' => '\QuantiModo\Client\Model\Title'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'categories' => null,
        'end_on_tick' => null,
        'show_last_label' => null,
        'start_on_tick' => null,
        'text' => null,
        'title' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'categories' => 'categories',
        'end_on_tick' => 'endOnTick',
        'show_last_label' => 'showLastLabel',
        'start_on_tick' => 'startOnTick',
        'text' => 'text',
        'title' => 'title'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'categories' => 'setCategories',
        'end_on_tick' => 'setEndOnTick',
        'show_last_label' => 'setShowLastLabel',
        'start_on_tick' => 'setStartOnTick',
        'text' => 'setText',
        'title' => 'setTitle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'categories' => 'getCategories',
        'end_on_tick' => 'getEndOnTick',
        'show_last_label' => 'getShowLastLabel',
        'start_on_tick' => 'getStartOnTick',
        'text' => 'getText',
        'title' => 'getTitle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['end_on_tick'] = isset($data['end_on_tick']) ? $data['end_on_tick'] : null;
        $this->container['show_last_label'] = isset($data['show_last_label']) ? $data['show_last_label'] : null;
        $this->container['start_on_tick'] = isset($data['start_on_tick']) ? $data['start_on_tick'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['categories'] === null) {
            $invalid_properties[] = "'categories' can't be null";
        }
        if ($this->container['end_on_tick'] === null) {
            $invalid_properties[] = "'end_on_tick' can't be null";
        }
        if ($this->container['show_last_label'] === null) {
            $invalid_properties[] = "'show_last_label' can't be null";
        }
        if ($this->container['start_on_tick'] === null) {
            $invalid_properties[] = "'start_on_tick' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalid_properties[] = "'text' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalid_properties[] = "'title' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['categories'] === null) {
            return false;
        }
        if ($this->container['end_on_tick'] === null) {
            return false;
        }
        if ($this->container['show_last_label'] === null) {
            return false;
        }
        if ($this->container['start_on_tick'] === null) {
            return false;
        }
        if ($this->container['text'] === null) {
            return false;
        }
        if ($this->container['title'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets categories
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     * @param string[] $categories
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets end_on_tick
     * @return bool
     */
    public function getEndOnTick()
    {
        return $this->container['end_on_tick'];
    }

    /**
     * Sets end_on_tick
     * @param bool $end_on_tick Example: true
     * @return $this
     */
    public function setEndOnTick($end_on_tick)
    {
        $this->container['end_on_tick'] = $end_on_tick;

        return $this;
    }

    /**
     * Gets show_last_label
     * @return bool
     */
    public function getShowLastLabel()
    {
        return $this->container['show_last_label'];
    }

    /**
     * Sets show_last_label
     * @param bool $show_last_label Example: true
     * @return $this
     */
    public function setShowLastLabel($show_last_label)
    {
        $this->container['show_last_label'] = $show_last_label;

        return $this;
    }

    /**
     * Gets start_on_tick
     * @return bool
     */
    public function getStartOnTick()
    {
        return $this->container['start_on_tick'];
    }

    /**
     * Sets start_on_tick
     * @param bool $start_on_tick Example: true
     * @return $this
     */
    public function setStartOnTick($start_on_tick)
    {
        $this->container['start_on_tick'] = $start_on_tick;

        return $this;
    }

    /**
     * Gets text
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param string $text Example: Date
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets title
     * @return \QuantiModo\Client\Model\Title
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param \QuantiModo\Client\Model\Title $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


