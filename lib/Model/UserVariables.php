<?php
/**
 * UserVariables
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UserVariables Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserVariables implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'user' => 'int',
        'variable_id' => 'int',
        'duration_of_action' => 'int',
        'filling_value' => 'int',
        'join_with' => 'string',
        'maximum_allowed_value' => 'float',
        'minimum_allowed_value' => 'float',
        'onset_delay' => 'int',
        'experiment_start_time' => 'string',
        'experiment_end_time' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'user' => 'user',
        'variable_id' => 'variableId',
        'duration_of_action' => 'durationOfAction',
        'filling_value' => 'fillingValue',
        'join_with' => 'joinWith',
        'maximum_allowed_value' => 'maximumAllowedValue',
        'minimum_allowed_value' => 'minimumAllowedValue',
        'onset_delay' => 'onsetDelay',
        'experiment_start_time' => 'experimentStartTime',
        'experiment_end_time' => 'experimentEndTime'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'user' => 'setUser',
        'variable_id' => 'setVariableId',
        'duration_of_action' => 'setDurationOfAction',
        'filling_value' => 'setFillingValue',
        'join_with' => 'setJoinWith',
        'maximum_allowed_value' => 'setMaximumAllowedValue',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'onset_delay' => 'setOnsetDelay',
        'experiment_start_time' => 'setExperimentStartTime',
        'experiment_end_time' => 'setExperimentEndTime'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'user' => 'getUser',
        'variable_id' => 'getVariableId',
        'duration_of_action' => 'getDurationOfAction',
        'filling_value' => 'getFillingValue',
        'join_with' => 'getJoinWith',
        'maximum_allowed_value' => 'getMaximumAllowedValue',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'onset_delay' => 'getOnsetDelay',
        'experiment_start_time' => 'getExperimentStartTime',
        'experiment_end_time' => 'getExperimentEndTime'
    );
  
    
    /**
      * $user User ID
      * @var int
      */
    protected $user;
    
    /**
      * $variable_id Common variable id
      * @var int
      */
    protected $variable_id;
    
    /**
      * $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $filling_value fillingValue
      * @var int
      */
    protected $filling_value;
    
    /**
      * $join_with joinWith
      * @var string
      */
    protected $join_with;
    
    /**
      * $maximum_allowed_value maximumAllowedValue
      * @var float
      */
    protected $maximum_allowed_value;
    
    /**
      * $minimum_allowed_value minimumAllowedValue
      * @var float
      */
    protected $minimum_allowed_value;
    
    /**
      * $onset_delay onsetDelay
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $experiment_start_time Earliest measurement startTime that should be used in analysis in ISO format
      * @var string
      */
    protected $experiment_start_time;
    
    /**
      * $experiment_end_time Latest measurement startTime that should be used in analysis in ISO format
      * @var string
      */
    protected $experiment_end_time;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->user = $data["user"];
            $this->variable_id = $data["variable_id"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->filling_value = $data["filling_value"];
            $this->join_with = $data["join_with"];
            $this->maximum_allowed_value = $data["maximum_allowed_value"];
            $this->minimum_allowed_value = $data["minimum_allowed_value"];
            $this->onset_delay = $data["onset_delay"];
            $this->experiment_start_time = $data["experiment_start_time"];
            $this->experiment_end_time = $data["experiment_end_time"];
        }
    }
    
    /**
     * Gets user
     * @return int
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param int $user User ID
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->variable_id;
    }
  
    /**
     * Sets variable_id
     * @param int $variable_id Common variable id
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        
        $this->variable_id = $variable_id;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets filling_value
     * @return int
     */
    public function getFillingValue()
    {
        return $this->filling_value;
    }
  
    /**
     * Sets filling_value
     * @param int $filling_value fillingValue
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        
        $this->filling_value = $filling_value;
        return $this;
    }
    
    /**
     * Gets join_with
     * @return string
     */
    public function getJoinWith()
    {
        return $this->join_with;
    }
  
    /**
     * Sets join_with
     * @param string $join_with joinWith
     * @return $this
     */
    public function setJoinWith($join_with)
    {
        
        $this->join_with = $join_with;
        return $this;
    }
    
    /**
     * Gets maximum_allowed_value
     * @return float
     */
    public function getMaximumAllowedValue()
    {
        return $this->maximum_allowed_value;
    }
  
    /**
     * Sets maximum_allowed_value
     * @param float $maximum_allowed_value maximumAllowedValue
     * @return $this
     */
    public function setMaximumAllowedValue($maximum_allowed_value)
    {
        
        $this->maximum_allowed_value = $maximum_allowed_value;
        return $this;
    }
    
    /**
     * Gets minimum_allowed_value
     * @return float
     */
    public function getMinimumAllowedValue()
    {
        return $this->minimum_allowed_value;
    }
  
    /**
     * Sets minimum_allowed_value
     * @param float $minimum_allowed_value minimumAllowedValue
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        
        $this->minimum_allowed_value = $minimum_allowed_value;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay onsetDelay
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets experiment_start_time
     * @return string
     */
    public function getExperimentStartTime()
    {
        return $this->experiment_start_time;
    }
  
    /**
     * Sets experiment_start_time
     * @param string $experiment_start_time Earliest measurement startTime that should be used in analysis in ISO format
     * @return $this
     */
    public function setExperimentStartTime($experiment_start_time)
    {
        
        $this->experiment_start_time = $experiment_start_time;
        return $this;
    }
    
    /**
     * Gets experiment_end_time
     * @return string
     */
    public function getExperimentEndTime()
    {
        return $this->experiment_end_time;
    }
  
    /**
     * Sets experiment_end_time
     * @param string $experiment_end_time Latest measurement startTime that should be used in analysis in ISO format
     * @return $this
     */
    public function setExperimentEndTime($experiment_end_time)
    {
        
        $this->experiment_end_time = $experiment_end_time;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
