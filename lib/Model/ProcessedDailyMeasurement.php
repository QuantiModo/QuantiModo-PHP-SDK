<?php
/**
 * ProcessedDailyMeasurement
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * ProcessedDailyMeasurement Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ProcessedDailyMeasurement implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ProcessedDailyMeasurement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duration' => 'int',
        'id' => 'string',
        'note' => 'string',
        'original_unit_id' => 'string',
        'original_value' => 'string',
        'start_date' => 'string',
        'start_time_epoch' => 'int',
        'start_time_string' => '\DateTime',
        'unit_id' => 'int',
        'value' => 'double',
        'variable_category_id' => 'int',
        'variable_id' => 'int',
        'variable_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duration' => null,
        'id' => null,
        'note' => null,
        'original_unit_id' => null,
        'original_value' => null,
        'start_date' => null,
        'start_time_epoch' => null,
        'start_time_string' => 'date-time',
        'unit_id' => null,
        'value' => 'double',
        'variable_category_id' => null,
        'variable_id' => null,
        'variable_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'duration' => 'duration',
        'id' => 'id',
        'note' => 'note',
        'original_unit_id' => 'originalUnitId',
        'original_value' => 'originalValue',
        'start_date' => 'startDate',
        'start_time_epoch' => 'startTimeEpoch',
        'start_time_string' => 'startTimeString',
        'unit_id' => 'unitId',
        'value' => 'value',
        'variable_category_id' => 'variableCategoryId',
        'variable_id' => 'variableId',
        'variable_name' => 'variableName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'duration' => 'setDuration',
        'id' => 'setId',
        'note' => 'setNote',
        'original_unit_id' => 'setOriginalUnitId',
        'original_value' => 'setOriginalValue',
        'start_date' => 'setStartDate',
        'start_time_epoch' => 'setStartTimeEpoch',
        'start_time_string' => 'setStartTimeString',
        'unit_id' => 'setUnitId',
        'value' => 'setValue',
        'variable_category_id' => 'setVariableCategoryId',
        'variable_id' => 'setVariableId',
        'variable_name' => 'setVariableName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'duration' => 'getDuration',
        'id' => 'getId',
        'note' => 'getNote',
        'original_unit_id' => 'getOriginalUnitId',
        'original_value' => 'getOriginalValue',
        'start_date' => 'getStartDate',
        'start_time_epoch' => 'getStartTimeEpoch',
        'start_time_string' => 'getStartTimeString',
        'unit_id' => 'getUnitId',
        'value' => 'getValue',
        'variable_category_id' => 'getVariableCategoryId',
        'variable_id' => 'getVariableId',
        'variable_name' => 'getVariableName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['original_unit_id'] = isset($data['original_unit_id']) ? $data['original_unit_id'] : null;
        $this->container['original_value'] = isset($data['original_value']) ? $data['original_value'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['start_time_epoch'] = isset($data['start_time_epoch']) ? $data['start_time_epoch'] : null;
        $this->container['start_time_string'] = isset($data['start_time_string']) ? $data['start_time_string'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['variable_category_id'] = isset($data['variable_category_id']) ? $data['variable_category_id'] : null;
        $this->container['variable_id'] = isset($data['variable_id']) ? $data['variable_id'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['duration'] === null) {
            $invalid_properties[] = "'duration' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalid_properties[] = "'note' can't be null";
        }
        if ($this->container['original_unit_id'] === null) {
            $invalid_properties[] = "'original_unit_id' can't be null";
        }
        if ($this->container['original_value'] === null) {
            $invalid_properties[] = "'original_value' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['start_time_epoch'] === null) {
            $invalid_properties[] = "'start_time_epoch' can't be null";
        }
        if ($this->container['start_time_string'] === null) {
            $invalid_properties[] = "'start_time_string' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalid_properties[] = "'unit_id' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalid_properties[] = "'value' can't be null";
        }
        if ($this->container['variable_category_id'] === null) {
            $invalid_properties[] = "'variable_category_id' can't be null";
        }
        if ($this->container['variable_id'] === null) {
            $invalid_properties[] = "'variable_id' can't be null";
        }
        if ($this->container['variable_name'] === null) {
            $invalid_properties[] = "'variable_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['duration'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['note'] === null) {
            return false;
        }
        if ($this->container['original_unit_id'] === null) {
            return false;
        }
        if ($this->container['original_value'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['start_time_epoch'] === null) {
            return false;
        }
        if ($this->container['start_time_string'] === null) {
            return false;
        }
        if ($this->container['unit_id'] === null) {
            return false;
        }
        if ($this->container['value'] === null) {
            return false;
        }
        if ($this->container['variable_category_id'] === null) {
            return false;
        }
        if ($this->container['variable_id'] === null) {
            return false;
        }
        if ($this->container['variable_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration Example: 0
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Example:
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     * @param string $note Example:
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets original_unit_id
     * @return string
     */
    public function getOriginalUnitId()
    {
        return $this->container['original_unit_id'];
    }

    /**
     * Sets original_unit_id
     * @param string $original_unit_id Example: 47, 47, 47, 47, 47, 47
     * @return $this
     */
    public function setOriginalUnitId($original_unit_id)
    {
        $this->container['original_unit_id'] = $original_unit_id;

        return $this;
    }

    /**
     * Gets original_value
     * @return string
     */
    public function getOriginalValue()
    {
        return $this->container['original_value'];
    }

    /**
     * Sets original_value
     * @param string $original_value Example: 101800, 101800, 101700, 101600, 101600, 101600
     * @return $this
     */
    public function setOriginalValue($original_value)
    {
        $this->container['original_value'] = $original_value;

        return $this;
    }

    /**
     * Gets start_date
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param string $start_date Example: 2016-06-03
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets start_time_epoch
     * @return int
     */
    public function getStartTimeEpoch()
    {
        return $this->container['start_time_epoch'];
    }

    /**
     * Sets start_time_epoch
     * @param int $start_time_epoch Example: 1464937200
     * @return $this
     */
    public function setStartTimeEpoch($start_time_epoch)
    {
        $this->container['start_time_epoch'] = $start_time_epoch;

        return $this;
    }

    /**
     * Gets start_time_string
     * @return \DateTime
     */
    public function getStartTimeString()
    {
        return $this->container['start_time_string'];
    }

    /**
     * Sets start_time_string
     * @param \DateTime $start_time_string Example: 2016-06-03 07:00:00
     * @return $this
     */
    public function setStartTimeString($start_time_string)
    {
        $this->container['start_time_string'] = $start_time_string;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id Example: 47
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     * @param double $value Example: 101341.66666667
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->container['variable_category_id'];
    }

    /**
     * Sets variable_category_id
     * @param int $variable_category_id Example: 17
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        $this->container['variable_category_id'] = $variable_category_id;

        return $this;
    }

    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     * @param int $variable_id Example: 96380
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        $this->container['variable_id'] = $variable_id;

        return $this;
    }

    /**
     * Gets variable_name
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     * @param string $variable_name Example: Barometric Pressure
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


