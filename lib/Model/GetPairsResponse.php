<?php
/**
 * GetPairsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * GetPairsResponse Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetPairsResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetPairsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cause_measurement' => 'double',
        'cause_measurement_value' => 'double',
        'effect_measurement' => 'double',
        'effect_measurement_value' => 'double',
        'start_time_string' => '\DateTime',
        'timestamp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cause_measurement' => 'double',
        'cause_measurement_value' => 'double',
        'effect_measurement' => 'double',
        'effect_measurement_value' => 'double',
        'start_time_string' => 'date-time',
        'timestamp' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cause_measurement' => 'causeMeasurement',
        'cause_measurement_value' => 'causeMeasurementValue',
        'effect_measurement' => 'effectMeasurement',
        'effect_measurement_value' => 'effectMeasurementValue',
        'start_time_string' => 'startTimeString',
        'timestamp' => 'timestamp'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cause_measurement' => 'setCauseMeasurement',
        'cause_measurement_value' => 'setCauseMeasurementValue',
        'effect_measurement' => 'setEffectMeasurement',
        'effect_measurement_value' => 'setEffectMeasurementValue',
        'start_time_string' => 'setStartTimeString',
        'timestamp' => 'setTimestamp'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cause_measurement' => 'getCauseMeasurement',
        'cause_measurement_value' => 'getCauseMeasurementValue',
        'effect_measurement' => 'getEffectMeasurement',
        'effect_measurement_value' => 'getEffectMeasurementValue',
        'start_time_string' => 'getStartTimeString',
        'timestamp' => 'getTimestamp'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cause_measurement'] = isset($data['cause_measurement']) ? $data['cause_measurement'] : null;
        $this->container['cause_measurement_value'] = isset($data['cause_measurement_value']) ? $data['cause_measurement_value'] : null;
        $this->container['effect_measurement'] = isset($data['effect_measurement']) ? $data['effect_measurement'] : null;
        $this->container['effect_measurement_value'] = isset($data['effect_measurement_value']) ? $data['effect_measurement_value'] : null;
        $this->container['start_time_string'] = isset($data['start_time_string']) ? $data['start_time_string'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cause_measurement
     * @return double
     */
    public function getCauseMeasurement()
    {
        return $this->container['cause_measurement'];
    }

    /**
     * Sets cause_measurement
     * @param double $cause_measurement Example: 2.0166666666667
     * @return $this
     */
    public function setCauseMeasurement($cause_measurement)
    {
        $this->container['cause_measurement'] = $cause_measurement;

        return $this;
    }

    /**
     * Gets cause_measurement_value
     * @return double
     */
    public function getCauseMeasurementValue()
    {
        return $this->container['cause_measurement_value'];
    }

    /**
     * Sets cause_measurement_value
     * @param double $cause_measurement_value Example: 2.0166666666667
     * @return $this
     */
    public function setCauseMeasurementValue($cause_measurement_value)
    {
        $this->container['cause_measurement_value'] = $cause_measurement_value;

        return $this;
    }

    /**
     * Gets effect_measurement
     * @return double
     */
    public function getEffectMeasurement()
    {
        return $this->container['effect_measurement'];
    }

    /**
     * Sets effect_measurement
     * @param double $effect_measurement Example: 4
     * @return $this
     */
    public function setEffectMeasurement($effect_measurement)
    {
        $this->container['effect_measurement'] = $effect_measurement;

        return $this;
    }

    /**
     * Gets effect_measurement_value
     * @return double
     */
    public function getEffectMeasurementValue()
    {
        return $this->container['effect_measurement_value'];
    }

    /**
     * Sets effect_measurement_value
     * @param double $effect_measurement_value Example: 4
     * @return $this
     */
    public function setEffectMeasurementValue($effect_measurement_value)
    {
        $this->container['effect_measurement_value'] = $effect_measurement_value;

        return $this;
    }

    /**
     * Gets start_time_string
     * @return \DateTime
     */
    public function getStartTimeString()
    {
        return $this->container['start_time_string'];
    }

    /**
     * Sets start_time_string
     * @param \DateTime $start_time_string Example: 2015-08-06 15:49:02
     * @return $this
     */
    public function setStartTimeString($start_time_string)
    {
        $this->container['start_time_string'] = $start_time_string;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp Example: 1438876142
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


