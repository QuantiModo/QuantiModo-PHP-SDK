<?php
/**
 * Permission
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Permission Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Permission implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'target' => 'int',
        'variable_name' => 'string',
        'min_timestamp' => 'int',
        'max_timestamp' => 'int',
        'min_time_of_day' => 'int',
        'max_time_of_day' => 'int',
        'week' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'target' => 'target',
        'variable_name' => 'variableName',
        'min_timestamp' => 'min_timestamp',
        'max_timestamp' => 'max_timestamp',
        'min_time_of_day' => 'min_time_of_day',
        'max_time_of_day' => 'max_time_of_day',
        'week' => 'week'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'target' => 'setTarget',
        'variable_name' => 'setVariableName',
        'min_timestamp' => 'setMinTimestamp',
        'max_timestamp' => 'setMaxTimestamp',
        'min_time_of_day' => 'setMinTimeOfDay',
        'max_time_of_day' => 'setMaxTimeOfDay',
        'week' => 'setWeek'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'target' => 'getTarget',
        'variable_name' => 'getVariableName',
        'min_timestamp' => 'getMinTimestamp',
        'max_timestamp' => 'getMaxTimestamp',
        'min_time_of_day' => 'getMinTimeOfDay',
        'max_time_of_day' => 'getMaxTimeOfDay',
        'week' => 'getWeek'
    );
  
    
    /**
      * $target Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.
      * @var int
      */
    protected $target;
    
    /**
      * $variable_name ORIGINAL Variable name
      * @var string
      */
    protected $variable_name;
    
    /**
      * $min_timestamp Earliest time when measurements will be accessible in epoch seconds
      * @var int
      */
    protected $min_timestamp;
    
    /**
      * $max_timestamp Latest time when measurements will be accessible in epoch seconds
      * @var int
      */
    protected $max_timestamp;
    
    /**
      * $min_time_of_day Earliest time of day when measurements will be accessible in epoch seconds
      * @var int
      */
    protected $min_time_of_day;
    
    /**
      * $max_time_of_day Latest time of day when measurements will be accessible in epoch seconds
      * @var int
      */
    protected $max_time_of_day;
    
    /**
      * $week Maybe specifies if only weekday measurements should be accessible
      * @var string
      */
    protected $week;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->target = $data["target"];
            $this->variable_name = $data["variable_name"];
            $this->min_timestamp = $data["min_timestamp"];
            $this->max_timestamp = $data["max_timestamp"];
            $this->min_time_of_day = $data["min_time_of_day"];
            $this->max_time_of_day = $data["max_time_of_day"];
            $this->week = $data["week"];
        }
    }
    
    /**
     * Gets target
     * @return int
     */
    public function getTarget()
    {
        return $this->target;
    }
  
    /**
     * Sets target
     * @param int $target Grant permission to target user or public so they may access measurements within the given parameters. TODO: Rename target to something more intuitive.
     * @return $this
     */
    public function setTarget($target)
    {
        
        $this->target = $target;
        return $this;
    }
    
    /**
     * Gets variable_name
     * @return string
     */
    public function getVariableName()
    {
        return $this->variable_name;
    }
  
    /**
     * Sets variable_name
     * @param string $variable_name ORIGINAL Variable name
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        
        $this->variable_name = $variable_name;
        return $this;
    }
    
    /**
     * Gets min_timestamp
     * @return int
     */
    public function getMinTimestamp()
    {
        return $this->min_timestamp;
    }
  
    /**
     * Sets min_timestamp
     * @param int $min_timestamp Earliest time when measurements will be accessible in epoch seconds
     * @return $this
     */
    public function setMinTimestamp($min_timestamp)
    {
        
        $this->min_timestamp = $min_timestamp;
        return $this;
    }
    
    /**
     * Gets max_timestamp
     * @return int
     */
    public function getMaxTimestamp()
    {
        return $this->max_timestamp;
    }
  
    /**
     * Sets max_timestamp
     * @param int $max_timestamp Latest time when measurements will be accessible in epoch seconds
     * @return $this
     */
    public function setMaxTimestamp($max_timestamp)
    {
        
        $this->max_timestamp = $max_timestamp;
        return $this;
    }
    
    /**
     * Gets min_time_of_day
     * @return int
     */
    public function getMinTimeOfDay()
    {
        return $this->min_time_of_day;
    }
  
    /**
     * Sets min_time_of_day
     * @param int $min_time_of_day Earliest time of day when measurements will be accessible in epoch seconds
     * @return $this
     */
    public function setMinTimeOfDay($min_time_of_day)
    {
        
        $this->min_time_of_day = $min_time_of_day;
        return $this;
    }
    
    /**
     * Gets max_time_of_day
     * @return int
     */
    public function getMaxTimeOfDay()
    {
        return $this->max_time_of_day;
    }
  
    /**
     * Sets max_time_of_day
     * @param int $max_time_of_day Latest time of day when measurements will be accessible in epoch seconds
     * @return $this
     */
    public function setMaxTimeOfDay($max_time_of_day)
    {
        
        $this->max_time_of_day = $max_time_of_day;
        return $this;
    }
    
    /**
     * Gets week
     * @return string
     */
    public function getWeek()
    {
        return $this->week;
    }
  
    /**
     * Sets week
     * @param string $week Maybe specifies if only weekday measurements should be accessible
     * @return $this
     */
    public function setWeek($week)
    {
        
        $this->week = $week;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
