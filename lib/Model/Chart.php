<?php
/**
 * Chart
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * Chart Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Chart implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Chart';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'animation' => '\QuantiModo\Client\Model\Animation',
        'chart_config' => '\QuantiModo\Client\Model\ChartConfig',
        'chart_id' => 'string',
        'chart_title' => 'string',
        'explanation' => 'string',
        'height' => 'int',
        'render_to' => 'string',
        'type' => 'string',
        'zoom_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'animation' => null,
        'chart_config' => null,
        'chart_id' => null,
        'chart_title' => null,
        'explanation' => null,
        'height' => null,
        'render_to' => null,
        'type' => null,
        'zoom_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'animation' => 'animation',
        'chart_config' => 'chartConfig',
        'chart_id' => 'chartId',
        'chart_title' => 'chartTitle',
        'explanation' => 'explanation',
        'height' => 'height',
        'render_to' => 'renderTo',
        'type' => 'type',
        'zoom_type' => 'zoomType'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'animation' => 'setAnimation',
        'chart_config' => 'setChartConfig',
        'chart_id' => 'setChartId',
        'chart_title' => 'setChartTitle',
        'explanation' => 'setExplanation',
        'height' => 'setHeight',
        'render_to' => 'setRenderTo',
        'type' => 'setType',
        'zoom_type' => 'setZoomType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'animation' => 'getAnimation',
        'chart_config' => 'getChartConfig',
        'chart_id' => 'getChartId',
        'chart_title' => 'getChartTitle',
        'explanation' => 'getExplanation',
        'height' => 'getHeight',
        'render_to' => 'getRenderTo',
        'type' => 'getType',
        'zoom_type' => 'getZoomType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['animation'] = isset($data['animation']) ? $data['animation'] : null;
        $this->container['chart_config'] = isset($data['chart_config']) ? $data['chart_config'] : null;
        $this->container['chart_id'] = isset($data['chart_id']) ? $data['chart_id'] : null;
        $this->container['chart_title'] = isset($data['chart_title']) ? $data['chart_title'] : null;
        $this->container['explanation'] = isset($data['explanation']) ? $data['explanation'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['render_to'] = isset($data['render_to']) ? $data['render_to'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['zoom_type'] = isset($data['zoom_type']) ? $data['zoom_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['animation'] === null) {
            $invalid_properties[] = "'animation' can't be null";
        }
        if ($this->container['chart_config'] === null) {
            $invalid_properties[] = "'chart_config' can't be null";
        }
        if ($this->container['chart_id'] === null) {
            $invalid_properties[] = "'chart_id' can't be null";
        }
        if ($this->container['chart_title'] === null) {
            $invalid_properties[] = "'chart_title' can't be null";
        }
        if ($this->container['explanation'] === null) {
            $invalid_properties[] = "'explanation' can't be null";
        }
        if ($this->container['height'] === null) {
            $invalid_properties[] = "'height' can't be null";
        }
        if ($this->container['render_to'] === null) {
            $invalid_properties[] = "'render_to' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        if ($this->container['zoom_type'] === null) {
            $invalid_properties[] = "'zoom_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['animation'] === null) {
            return false;
        }
        if ($this->container['chart_config'] === null) {
            return false;
        }
        if ($this->container['chart_id'] === null) {
            return false;
        }
        if ($this->container['chart_title'] === null) {
            return false;
        }
        if ($this->container['explanation'] === null) {
            return false;
        }
        if ($this->container['height'] === null) {
            return false;
        }
        if ($this->container['render_to'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        if ($this->container['zoom_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets animation
     * @return \QuantiModo\Client\Model\Animation
     */
    public function getAnimation()
    {
        return $this->container['animation'];
    }

    /**
     * Sets animation
     * @param \QuantiModo\Client\Model\Animation $animation
     * @return $this
     */
    public function setAnimation($animation)
    {
        $this->container['animation'] = $animation;

        return $this;
    }

    /**
     * Gets chart_config
     * @return \QuantiModo\Client\Model\ChartConfig
     */
    public function getChartConfig()
    {
        return $this->container['chart_config'];
    }

    /**
     * Sets chart_config
     * @param \QuantiModo\Client\Model\ChartConfig $chart_config
     * @return $this
     */
    public function setChartConfig($chart_config)
    {
        $this->container['chart_config'] = $chart_config;

        return $this;
    }

    /**
     * Gets chart_id
     * @return string
     */
    public function getChartId()
    {
        return $this->container['chart_id'];
    }

    /**
     * Sets chart_id
     * @param string $chart_id Example: correlationScatterPlot
     * @return $this
     */
    public function setChartId($chart_id)
    {
        $this->container['chart_id'] = $chart_id;

        return $this;
    }

    /**
     * Gets chart_title
     * @return string
     */
    public function getChartTitle()
    {
        return $this->container['chart_title'];
    }

    /**
     * Sets chart_title
     * @param string $chart_title Example: Reference And Learning Hours following Barometric Pressure (R = 0.147)
     * @return $this
     */
    public function setChartTitle($chart_title)
    {
        $this->container['chart_title'] = $chart_title;

        return $this;
    }

    /**
     * Gets explanation
     * @return string
     */
    public function getExplanation()
    {
        return $this->container['explanation'];
    }

    /**
     * Sets explanation
     * @param string $explanation Example: The chart above indicates that an increase in Barometric Pressure is usually followed by an increase in Reference And Learning Hours.
     * @return $this
     */
    public function setExplanation($explanation)
    {
        $this->container['explanation'] = $explanation;

        return $this;
    }

    /**
     * Gets height
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     * @param int $height Example: 300
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets render_to
     * @return string
     */
    public function getRenderTo()
    {
        return $this->container['render_to'];
    }

    /**
     * Sets render_to
     * @param string $render_to Example: BarContainer
     * @return $this
     */
    public function setRenderTo($render_to)
    {
        $this->container['render_to'] = $render_to;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Example: scatter
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets zoom_type
     * @return string
     */
    public function getZoomType()
    {
        return $this->container['zoom_type'];
    }

    /**
     * Sets zoom_type
     * @param string $zoom_type Example: xy
     * @return $this
     */
    public function setZoomType($zoom_type)
    {
        $this->container['zoom_type'] = $zoom_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


