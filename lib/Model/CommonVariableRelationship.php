<?php
/**
 * CommonVariableRelationship
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * CommonVariableRelationship Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommonVariableRelationship implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'confidence_level' => 'string',
        'confidence_score' => 'float',
        'direction' => 'string',
        'duration_of_action' => 'int',
        'error_message' => 'string',
        'onset_delay' => 'int',
        'outcome_variable_id' => 'int',
        'predictor_variable_id' => 'int',
        'predictor_unit_id' => 'int',
        'sinn_rank' => 'float',
        'strength_score' => 'float',
        'strength_level' => 'string',
        'up_votes' => 'int',
        'down_votes' => 'int',
        'value_predicting_high_outcome' => 'float',
        'value_predicting_low_outcome' => 'float',
        'number_of_users' => 'int',
        'data_source' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'confidence_level' => 'confidence_level',
        'confidence_score' => 'confidence_score',
        'direction' => 'direction',
        'duration_of_action' => 'duration_of_action',
        'error_message' => 'error_message',
        'onset_delay' => 'onset_delay',
        'outcome_variable_id' => 'outcome_variable_id',
        'predictor_variable_id' => 'predictor_variable_id',
        'predictor_unit_id' => 'predictor_unit_id',
        'sinn_rank' => 'sinn_rank',
        'strength_score' => 'strength_score',
        'strength_level' => 'strength_level',
        'up_votes' => 'up_votes',
        'down_votes' => 'down_votes',
        'value_predicting_high_outcome' => 'value_predicting_high_outcome',
        'value_predicting_low_outcome' => 'value_predicting_low_outcome',
        'number_of_users' => 'number_of_users',
        'data_source' => 'data_source'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'confidence_level' => 'setConfidenceLevel',
        'confidence_score' => 'setConfidenceScore',
        'direction' => 'setDirection',
        'duration_of_action' => 'setDurationOfAction',
        'error_message' => 'setErrorMessage',
        'onset_delay' => 'setOnsetDelay',
        'outcome_variable_id' => 'setOutcomeVariableId',
        'predictor_variable_id' => 'setPredictorVariableId',
        'predictor_unit_id' => 'setPredictorUnitId',
        'sinn_rank' => 'setSinnRank',
        'strength_score' => 'setStrengthScore',
        'strength_level' => 'setStrengthLevel',
        'up_votes' => 'setUpVotes',
        'down_votes' => 'setDownVotes',
        'value_predicting_high_outcome' => 'setValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'setValuePredictingLowOutcome',
        'number_of_users' => 'setNumberOfUsers',
        'data_source' => 'setDataSource'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'confidence_level' => 'getConfidenceLevel',
        'confidence_score' => 'getConfidenceScore',
        'direction' => 'getDirection',
        'duration_of_action' => 'getDurationOfAction',
        'error_message' => 'getErrorMessage',
        'onset_delay' => 'getOnsetDelay',
        'outcome_variable_id' => 'getOutcomeVariableId',
        'predictor_variable_id' => 'getPredictorVariableId',
        'predictor_unit_id' => 'getPredictorUnitId',
        'sinn_rank' => 'getSinnRank',
        'strength_score' => 'getStrengthScore',
        'strength_level' => 'getStrengthLevel',
        'up_votes' => 'getUpVotes',
        'down_votes' => 'getDownVotes',
        'value_predicting_high_outcome' => 'getValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'getValuePredictingLowOutcome',
        'number_of_users' => 'getNumberOfUsers',
        'data_source' => 'getDataSource'
    );
  
    
    /**
      * $id id
      * @var int
      */
    protected $id;
    
    /**
      * $confidence_level Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors
      * @var string
      */
    protected $confidence_level;
    
    /**
      * $confidence_score A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors
      * @var float
      */
    protected $confidence_score;
    
    /**
      * $direction Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.
      * @var string
      */
    protected $direction;
    
    /**
      * $duration_of_action duration_of_action
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $error_message error_message
      * @var string
      */
    protected $error_message;
    
    /**
      * $onset_delay User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $outcome_variable_id Variable ID for the outcome variable
      * @var int
      */
    protected $outcome_variable_id;
    
    /**
      * $predictor_variable_id Variable ID for the predictor variable
      * @var int
      */
    protected $predictor_variable_id;
    
    /**
      * $predictor_unit_id ID for default unit of the predictor variable
      * @var int
      */
    protected $predictor_unit_id;
    
    /**
      * $sinn_rank A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.
      * @var float
      */
    protected $sinn_rank;
    
    /**
      * $strength_score A value represented to the size of the effect which the predictor appears to have on the outcome.
      * @var float
      */
    protected $strength_score;
    
    /**
      * $strength_level Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.
      * @var string
      */
    protected $strength_level;
    
    /**
      * $up_votes Number of users who feel that there is a plausible causal relationship between the predictor and outcome variables.
      * @var int
      */
    protected $up_votes;
    
    /**
      * $down_votes Number of users who do not feel that there is a plausible causal relationship between the predictor and outcome variables.
      * @var int
      */
    protected $down_votes;
    
    /**
      * $value_predicting_high_outcome Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value
      * @var float
      */
    protected $value_predicting_high_outcome;
    
    /**
      * $value_predicting_low_outcome Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value
      * @var float
      */
    protected $value_predicting_low_outcome;
    
    /**
      * $number_of_users Number of users whose data was aggregated to obtain this relationship
      * @var int
      */
    protected $number_of_users;
    
    /**
      * $data_source Source of data for this common variable relationship
      * @var string
      */
    protected $data_source;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->confidence_level = $data["confidence_level"];
            $this->confidence_score = $data["confidence_score"];
            $this->direction = $data["direction"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->error_message = $data["error_message"];
            $this->onset_delay = $data["onset_delay"];
            $this->outcome_variable_id = $data["outcome_variable_id"];
            $this->predictor_variable_id = $data["predictor_variable_id"];
            $this->predictor_unit_id = $data["predictor_unit_id"];
            $this->sinn_rank = $data["sinn_rank"];
            $this->strength_score = $data["strength_score"];
            $this->strength_level = $data["strength_level"];
            $this->up_votes = $data["up_votes"];
            $this->down_votes = $data["down_votes"];
            $this->value_predicting_high_outcome = $data["value_predicting_high_outcome"];
            $this->value_predicting_low_outcome = $data["value_predicting_low_outcome"];
            $this->number_of_users = $data["number_of_users"];
            $this->data_source = $data["data_source"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets confidence_level
     * @return string
     */
    public function getConfidenceLevel()
    {
        return $this->confidence_level;
    }
  
    /**
     * Sets confidence_level
     * @param string $confidence_level Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors
     * @return $this
     */
    public function setConfidenceLevel($confidence_level)
    {
        
        $this->confidence_level = $confidence_level;
        return $this;
    }
    
    /**
     * Gets confidence_score
     * @return float
     */
    public function getConfidenceScore()
    {
        return $this->confidence_score;
    }
  
    /**
     * Sets confidence_score
     * @param float $confidence_score A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors
     * @return $this
     */
    public function setConfidenceScore($confidence_score)
    {
        
        $this->confidence_score = $confidence_score;
        return $this;
    }
    
    /**
     * Gets direction
     * @return string
     */
    public function getDirection()
    {
        return $this->direction;
    }
  
    /**
     * Sets direction
     * @param string $direction Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values.
     * @return $this
     */
    public function setDirection($direction)
    {
        
        $this->direction = $direction;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action duration_of_action
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }
  
    /**
     * Sets error_message
     * @param string $error_message error_message
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        
        $this->error_message = $error_message;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets outcome_variable_id
     * @return int
     */
    public function getOutcomeVariableId()
    {
        return $this->outcome_variable_id;
    }
  
    /**
     * Sets outcome_variable_id
     * @param int $outcome_variable_id Variable ID for the outcome variable
     * @return $this
     */
    public function setOutcomeVariableId($outcome_variable_id)
    {
        
        $this->outcome_variable_id = $outcome_variable_id;
        return $this;
    }
    
    /**
     * Gets predictor_variable_id
     * @return int
     */
    public function getPredictorVariableId()
    {
        return $this->predictor_variable_id;
    }
  
    /**
     * Sets predictor_variable_id
     * @param int $predictor_variable_id Variable ID for the predictor variable
     * @return $this
     */
    public function setPredictorVariableId($predictor_variable_id)
    {
        
        $this->predictor_variable_id = $predictor_variable_id;
        return $this;
    }
    
    /**
     * Gets predictor_unit_id
     * @return int
     */
    public function getPredictorUnitId()
    {
        return $this->predictor_unit_id;
    }
  
    /**
     * Sets predictor_unit_id
     * @param int $predictor_unit_id ID for default unit of the predictor variable
     * @return $this
     */
    public function setPredictorUnitId($predictor_unit_id)
    {
        
        $this->predictor_unit_id = $predictor_unit_id;
        return $this;
    }
    
    /**
     * Gets sinn_rank
     * @return float
     */
    public function getSinnRank()
    {
        return $this->sinn_rank;
    }
  
    /**
     * Sets sinn_rank
     * @param float $sinn_rank A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting.
     * @return $this
     */
    public function setSinnRank($sinn_rank)
    {
        
        $this->sinn_rank = $sinn_rank;
        return $this;
    }
    
    /**
     * Gets strength_score
     * @return float
     */
    public function getStrengthScore()
    {
        return $this->strength_score;
    }
  
    /**
     * Sets strength_score
     * @param float $strength_score A value represented to the size of the effect which the predictor appears to have on the outcome.
     * @return $this
     */
    public function setStrengthScore($strength_score)
    {
        
        $this->strength_score = $strength_score;
        return $this;
    }
    
    /**
     * Gets strength_level
     * @return string
     */
    public function getStrengthLevel()
    {
        return $this->strength_level;
    }
  
    /**
     * Sets strength_level
     * @param string $strength_level Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores.
     * @return $this
     */
    public function setStrengthLevel($strength_level)
    {
        
        $this->strength_level = $strength_level;
        return $this;
    }
    
    /**
     * Gets up_votes
     * @return int
     */
    public function getUpVotes()
    {
        return $this->up_votes;
    }
  
    /**
     * Sets up_votes
     * @param int $up_votes Number of users who feel that there is a plausible causal relationship between the predictor and outcome variables.
     * @return $this
     */
    public function setUpVotes($up_votes)
    {
        
        $this->up_votes = $up_votes;
        return $this;
    }
    
    /**
     * Gets down_votes
     * @return int
     */
    public function getDownVotes()
    {
        return $this->down_votes;
    }
  
    /**
     * Sets down_votes
     * @param int $down_votes Number of users who do not feel that there is a plausible causal relationship between the predictor and outcome variables.
     * @return $this
     */
    public function setDownVotes($down_votes)
    {
        
        $this->down_votes = $down_votes;
        return $this;
    }
    
    /**
     * Gets value_predicting_high_outcome
     * @return float
     */
    public function getValuePredictingHighOutcome()
    {
        return $this->value_predicting_high_outcome;
    }
  
    /**
     * Sets value_predicting_high_outcome
     * @param float $value_predicting_high_outcome Value for the predictor variable (in it's default unit) which typically precedes an above average outcome value
     * @return $this
     */
    public function setValuePredictingHighOutcome($value_predicting_high_outcome)
    {
        
        $this->value_predicting_high_outcome = $value_predicting_high_outcome;
        return $this;
    }
    
    /**
     * Gets value_predicting_low_outcome
     * @return float
     */
    public function getValuePredictingLowOutcome()
    {
        return $this->value_predicting_low_outcome;
    }
  
    /**
     * Sets value_predicting_low_outcome
     * @param float $value_predicting_low_outcome Value for the predictor variable (in it's default unit) which typically precedes a below average outcome value
     * @return $this
     */
    public function setValuePredictingLowOutcome($value_predicting_low_outcome)
    {
        
        $this->value_predicting_low_outcome = $value_predicting_low_outcome;
        return $this;
    }
    
    /**
     * Gets number_of_users
     * @return int
     */
    public function getNumberOfUsers()
    {
        return $this->number_of_users;
    }
  
    /**
     * Sets number_of_users
     * @param int $number_of_users Number of users whose data was aggregated to obtain this relationship
     * @return $this
     */
    public function setNumberOfUsers($number_of_users)
    {
        
        $this->number_of_users = $number_of_users;
        return $this;
    }
    
    /**
     * Gets data_source
     * @return string
     */
    public function getDataSource()
    {
        return $this->data_source;
    }
  
    /**
     * Sets data_source
     * @param string $data_source Source of data for this common variable relationship
     * @return $this
     */
    public function setDataSource($data_source)
    {
        
        $this->data_source = $data_source;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
