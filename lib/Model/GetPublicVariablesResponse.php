<?php
/**
 * GetPublicVariablesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * GetPublicVariablesResponse Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetPublicVariablesResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetPublicVariablesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available_units' => '\QuantiModo\Client\Model\Unit[]',
        'category' => 'string',
        'cause_only' => 'bool',
        'combination_operation' => 'string',
        'common_alias' => 'string',
        'created_at' => '\DateTime',
        'unit_abbreviated_name' => 'string',
        'unit_category_id' => 'int',
        'unit_category_name' => 'string',
        'unit_id' => 'int',
        'unit_name' => 'string',
        'description' => 'string',
        'duration_of_action' => 'int',
        'duration_of_action_in_hours' => 'int',
        'id' => 'int',
        'input_type' => 'string',
        'ion_icon' => 'string',
        'kurtosis' => 'double',
        'manual_tracking' => 'bool',
        'maximum_allowed_value' => 'int',
        'mean' => 'double',
        'median' => 'double',
        'minimum_allowed_value' => 'int',
        'most_common_connector_id' => 'int',
        'most_common_original_unit_id' => 'int',
        'most_common_value' => 'double',
        'name' => 'string',
        'number_of_aggregate_correlations_as_cause' => 'int',
        'number_of_aggregate_correlations_as_effect' => 'int',
        'number_of_measurements' => 'int',
        'number_of_raw_measurements' => 'int',
        'number_of_tracking_reminders' => 'int',
        'number_of_unique_values' => 'int',
        'number_of_user_variables' => 'int',
        'onset_delay' => 'int',
        'onset_delay_in_hours' => 'int',
        'outcome' => 'bool',
        'png_path' => 'string',
        'png_url' => 'string',
        'public' => 'bool',
        'second_most_common_value' => 'double',
        'skewness' => 'double',
        'standard_deviation' => 'double',
        'svg_url' => 'string',
        'third_most_common_value' => 'double',
        'updated_at' => '\DateTime',
        'user_variable_unit_abbreviated_name' => 'string',
        'user_variable_unit_category_id' => 'int',
        'user_variable_unit_category_name' => 'string',
        'user_variable_unit_id' => 'int',
        'user_variable_unit_name' => 'string',
        'user_variable_variable_category_id' => 'int',
        'user_variable_variable_category_name' => 'string',
        'valence' => 'string',
        'variable_category_id' => 'int',
        'variable_category_image_url' => 'string',
        'variable_category_name' => 'string',
        'variable_name' => 'string',
        'variance' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available_units' => null,
        'category' => null,
        'cause_only' => null,
        'combination_operation' => null,
        'common_alias' => null,
        'created_at' => 'date-time',
        'unit_abbreviated_name' => null,
        'unit_category_id' => null,
        'unit_category_name' => null,
        'unit_id' => null,
        'unit_name' => null,
        'description' => null,
        'duration_of_action' => null,
        'duration_of_action_in_hours' => null,
        'id' => null,
        'input_type' => null,
        'ion_icon' => null,
        'kurtosis' => 'double',
        'manual_tracking' => null,
        'maximum_allowed_value' => null,
        'mean' => 'double',
        'median' => 'double',
        'minimum_allowed_value' => null,
        'most_common_connector_id' => null,
        'most_common_original_unit_id' => null,
        'most_common_value' => 'double',
        'name' => null,
        'number_of_aggregate_correlations_as_cause' => null,
        'number_of_aggregate_correlations_as_effect' => null,
        'number_of_measurements' => null,
        'number_of_raw_measurements' => null,
        'number_of_tracking_reminders' => null,
        'number_of_unique_values' => null,
        'number_of_user_variables' => null,
        'onset_delay' => null,
        'onset_delay_in_hours' => null,
        'outcome' => null,
        'png_path' => null,
        'png_url' => null,
        'public' => null,
        'second_most_common_value' => 'double',
        'skewness' => 'double',
        'standard_deviation' => 'double',
        'svg_url' => null,
        'third_most_common_value' => 'double',
        'updated_at' => 'date-time',
        'user_variable_unit_abbreviated_name' => null,
        'user_variable_unit_category_id' => null,
        'user_variable_unit_category_name' => null,
        'user_variable_unit_id' => null,
        'user_variable_unit_name' => null,
        'user_variable_variable_category_id' => null,
        'user_variable_variable_category_name' => null,
        'valence' => null,
        'variable_category_id' => null,
        'variable_category_image_url' => null,
        'variable_category_name' => null,
        'variable_name' => null,
        'variance' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'available_units' => 'availableUnits',
        'category' => 'category',
        'cause_only' => 'causeOnly',
        'combination_operation' => 'combinationOperation',
        'common_alias' => 'commonAlias',
        'created_at' => 'createdAt',
        'unit_abbreviated_name' => 'unitAbbreviatedName',
        'unit_category_id' => 'unitCategoryId',
        'unit_category_name' => 'unitCategoryName',
        'unit_id' => 'unitId',
        'unit_name' => 'unitName',
        'description' => 'description',
        'duration_of_action' => 'durationOfAction',
        'duration_of_action_in_hours' => 'durationOfActionInHours',
        'id' => 'id',
        'input_type' => 'inputType',
        'ion_icon' => 'ionIcon',
        'kurtosis' => 'kurtosis',
        'manual_tracking' => 'manualTracking',
        'maximum_allowed_value' => 'maximumAllowedValue',
        'mean' => 'mean',
        'median' => 'median',
        'minimum_allowed_value' => 'minimumAllowedValue',
        'most_common_connector_id' => 'mostCommonConnectorId',
        'most_common_original_unit_id' => 'mostCommonOriginalUnitId',
        'most_common_value' => 'mostCommonValue',
        'name' => 'name',
        'number_of_aggregate_correlations_as_cause' => 'numberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'numberOfAggregateCorrelationsAsEffect',
        'number_of_measurements' => 'numberOfMeasurements',
        'number_of_raw_measurements' => 'numberOfRawMeasurements',
        'number_of_tracking_reminders' => 'numberOfTrackingReminders',
        'number_of_unique_values' => 'numberOfUniqueValues',
        'number_of_user_variables' => 'numberOfUserVariables',
        'onset_delay' => 'onsetDelay',
        'onset_delay_in_hours' => 'onsetDelayInHours',
        'outcome' => 'outcome',
        'png_path' => 'pngPath',
        'png_url' => 'pngUrl',
        'public' => 'public',
        'second_most_common_value' => 'secondMostCommonValue',
        'skewness' => 'skewness',
        'standard_deviation' => 'standardDeviation',
        'svg_url' => 'svgUrl',
        'third_most_common_value' => 'thirdMostCommonValue',
        'updated_at' => 'updatedAt',
        'user_variable_unit_abbreviated_name' => 'userVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'userVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'userVariableUnitCategoryName',
        'user_variable_unit_id' => 'userVariableUnitId',
        'user_variable_unit_name' => 'userVariableUnitName',
        'user_variable_variable_category_id' => 'userVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'userVariableVariableCategoryName',
        'valence' => 'valence',
        'variable_category_id' => 'variableCategoryId',
        'variable_category_image_url' => 'variableCategoryImageUrl',
        'variable_category_name' => 'variableCategoryName',
        'variable_name' => 'variableName',
        'variance' => 'variance'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'available_units' => 'setAvailableUnits',
        'category' => 'setCategory',
        'cause_only' => 'setCauseOnly',
        'combination_operation' => 'setCombinationOperation',
        'common_alias' => 'setCommonAlias',
        'created_at' => 'setCreatedAt',
        'unit_abbreviated_name' => 'setUnitAbbreviatedName',
        'unit_category_id' => 'setUnitCategoryId',
        'unit_category_name' => 'setUnitCategoryName',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'description' => 'setDescription',
        'duration_of_action' => 'setDurationOfAction',
        'duration_of_action_in_hours' => 'setDurationOfActionInHours',
        'id' => 'setId',
        'input_type' => 'setInputType',
        'ion_icon' => 'setIonIcon',
        'kurtosis' => 'setKurtosis',
        'manual_tracking' => 'setManualTracking',
        'maximum_allowed_value' => 'setMaximumAllowedValue',
        'mean' => 'setMean',
        'median' => 'setMedian',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'most_common_connector_id' => 'setMostCommonConnectorId',
        'most_common_original_unit_id' => 'setMostCommonOriginalUnitId',
        'most_common_value' => 'setMostCommonValue',
        'name' => 'setName',
        'number_of_aggregate_correlations_as_cause' => 'setNumberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'setNumberOfAggregateCorrelationsAsEffect',
        'number_of_measurements' => 'setNumberOfMeasurements',
        'number_of_raw_measurements' => 'setNumberOfRawMeasurements',
        'number_of_tracking_reminders' => 'setNumberOfTrackingReminders',
        'number_of_unique_values' => 'setNumberOfUniqueValues',
        'number_of_user_variables' => 'setNumberOfUserVariables',
        'onset_delay' => 'setOnsetDelay',
        'onset_delay_in_hours' => 'setOnsetDelayInHours',
        'outcome' => 'setOutcome',
        'png_path' => 'setPngPath',
        'png_url' => 'setPngUrl',
        'public' => 'setPublic',
        'second_most_common_value' => 'setSecondMostCommonValue',
        'skewness' => 'setSkewness',
        'standard_deviation' => 'setStandardDeviation',
        'svg_url' => 'setSvgUrl',
        'third_most_common_value' => 'setThirdMostCommonValue',
        'updated_at' => 'setUpdatedAt',
        'user_variable_unit_abbreviated_name' => 'setUserVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'setUserVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'setUserVariableUnitCategoryName',
        'user_variable_unit_id' => 'setUserVariableUnitId',
        'user_variable_unit_name' => 'setUserVariableUnitName',
        'user_variable_variable_category_id' => 'setUserVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'setUserVariableVariableCategoryName',
        'valence' => 'setValence',
        'variable_category_id' => 'setVariableCategoryId',
        'variable_category_image_url' => 'setVariableCategoryImageUrl',
        'variable_category_name' => 'setVariableCategoryName',
        'variable_name' => 'setVariableName',
        'variance' => 'setVariance'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'available_units' => 'getAvailableUnits',
        'category' => 'getCategory',
        'cause_only' => 'getCauseOnly',
        'combination_operation' => 'getCombinationOperation',
        'common_alias' => 'getCommonAlias',
        'created_at' => 'getCreatedAt',
        'unit_abbreviated_name' => 'getUnitAbbreviatedName',
        'unit_category_id' => 'getUnitCategoryId',
        'unit_category_name' => 'getUnitCategoryName',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'description' => 'getDescription',
        'duration_of_action' => 'getDurationOfAction',
        'duration_of_action_in_hours' => 'getDurationOfActionInHours',
        'id' => 'getId',
        'input_type' => 'getInputType',
        'ion_icon' => 'getIonIcon',
        'kurtosis' => 'getKurtosis',
        'manual_tracking' => 'getManualTracking',
        'maximum_allowed_value' => 'getMaximumAllowedValue',
        'mean' => 'getMean',
        'median' => 'getMedian',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'most_common_connector_id' => 'getMostCommonConnectorId',
        'most_common_original_unit_id' => 'getMostCommonOriginalUnitId',
        'most_common_value' => 'getMostCommonValue',
        'name' => 'getName',
        'number_of_aggregate_correlations_as_cause' => 'getNumberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'getNumberOfAggregateCorrelationsAsEffect',
        'number_of_measurements' => 'getNumberOfMeasurements',
        'number_of_raw_measurements' => 'getNumberOfRawMeasurements',
        'number_of_tracking_reminders' => 'getNumberOfTrackingReminders',
        'number_of_unique_values' => 'getNumberOfUniqueValues',
        'number_of_user_variables' => 'getNumberOfUserVariables',
        'onset_delay' => 'getOnsetDelay',
        'onset_delay_in_hours' => 'getOnsetDelayInHours',
        'outcome' => 'getOutcome',
        'png_path' => 'getPngPath',
        'png_url' => 'getPngUrl',
        'public' => 'getPublic',
        'second_most_common_value' => 'getSecondMostCommonValue',
        'skewness' => 'getSkewness',
        'standard_deviation' => 'getStandardDeviation',
        'svg_url' => 'getSvgUrl',
        'third_most_common_value' => 'getThirdMostCommonValue',
        'updated_at' => 'getUpdatedAt',
        'user_variable_unit_abbreviated_name' => 'getUserVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'getUserVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'getUserVariableUnitCategoryName',
        'user_variable_unit_id' => 'getUserVariableUnitId',
        'user_variable_unit_name' => 'getUserVariableUnitName',
        'user_variable_variable_category_id' => 'getUserVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'getUserVariableVariableCategoryName',
        'valence' => 'getValence',
        'variable_category_id' => 'getVariableCategoryId',
        'variable_category_image_url' => 'getVariableCategoryImageUrl',
        'variable_category_name' => 'getVariableCategoryName',
        'variable_name' => 'getVariableName',
        'variance' => 'getVariance'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_units'] = isset($data['available_units']) ? $data['available_units'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['cause_only'] = isset($data['cause_only']) ? $data['cause_only'] : null;
        $this->container['combination_operation'] = isset($data['combination_operation']) ? $data['combination_operation'] : null;
        $this->container['common_alias'] = isset($data['common_alias']) ? $data['common_alias'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['unit_abbreviated_name'] = isset($data['unit_abbreviated_name']) ? $data['unit_abbreviated_name'] : null;
        $this->container['unit_category_id'] = isset($data['unit_category_id']) ? $data['unit_category_id'] : null;
        $this->container['unit_category_name'] = isset($data['unit_category_name']) ? $data['unit_category_name'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['duration_of_action'] = isset($data['duration_of_action']) ? $data['duration_of_action'] : null;
        $this->container['duration_of_action_in_hours'] = isset($data['duration_of_action_in_hours']) ? $data['duration_of_action_in_hours'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['input_type'] = isset($data['input_type']) ? $data['input_type'] : null;
        $this->container['ion_icon'] = isset($data['ion_icon']) ? $data['ion_icon'] : null;
        $this->container['kurtosis'] = isset($data['kurtosis']) ? $data['kurtosis'] : null;
        $this->container['manual_tracking'] = isset($data['manual_tracking']) ? $data['manual_tracking'] : null;
        $this->container['maximum_allowed_value'] = isset($data['maximum_allowed_value']) ? $data['maximum_allowed_value'] : null;
        $this->container['mean'] = isset($data['mean']) ? $data['mean'] : null;
        $this->container['median'] = isset($data['median']) ? $data['median'] : null;
        $this->container['minimum_allowed_value'] = isset($data['minimum_allowed_value']) ? $data['minimum_allowed_value'] : null;
        $this->container['most_common_connector_id'] = isset($data['most_common_connector_id']) ? $data['most_common_connector_id'] : null;
        $this->container['most_common_original_unit_id'] = isset($data['most_common_original_unit_id']) ? $data['most_common_original_unit_id'] : null;
        $this->container['most_common_value'] = isset($data['most_common_value']) ? $data['most_common_value'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_aggregate_correlations_as_cause'] = isset($data['number_of_aggregate_correlations_as_cause']) ? $data['number_of_aggregate_correlations_as_cause'] : null;
        $this->container['number_of_aggregate_correlations_as_effect'] = isset($data['number_of_aggregate_correlations_as_effect']) ? $data['number_of_aggregate_correlations_as_effect'] : null;
        $this->container['number_of_measurements'] = isset($data['number_of_measurements']) ? $data['number_of_measurements'] : null;
        $this->container['number_of_raw_measurements'] = isset($data['number_of_raw_measurements']) ? $data['number_of_raw_measurements'] : null;
        $this->container['number_of_tracking_reminders'] = isset($data['number_of_tracking_reminders']) ? $data['number_of_tracking_reminders'] : null;
        $this->container['number_of_unique_values'] = isset($data['number_of_unique_values']) ? $data['number_of_unique_values'] : null;
        $this->container['number_of_user_variables'] = isset($data['number_of_user_variables']) ? $data['number_of_user_variables'] : null;
        $this->container['onset_delay'] = isset($data['onset_delay']) ? $data['onset_delay'] : null;
        $this->container['onset_delay_in_hours'] = isset($data['onset_delay_in_hours']) ? $data['onset_delay_in_hours'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['png_path'] = isset($data['png_path']) ? $data['png_path'] : null;
        $this->container['png_url'] = isset($data['png_url']) ? $data['png_url'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['second_most_common_value'] = isset($data['second_most_common_value']) ? $data['second_most_common_value'] : null;
        $this->container['skewness'] = isset($data['skewness']) ? $data['skewness'] : null;
        $this->container['standard_deviation'] = isset($data['standard_deviation']) ? $data['standard_deviation'] : null;
        $this->container['svg_url'] = isset($data['svg_url']) ? $data['svg_url'] : null;
        $this->container['third_most_common_value'] = isset($data['third_most_common_value']) ? $data['third_most_common_value'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user_variable_unit_abbreviated_name'] = isset($data['user_variable_unit_abbreviated_name']) ? $data['user_variable_unit_abbreviated_name'] : null;
        $this->container['user_variable_unit_category_id'] = isset($data['user_variable_unit_category_id']) ? $data['user_variable_unit_category_id'] : null;
        $this->container['user_variable_unit_category_name'] = isset($data['user_variable_unit_category_name']) ? $data['user_variable_unit_category_name'] : null;
        $this->container['user_variable_unit_id'] = isset($data['user_variable_unit_id']) ? $data['user_variable_unit_id'] : null;
        $this->container['user_variable_unit_name'] = isset($data['user_variable_unit_name']) ? $data['user_variable_unit_name'] : null;
        $this->container['user_variable_variable_category_id'] = isset($data['user_variable_variable_category_id']) ? $data['user_variable_variable_category_id'] : null;
        $this->container['user_variable_variable_category_name'] = isset($data['user_variable_variable_category_name']) ? $data['user_variable_variable_category_name'] : null;
        $this->container['valence'] = isset($data['valence']) ? $data['valence'] : null;
        $this->container['variable_category_id'] = isset($data['variable_category_id']) ? $data['variable_category_id'] : null;
        $this->container['variable_category_image_url'] = isset($data['variable_category_image_url']) ? $data['variable_category_image_url'] : null;
        $this->container['variable_category_name'] = isset($data['variable_category_name']) ? $data['variable_category_name'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
        $this->container['variance'] = isset($data['variance']) ? $data['variance'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets available_units
     * @return \QuantiModo\Client\Model\Unit[]
     */
    public function getAvailableUnits()
    {
        return $this->container['available_units'];
    }

    /**
     * Sets available_units
     * @param \QuantiModo\Client\Model\Unit[] $available_units
     * @return $this
     */
    public function setAvailableUnits($available_units)
    {
        $this->container['available_units'] = $available_units;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category Example: Emotions
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets cause_only
     * @return bool
     */
    public function getCauseOnly()
    {
        return $this->container['cause_only'];
    }

    /**
     * Sets cause_only
     * @param bool $cause_only Example: false
     * @return $this
     */
    public function setCauseOnly($cause_only)
    {
        $this->container['cause_only'] = $cause_only;

        return $this;
    }

    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->container['combination_operation'];
    }

    /**
     * Sets combination_operation
     * @param string $combination_operation Example: MEAN
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $this->container['combination_operation'] = $combination_operation;

        return $this;
    }

    /**
     * Gets common_alias
     * @return string
     */
    public function getCommonAlias()
    {
        return $this->container['common_alias'];
    }

    /**
     * Sets common_alias
     * @param string $common_alias Example: Mood_(psychology)
     * @return $this
     */
    public function setCommonAlias($common_alias)
    {
        $this->container['common_alias'] = $common_alias;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Example: 2015-03-05 05:01:48
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets unit_abbreviated_name
     * @return string
     */
    public function getUnitAbbreviatedName()
    {
        return $this->container['unit_abbreviated_name'];
    }

    /**
     * Sets unit_abbreviated_name
     * @param string $unit_abbreviated_name Example: /5
     * @return $this
     */
    public function setUnitAbbreviatedName($unit_abbreviated_name)
    {
        $this->container['unit_abbreviated_name'] = $unit_abbreviated_name;

        return $this;
    }

    /**
     * Gets unit_category_id
     * @return int
     */
    public function getUnitCategoryId()
    {
        return $this->container['unit_category_id'];
    }

    /**
     * Sets unit_category_id
     * @param int $unit_category_id Example: 5
     * @return $this
     */
    public function setUnitCategoryId($unit_category_id)
    {
        $this->container['unit_category_id'] = $unit_category_id;

        return $this;
    }

    /**
     * Gets unit_category_name
     * @return string
     */
    public function getUnitCategoryName()
    {
        return $this->container['unit_category_name'];
    }

    /**
     * Sets unit_category_name
     * @param string $unit_category_name Example: Rating
     * @return $this
     */
    public function setUnitCategoryName($unit_category_name)
    {
        $this->container['unit_category_name'] = $unit_category_name;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id Example: 10
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     * @param string $unit_name Example: 1 to 5 Rating
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Example: positive
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->container['duration_of_action'];
    }

    /**
     * Sets duration_of_action
     * @param int $duration_of_action Example: 86400
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        $this->container['duration_of_action'] = $duration_of_action;

        return $this;
    }

    /**
     * Gets duration_of_action_in_hours
     * @return int
     */
    public function getDurationOfActionInHours()
    {
        return $this->container['duration_of_action_in_hours'];
    }

    /**
     * Sets duration_of_action_in_hours
     * @param int $duration_of_action_in_hours Example: 24
     * @return $this
     */
    public function setDurationOfActionInHours($duration_of_action_in_hours)
    {
        $this->container['duration_of_action_in_hours'] = $duration_of_action_in_hours;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Example: 1398
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets input_type
     * @return string
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     * @param string $input_type Example: happiestFaceIsFive
     * @return $this
     */
    public function setInputType($input_type)
    {
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets ion_icon
     * @return string
     */
    public function getIonIcon()
    {
        return $this->container['ion_icon'];
    }

    /**
     * Sets ion_icon
     * @param string $ion_icon Example: ion-happy-outline
     * @return $this
     */
    public function setIonIcon($ion_icon)
    {
        $this->container['ion_icon'] = $ion_icon;

        return $this;
    }

    /**
     * Gets kurtosis
     * @return double
     */
    public function getKurtosis()
    {
        return $this->container['kurtosis'];
    }

    /**
     * Sets kurtosis
     * @param double $kurtosis Example: 4.3527259032083
     * @return $this
     */
    public function setKurtosis($kurtosis)
    {
        $this->container['kurtosis'] = $kurtosis;

        return $this;
    }

    /**
     * Gets manual_tracking
     * @return bool
     */
    public function getManualTracking()
    {
        return $this->container['manual_tracking'];
    }

    /**
     * Sets manual_tracking
     * @param bool $manual_tracking Example: true
     * @return $this
     */
    public function setManualTracking($manual_tracking)
    {
        $this->container['manual_tracking'] = $manual_tracking;

        return $this;
    }

    /**
     * Gets maximum_allowed_value
     * @return int
     */
    public function getMaximumAllowedValue()
    {
        return $this->container['maximum_allowed_value'];
    }

    /**
     * Sets maximum_allowed_value
     * @param int $maximum_allowed_value Example: 5
     * @return $this
     */
    public function setMaximumAllowedValue($maximum_allowed_value)
    {
        $this->container['maximum_allowed_value'] = $maximum_allowed_value;

        return $this;
    }

    /**
     * Gets mean
     * @return double
     */
    public function getMean()
    {
        return $this->container['mean'];
    }

    /**
     * Sets mean
     * @param double $mean Example: 3.1359987410015
     * @return $this
     */
    public function setMean($mean)
    {
        $this->container['mean'] = $mean;

        return $this;
    }

    /**
     * Gets median
     * @return double
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     * @param double $median Example: 3.1295731659047
     * @return $this
     */
    public function setMedian($median)
    {
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets minimum_allowed_value
     * @return int
     */
    public function getMinimumAllowedValue()
    {
        return $this->container['minimum_allowed_value'];
    }

    /**
     * Sets minimum_allowed_value
     * @param int $minimum_allowed_value Example: 1
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        $this->container['minimum_allowed_value'] = $minimum_allowed_value;

        return $this;
    }

    /**
     * Gets most_common_connector_id
     * @return int
     */
    public function getMostCommonConnectorId()
    {
        return $this->container['most_common_connector_id'];
    }

    /**
     * Sets most_common_connector_id
     * @param int $most_common_connector_id Example: 10
     * @return $this
     */
    public function setMostCommonConnectorId($most_common_connector_id)
    {
        $this->container['most_common_connector_id'] = $most_common_connector_id;

        return $this;
    }

    /**
     * Gets most_common_original_unit_id
     * @return int
     */
    public function getMostCommonOriginalUnitId()
    {
        return $this->container['most_common_original_unit_id'];
    }

    /**
     * Sets most_common_original_unit_id
     * @param int $most_common_original_unit_id Example: 10
     * @return $this
     */
    public function setMostCommonOriginalUnitId($most_common_original_unit_id)
    {
        $this->container['most_common_original_unit_id'] = $most_common_original_unit_id;

        return $this;
    }

    /**
     * Gets most_common_value
     * @return double
     */
    public function getMostCommonValue()
    {
        return $this->container['most_common_value'];
    }

    /**
     * Sets most_common_value
     * @param double $most_common_value Example: 3
     * @return $this
     */
    public function setMostCommonValue($most_common_value)
    {
        $this->container['most_common_value'] = $most_common_value;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Example: Overall Mood
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_aggregate_correlations_as_cause
     * @return int
     */
    public function getNumberOfAggregateCorrelationsAsCause()
    {
        return $this->container['number_of_aggregate_correlations_as_cause'];
    }

    /**
     * Sets number_of_aggregate_correlations_as_cause
     * @param int $number_of_aggregate_correlations_as_cause Example: 329
     * @return $this
     */
    public function setNumberOfAggregateCorrelationsAsCause($number_of_aggregate_correlations_as_cause)
    {
        $this->container['number_of_aggregate_correlations_as_cause'] = $number_of_aggregate_correlations_as_cause;

        return $this;
    }

    /**
     * Gets number_of_aggregate_correlations_as_effect
     * @return int
     */
    public function getNumberOfAggregateCorrelationsAsEffect()
    {
        return $this->container['number_of_aggregate_correlations_as_effect'];
    }

    /**
     * Sets number_of_aggregate_correlations_as_effect
     * @param int $number_of_aggregate_correlations_as_effect Example: 890
     * @return $this
     */
    public function setNumberOfAggregateCorrelationsAsEffect($number_of_aggregate_correlations_as_effect)
    {
        $this->container['number_of_aggregate_correlations_as_effect'] = $number_of_aggregate_correlations_as_effect;

        return $this;
    }

    /**
     * Gets number_of_measurements
     * @return int
     */
    public function getNumberOfMeasurements()
    {
        return $this->container['number_of_measurements'];
    }

    /**
     * Sets number_of_measurements
     * @param int $number_of_measurements Example: 544298
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        $this->container['number_of_measurements'] = $number_of_measurements;

        return $this;
    }

    /**
     * Gets number_of_raw_measurements
     * @return int
     */
    public function getNumberOfRawMeasurements()
    {
        return $this->container['number_of_raw_measurements'];
    }

    /**
     * Sets number_of_raw_measurements
     * @param int $number_of_raw_measurements Example: 544298
     * @return $this
     */
    public function setNumberOfRawMeasurements($number_of_raw_measurements)
    {
        $this->container['number_of_raw_measurements'] = $number_of_raw_measurements;

        return $this;
    }

    /**
     * Gets number_of_tracking_reminders
     * @return int
     */
    public function getNumberOfTrackingReminders()
    {
        return $this->container['number_of_tracking_reminders'];
    }

    /**
     * Sets number_of_tracking_reminders
     * @param int $number_of_tracking_reminders Example: 102
     * @return $this
     */
    public function setNumberOfTrackingReminders($number_of_tracking_reminders)
    {
        $this->container['number_of_tracking_reminders'] = $number_of_tracking_reminders;

        return $this;
    }

    /**
     * Gets number_of_unique_values
     * @return int
     */
    public function getNumberOfUniqueValues()
    {
        return $this->container['number_of_unique_values'];
    }

    /**
     * Sets number_of_unique_values
     * @param int $number_of_unique_values Example: 7
     * @return $this
     */
    public function setNumberOfUniqueValues($number_of_unique_values)
    {
        $this->container['number_of_unique_values'] = $number_of_unique_values;

        return $this;
    }

    /**
     * Gets number_of_user_variables
     * @return int
     */
    public function getNumberOfUserVariables()
    {
        return $this->container['number_of_user_variables'];
    }

    /**
     * Sets number_of_user_variables
     * @param int $number_of_user_variables Example: 4003
     * @return $this
     */
    public function setNumberOfUserVariables($number_of_user_variables)
    {
        $this->container['number_of_user_variables'] = $number_of_user_variables;

        return $this;
    }

    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->container['onset_delay'];
    }

    /**
     * Sets onset_delay
     * @param int $onset_delay Example: 0
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        $this->container['onset_delay'] = $onset_delay;

        return $this;
    }

    /**
     * Gets onset_delay_in_hours
     * @return int
     */
    public function getOnsetDelayInHours()
    {
        return $this->container['onset_delay_in_hours'];
    }

    /**
     * Sets onset_delay_in_hours
     * @param int $onset_delay_in_hours Example: 0
     * @return $this
     */
    public function setOnsetDelayInHours($onset_delay_in_hours)
    {
        $this->container['onset_delay_in_hours'] = $onset_delay_in_hours;

        return $this;
    }

    /**
     * Gets outcome
     * @return bool
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     * @param bool $outcome Example: true
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets png_path
     * @return string
     */
    public function getPngPath()
    {
        return $this->container['png_path'];
    }

    /**
     * Sets png_path
     * @param string $png_path Example: img/variable_categories/emotions.png
     * @return $this
     */
    public function setPngPath($png_path)
    {
        $this->container['png_path'] = $png_path;

        return $this;
    }

    /**
     * Gets png_url
     * @return string
     */
    public function getPngUrl()
    {
        return $this->container['png_url'];
    }

    /**
     * Sets png_url
     * @param string $png_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/emotions.png
     * @return $this
     */
    public function setPngUrl($png_url)
    {
        $this->container['png_url'] = $png_url;

        return $this;
    }

    /**
     * Gets public
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     * @param bool $public Example: true
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets second_most_common_value
     * @return double
     */
    public function getSecondMostCommonValue()
    {
        return $this->container['second_most_common_value'];
    }

    /**
     * Sets second_most_common_value
     * @param double $second_most_common_value Example: 4
     * @return $this
     */
    public function setSecondMostCommonValue($second_most_common_value)
    {
        $this->container['second_most_common_value'] = $second_most_common_value;

        return $this;
    }

    /**
     * Gets skewness
     * @return double
     */
    public function getSkewness()
    {
        return $this->container['skewness'];
    }

    /**
     * Sets skewness
     * @param double $skewness Example: -0.23360852317166
     * @return $this
     */
    public function setSkewness($skewness)
    {
        $this->container['skewness'] = $skewness;

        return $this;
    }

    /**
     * Gets standard_deviation
     * @return double
     */
    public function getStandardDeviation()
    {
        return $this->container['standard_deviation'];
    }

    /**
     * Sets standard_deviation
     * @param double $standard_deviation Example: 0.7214901744899
     * @return $this
     */
    public function setStandardDeviation($standard_deviation)
    {
        $this->container['standard_deviation'] = $standard_deviation;

        return $this;
    }

    /**
     * Gets svg_url
     * @return string
     */
    public function getSvgUrl()
    {
        return $this->container['svg_url'];
    }

    /**
     * Sets svg_url
     * @param string $svg_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/emotions.svg
     * @return $this
     */
    public function setSvgUrl($svg_url)
    {
        $this->container['svg_url'] = $svg_url;

        return $this;
    }

    /**
     * Gets third_most_common_value
     * @return double
     */
    public function getThirdMostCommonValue()
    {
        return $this->container['third_most_common_value'];
    }

    /**
     * Sets third_most_common_value
     * @param double $third_most_common_value Example: 2
     * @return $this
     */
    public function setThirdMostCommonValue($third_most_common_value)
    {
        $this->container['third_most_common_value'] = $third_most_common_value;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at Example: 2017-07-31 19:55:38
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_variable_unit_abbreviated_name
     * @return string
     */
    public function getUserVariableUnitAbbreviatedName()
    {
        return $this->container['user_variable_unit_abbreviated_name'];
    }

    /**
     * Sets user_variable_unit_abbreviated_name
     * @param string $user_variable_unit_abbreviated_name Example: /5
     * @return $this
     */
    public function setUserVariableUnitAbbreviatedName($user_variable_unit_abbreviated_name)
    {
        $this->container['user_variable_unit_abbreviated_name'] = $user_variable_unit_abbreviated_name;

        return $this;
    }

    /**
     * Gets user_variable_unit_category_id
     * @return int
     */
    public function getUserVariableUnitCategoryId()
    {
        return $this->container['user_variable_unit_category_id'];
    }

    /**
     * Sets user_variable_unit_category_id
     * @param int $user_variable_unit_category_id Example: 5
     * @return $this
     */
    public function setUserVariableUnitCategoryId($user_variable_unit_category_id)
    {
        $this->container['user_variable_unit_category_id'] = $user_variable_unit_category_id;

        return $this;
    }

    /**
     * Gets user_variable_unit_category_name
     * @return string
     */
    public function getUserVariableUnitCategoryName()
    {
        return $this->container['user_variable_unit_category_name'];
    }

    /**
     * Sets user_variable_unit_category_name
     * @param string $user_variable_unit_category_name Example: Rating
     * @return $this
     */
    public function setUserVariableUnitCategoryName($user_variable_unit_category_name)
    {
        $this->container['user_variable_unit_category_name'] = $user_variable_unit_category_name;

        return $this;
    }

    /**
     * Gets user_variable_unit_id
     * @return int
     */
    public function getUserVariableUnitId()
    {
        return $this->container['user_variable_unit_id'];
    }

    /**
     * Sets user_variable_unit_id
     * @param int $user_variable_unit_id Example: 10
     * @return $this
     */
    public function setUserVariableUnitId($user_variable_unit_id)
    {
        $this->container['user_variable_unit_id'] = $user_variable_unit_id;

        return $this;
    }

    /**
     * Gets user_variable_unit_name
     * @return string
     */
    public function getUserVariableUnitName()
    {
        return $this->container['user_variable_unit_name'];
    }

    /**
     * Sets user_variable_unit_name
     * @param string $user_variable_unit_name Example: 1 to 5 Rating
     * @return $this
     */
    public function setUserVariableUnitName($user_variable_unit_name)
    {
        $this->container['user_variable_unit_name'] = $user_variable_unit_name;

        return $this;
    }

    /**
     * Gets user_variable_variable_category_id
     * @return int
     */
    public function getUserVariableVariableCategoryId()
    {
        return $this->container['user_variable_variable_category_id'];
    }

    /**
     * Sets user_variable_variable_category_id
     * @param int $user_variable_variable_category_id Example: 1
     * @return $this
     */
    public function setUserVariableVariableCategoryId($user_variable_variable_category_id)
    {
        $this->container['user_variable_variable_category_id'] = $user_variable_variable_category_id;

        return $this;
    }

    /**
     * Gets user_variable_variable_category_name
     * @return string
     */
    public function getUserVariableVariableCategoryName()
    {
        return $this->container['user_variable_variable_category_name'];
    }

    /**
     * Sets user_variable_variable_category_name
     * @param string $user_variable_variable_category_name Example: Emotions
     * @return $this
     */
    public function setUserVariableVariableCategoryName($user_variable_variable_category_name)
    {
        $this->container['user_variable_variable_category_name'] = $user_variable_variable_category_name;

        return $this;
    }

    /**
     * Gets valence
     * @return string
     */
    public function getValence()
    {
        return $this->container['valence'];
    }

    /**
     * Sets valence
     * @param string $valence Example: positive
     * @return $this
     */
    public function setValence($valence)
    {
        $this->container['valence'] = $valence;

        return $this;
    }

    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->container['variable_category_id'];
    }

    /**
     * Sets variable_category_id
     * @param int $variable_category_id Example: 1
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        $this->container['variable_category_id'] = $variable_category_id;

        return $this;
    }

    /**
     * Gets variable_category_image_url
     * @return string
     */
    public function getVariableCategoryImageUrl()
    {
        return $this->container['variable_category_image_url'];
    }

    /**
     * Sets variable_category_image_url
     * @param string $variable_category_image_url Example: https://maxcdn.icons8.com/Color/PNG/96/Cinema/theatre_mask-96.png
     * @return $this
     */
    public function setVariableCategoryImageUrl($variable_category_image_url)
    {
        $this->container['variable_category_image_url'] = $variable_category_image_url;

        return $this;
    }

    /**
     * Gets variable_category_name
     * @return string
     */
    public function getVariableCategoryName()
    {
        return $this->container['variable_category_name'];
    }

    /**
     * Sets variable_category_name
     * @param string $variable_category_name Example: Emotions
     * @return $this
     */
    public function setVariableCategoryName($variable_category_name)
    {
        $this->container['variable_category_name'] = $variable_category_name;

        return $this;
    }

    /**
     * Gets variable_name
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     * @param string $variable_name Example: Overall Mood
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variance
     * @return double
     */
    public function getVariance()
    {
        return $this->container['variance'];
    }

    /**
     * Sets variance
     * @param double $variance Example: 22.541085893948
     * @return $this
     */
    public function setVariance($variance)
    {
        $this->container['variance'] = $variance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


