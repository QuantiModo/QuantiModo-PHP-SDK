<?php
/**
 * Unit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Unit Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Unit implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'client_id' => 'string',
        'name' => 'string',
        'abbreviated_name' => 'string',
        'category_id' => 'int',
        'minimum_value' => 'float',
        'maximum_value' => 'float',
        'updated' => 'int',
        'default_unit_id' => 'int',
        'multiply' => 'float',
        'add' => 'float',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'client_id' => 'client_id',
        'name' => 'name',
        'abbreviated_name' => 'abbreviated_name',
        'category_id' => 'category_id',
        'minimum_value' => 'minimum_value',
        'maximum_value' => 'maximum_value',
        'updated' => 'updated',
        'default_unit_id' => 'default_unit_id',
        'multiply' => 'multiply',
        'add' => 'add',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'client_id' => 'setClientId',
        'name' => 'setName',
        'abbreviated_name' => 'setAbbreviatedName',
        'category_id' => 'setCategoryId',
        'minimum_value' => 'setMinimumValue',
        'maximum_value' => 'setMaximumValue',
        'updated' => 'setUpdated',
        'default_unit_id' => 'setDefaultUnitId',
        'multiply' => 'setMultiply',
        'add' => 'setAdd',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'client_id' => 'getClientId',
        'name' => 'getName',
        'abbreviated_name' => 'getAbbreviatedName',
        'category_id' => 'getCategoryId',
        'minimum_value' => 'getMinimumValue',
        'maximum_value' => 'getMaximumValue',
        'updated' => 'getUpdated',
        'default_unit_id' => 'getDefaultUnitId',
        'multiply' => 'getMultiply',
        'add' => 'getAdd',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    );
  
    
    /**
      * $id id
      * @var int
      */
    protected $id;
    
    /**
      * $client_id client_id
      * @var string
      */
    protected $client_id;
    
    /**
      * $name Unit name
      * @var string
      */
    protected $name;
    
    /**
      * $abbreviated_name Unit abbreviation
      * @var string
      */
    protected $abbreviated_name;
    
    /**
      * $category_id Unit category ID
      * @var int
      */
    protected $category_id;
    
    /**
      * $minimum_value Minimum value permitted for this unit
      * @var float
      */
    protected $minimum_value;
    
    /**
      * $maximum_value Maximum value permitted for this unit
      * @var float
      */
    protected $maximum_value;
    
    /**
      * $updated updated
      * @var int
      */
    protected $updated;
    
    /**
      * $default_unit_id ID of default unit for this units category
      * @var int
      */
    protected $default_unit_id;
    
    /**
      * $multiply Value multiplied to convert to default unit in this unit category
      * @var float
      */
    protected $multiply;
    
    /**
      * $add Value which should be added to convert to default unit
      * @var float
      */
    protected $add;
    
    /**
      * $created_at When the record was first created. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $updated_at;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->client_id = $data["client_id"];
            $this->name = $data["name"];
            $this->abbreviated_name = $data["abbreviated_name"];
            $this->category_id = $data["category_id"];
            $this->minimum_value = $data["minimum_value"];
            $this->maximum_value = $data["maximum_value"];
            $this->updated = $data["updated"];
            $this->default_unit_id = $data["default_unit_id"];
            $this->multiply = $data["multiply"];
            $this->add = $data["add"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }
  
    /**
     * Sets client_id
     * @param string $client_id client_id
     * @return $this
     */
    public function setClientId($client_id)
    {
        
        $this->client_id = $client_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Unit name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets abbreviated_name
     * @return string
     */
    public function getAbbreviatedName()
    {
        return $this->abbreviated_name;
    }
  
    /**
     * Sets abbreviated_name
     * @param string $abbreviated_name Unit abbreviation
     * @return $this
     */
    public function setAbbreviatedName($abbreviated_name)
    {
        
        $this->abbreviated_name = $abbreviated_name;
        return $this;
    }
    
    /**
     * Gets category_id
     * @return int
     */
    public function getCategoryId()
    {
        return $this->category_id;
    }
  
    /**
     * Sets category_id
     * @param int $category_id Unit category ID
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        
        $this->category_id = $category_id;
        return $this;
    }
    
    /**
     * Gets minimum_value
     * @return float
     */
    public function getMinimumValue()
    {
        return $this->minimum_value;
    }
  
    /**
     * Sets minimum_value
     * @param float $minimum_value Minimum value permitted for this unit
     * @return $this
     */
    public function setMinimumValue($minimum_value)
    {
        
        $this->minimum_value = $minimum_value;
        return $this;
    }
    
    /**
     * Gets maximum_value
     * @return float
     */
    public function getMaximumValue()
    {
        return $this->maximum_value;
    }
  
    /**
     * Sets maximum_value
     * @param float $maximum_value Maximum value permitted for this unit
     * @return $this
     */
    public function setMaximumValue($maximum_value)
    {
        
        $this->maximum_value = $maximum_value;
        return $this;
    }
    
    /**
     * Gets updated
     * @return int
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param int $updated updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Gets default_unit_id
     * @return int
     */
    public function getDefaultUnitId()
    {
        return $this->default_unit_id;
    }
  
    /**
     * Sets default_unit_id
     * @param int $default_unit_id ID of default unit for this units category
     * @return $this
     */
    public function setDefaultUnitId($default_unit_id)
    {
        
        $this->default_unit_id = $default_unit_id;
        return $this;
    }
    
    /**
     * Gets multiply
     * @return float
     */
    public function getMultiply()
    {
        return $this->multiply;
    }
  
    /**
     * Sets multiply
     * @param float $multiply Value multiplied to convert to default unit in this unit category
     * @return $this
     */
    public function setMultiply($multiply)
    {
        
        $this->multiply = $multiply;
        return $this;
    }
    
    /**
     * Gets add
     * @return float
     */
    public function getAdd()
    {
        return $this->add;
    }
  
    /**
     * Sets add
     * @param float $add Value which should be added to convert to default unit
     * @return $this
     */
    public function setAdd($add)
    {
        
        $this->add = $add;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at When the record was first created. Use ISO 8601 datetime format
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
