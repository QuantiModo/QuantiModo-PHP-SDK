<?php
/**
 * Correlation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Correlation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Correlation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'timestamp' => 'int',
        'user_id' => 'int',
        'correlation' => 'float',
        'cause_id' => 'int',
        'effect_id' => 'int',
        'onset_delay' => 'int',
        'duration_of_action' => 'int',
        'number_of_pairs' => 'int',
        'value_predicting_high_outcome' => 'float',
        'value_predicting_low_outcome' => 'float',
        'optimal_pearson_product' => 'float',
        'vote' => 'float',
        'statistical_significance' => 'float',
        'cause_unit' => 'string',
        'cause_unit_id' => 'int',
        'cause_changes' => 'int',
        'effect_changes' => 'int',
        'qm_score' => 'float',
        'error' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'reverse_pearson_correlation_coefficient' => 'float',
        'predictive_pearson_correlation_coefficient' => 'float'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'timestamp' => 'timestamp',
        'user_id' => 'user_id',
        'correlation' => 'correlation',
        'cause_id' => 'cause_id',
        'effect_id' => 'effect_id',
        'onset_delay' => 'onset_delay',
        'duration_of_action' => 'duration_of_action',
        'number_of_pairs' => 'number_of_pairs',
        'value_predicting_high_outcome' => 'value_predicting_high_outcome',
        'value_predicting_low_outcome' => 'value_predicting_low_outcome',
        'optimal_pearson_product' => 'optimal_pearson_product',
        'vote' => 'vote',
        'statistical_significance' => 'statistical_significance',
        'cause_unit' => 'cause_unit',
        'cause_unit_id' => 'cause_unit_id',
        'cause_changes' => 'cause_changes',
        'effect_changes' => 'effect_changes',
        'qm_score' => 'qm_score',
        'error' => 'error',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'reverse_pearson_correlation_coefficient' => 'reverse_pearson_correlation_coefficient',
        'predictive_pearson_correlation_coefficient' => 'predictive_pearson_correlation_coefficient'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'timestamp' => 'setTimestamp',
        'user_id' => 'setUserId',
        'correlation' => 'setCorrelation',
        'cause_id' => 'setCauseId',
        'effect_id' => 'setEffectId',
        'onset_delay' => 'setOnsetDelay',
        'duration_of_action' => 'setDurationOfAction',
        'number_of_pairs' => 'setNumberOfPairs',
        'value_predicting_high_outcome' => 'setValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'setValuePredictingLowOutcome',
        'optimal_pearson_product' => 'setOptimalPearsonProduct',
        'vote' => 'setVote',
        'statistical_significance' => 'setStatisticalSignificance',
        'cause_unit' => 'setCauseUnit',
        'cause_unit_id' => 'setCauseUnitId',
        'cause_changes' => 'setCauseChanges',
        'effect_changes' => 'setEffectChanges',
        'qm_score' => 'setQmScore',
        'error' => 'setError',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'reverse_pearson_correlation_coefficient' => 'setReversePearsonCorrelationCoefficient',
        'predictive_pearson_correlation_coefficient' => 'setPredictivePearsonCorrelationCoefficient'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'timestamp' => 'getTimestamp',
        'user_id' => 'getUserId',
        'correlation' => 'getCorrelation',
        'cause_id' => 'getCauseId',
        'effect_id' => 'getEffectId',
        'onset_delay' => 'getOnsetDelay',
        'duration_of_action' => 'getDurationOfAction',
        'number_of_pairs' => 'getNumberOfPairs',
        'value_predicting_high_outcome' => 'getValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'getValuePredictingLowOutcome',
        'optimal_pearson_product' => 'getOptimalPearsonProduct',
        'vote' => 'getVote',
        'statistical_significance' => 'getStatisticalSignificance',
        'cause_unit' => 'getCauseUnit',
        'cause_unit_id' => 'getCauseUnitId',
        'cause_changes' => 'getCauseChanges',
        'effect_changes' => 'getEffectChanges',
        'qm_score' => 'getQmScore',
        'error' => 'getError',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'reverse_pearson_correlation_coefficient' => 'getReversePearsonCorrelationCoefficient',
        'predictive_pearson_correlation_coefficient' => 'getPredictivePearsonCorrelationCoefficient'
    );
  
    
    /**
      * $id id
      * @var int
      */
    protected $id;
    
    /**
      * $timestamp Time at which correlation was calculated
      * @var int
      */
    protected $timestamp;
    
    /**
      * $user_id ID of user that owns this correlation
      * @var int
      */
    protected $user_id;
    
    /**
      * $correlation Pearson correlation coefficient between cause and effect measurements
      * @var float
      */
    protected $correlation;
    
    /**
      * $cause_id variable ID of the cause variable for which the user desires correlations
      * @var int
      */
    protected $cause_id;
    
    /**
      * $effect_id variable ID of the effect variable for which the user desires correlations
      * @var int
      */
    protected $effect_id;
    
    /**
      * $onset_delay User estimated or default time after cause measurement before a perceivable effect is observed
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $duration_of_action Time over which the cause is expected to produce a perceivable effect following the onset delay
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $number_of_pairs Number of points that went into the correlation calculation
      * @var int
      */
    protected $number_of_pairs;
    
    /**
      * $value_predicting_high_outcome cause value that predicts an above average effect value (in default unit for cause variable)
      * @var float
      */
    protected $value_predicting_high_outcome;
    
    /**
      * $value_predicting_low_outcome cause value that predicts a below average effect value (in default unit for cause variable)
      * @var float
      */
    protected $value_predicting_low_outcome;
    
    /**
      * $optimal_pearson_product Optimal Pearson Product
      * @var float
      */
    protected $optimal_pearson_product;
    
    /**
      * $vote Vote
      * @var float
      */
    protected $vote;
    
    /**
      * $statistical_significance A function of the effect size and sample size
      * @var float
      */
    protected $statistical_significance;
    
    /**
      * $cause_unit Unit of the predictor variable
      * @var string
      */
    protected $cause_unit;
    
    /**
      * $cause_unit_id Unit ID of the predictor variable
      * @var int
      */
    protected $cause_unit_id;
    
    /**
      * $cause_changes Cause changes
      * @var int
      */
    protected $cause_changes;
    
    /**
      * $effect_changes Effect changes
      * @var int
      */
    protected $effect_changes;
    
    /**
      * $qm_score QM Score
      * @var float
      */
    protected $qm_score;
    
    /**
      * $error error
      * @var string
      */
    protected $error;
    
    /**
      * $created_at When the record was first created. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $updated_at;
    
    /**
      * $reverse_pearson_correlation_coefficient Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation
      * @var float
      */
    protected $reverse_pearson_correlation_coefficient;
    
    /**
      * $predictive_pearson_correlation_coefficient Predictive Pearson Correlation Coefficient
      * @var float
      */
    protected $predictive_pearson_correlation_coefficient;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->timestamp = $data["timestamp"];
            $this->user_id = $data["user_id"];
            $this->correlation = $data["correlation"];
            $this->cause_id = $data["cause_id"];
            $this->effect_id = $data["effect_id"];
            $this->onset_delay = $data["onset_delay"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->number_of_pairs = $data["number_of_pairs"];
            $this->value_predicting_high_outcome = $data["value_predicting_high_outcome"];
            $this->value_predicting_low_outcome = $data["value_predicting_low_outcome"];
            $this->optimal_pearson_product = $data["optimal_pearson_product"];
            $this->vote = $data["vote"];
            $this->statistical_significance = $data["statistical_significance"];
            $this->cause_unit = $data["cause_unit"];
            $this->cause_unit_id = $data["cause_unit_id"];
            $this->cause_changes = $data["cause_changes"];
            $this->effect_changes = $data["effect_changes"];
            $this->qm_score = $data["qm_score"];
            $this->error = $data["error"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
            $this->reverse_pearson_correlation_coefficient = $data["reverse_pearson_correlation_coefficient"];
            $this->predictive_pearson_correlation_coefficient = $data["predictive_pearson_correlation_coefficient"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param int $timestamp Time at which correlation was calculated
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param int $user_id ID of user that owns this correlation
     * @return $this
     */
    public function setUserId($user_id)
    {
        
        $this->user_id = $user_id;
        return $this;
    }
    
    /**
     * Gets correlation
     * @return float
     */
    public function getCorrelation()
    {
        return $this->correlation;
    }
  
    /**
     * Sets correlation
     * @param float $correlation Pearson correlation coefficient between cause and effect measurements
     * @return $this
     */
    public function setCorrelation($correlation)
    {
        
        $this->correlation = $correlation;
        return $this;
    }
    
    /**
     * Gets cause_id
     * @return int
     */
    public function getCauseId()
    {
        return $this->cause_id;
    }
  
    /**
     * Sets cause_id
     * @param int $cause_id variable ID of the cause variable for which the user desires correlations
     * @return $this
     */
    public function setCauseId($cause_id)
    {
        
        $this->cause_id = $cause_id;
        return $this;
    }
    
    /**
     * Gets effect_id
     * @return int
     */
    public function getEffectId()
    {
        return $this->effect_id;
    }
  
    /**
     * Sets effect_id
     * @param int $effect_id variable ID of the effect variable for which the user desires correlations
     * @return $this
     */
    public function setEffectId($effect_id)
    {
        
        $this->effect_id = $effect_id;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay User estimated or default time after cause measurement before a perceivable effect is observed
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action Time over which the cause is expected to produce a perceivable effect following the onset delay
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets number_of_pairs
     * @return int
     */
    public function getNumberOfPairs()
    {
        return $this->number_of_pairs;
    }
  
    /**
     * Sets number_of_pairs
     * @param int $number_of_pairs Number of points that went into the correlation calculation
     * @return $this
     */
    public function setNumberOfPairs($number_of_pairs)
    {
        
        $this->number_of_pairs = $number_of_pairs;
        return $this;
    }
    
    /**
     * Gets value_predicting_high_outcome
     * @return float
     */
    public function getValuePredictingHighOutcome()
    {
        return $this->value_predicting_high_outcome;
    }
  
    /**
     * Sets value_predicting_high_outcome
     * @param float $value_predicting_high_outcome cause value that predicts an above average effect value (in default unit for cause variable)
     * @return $this
     */
    public function setValuePredictingHighOutcome($value_predicting_high_outcome)
    {
        
        $this->value_predicting_high_outcome = $value_predicting_high_outcome;
        return $this;
    }
    
    /**
     * Gets value_predicting_low_outcome
     * @return float
     */
    public function getValuePredictingLowOutcome()
    {
        return $this->value_predicting_low_outcome;
    }
  
    /**
     * Sets value_predicting_low_outcome
     * @param float $value_predicting_low_outcome cause value that predicts a below average effect value (in default unit for cause variable)
     * @return $this
     */
    public function setValuePredictingLowOutcome($value_predicting_low_outcome)
    {
        
        $this->value_predicting_low_outcome = $value_predicting_low_outcome;
        return $this;
    }
    
    /**
     * Gets optimal_pearson_product
     * @return float
     */
    public function getOptimalPearsonProduct()
    {
        return $this->optimal_pearson_product;
    }
  
    /**
     * Sets optimal_pearson_product
     * @param float $optimal_pearson_product Optimal Pearson Product
     * @return $this
     */
    public function setOptimalPearsonProduct($optimal_pearson_product)
    {
        
        $this->optimal_pearson_product = $optimal_pearson_product;
        return $this;
    }
    
    /**
     * Gets vote
     * @return float
     */
    public function getVote()
    {
        return $this->vote;
    }
  
    /**
     * Sets vote
     * @param float $vote Vote
     * @return $this
     */
    public function setVote($vote)
    {
        
        $this->vote = $vote;
        return $this;
    }
    
    /**
     * Gets statistical_significance
     * @return float
     */
    public function getStatisticalSignificance()
    {
        return $this->statistical_significance;
    }
  
    /**
     * Sets statistical_significance
     * @param float $statistical_significance A function of the effect size and sample size
     * @return $this
     */
    public function setStatisticalSignificance($statistical_significance)
    {
        
        $this->statistical_significance = $statistical_significance;
        return $this;
    }
    
    /**
     * Gets cause_unit
     * @return string
     */
    public function getCauseUnit()
    {
        return $this->cause_unit;
    }
  
    /**
     * Sets cause_unit
     * @param string $cause_unit Unit of the predictor variable
     * @return $this
     */
    public function setCauseUnit($cause_unit)
    {
        
        $this->cause_unit = $cause_unit;
        return $this;
    }
    
    /**
     * Gets cause_unit_id
     * @return int
     */
    public function getCauseUnitId()
    {
        return $this->cause_unit_id;
    }
  
    /**
     * Sets cause_unit_id
     * @param int $cause_unit_id Unit ID of the predictor variable
     * @return $this
     */
    public function setCauseUnitId($cause_unit_id)
    {
        
        $this->cause_unit_id = $cause_unit_id;
        return $this;
    }
    
    /**
     * Gets cause_changes
     * @return int
     */
    public function getCauseChanges()
    {
        return $this->cause_changes;
    }
  
    /**
     * Sets cause_changes
     * @param int $cause_changes Cause changes
     * @return $this
     */
    public function setCauseChanges($cause_changes)
    {
        
        $this->cause_changes = $cause_changes;
        return $this;
    }
    
    /**
     * Gets effect_changes
     * @return int
     */
    public function getEffectChanges()
    {
        return $this->effect_changes;
    }
  
    /**
     * Sets effect_changes
     * @param int $effect_changes Effect changes
     * @return $this
     */
    public function setEffectChanges($effect_changes)
    {
        
        $this->effect_changes = $effect_changes;
        return $this;
    }
    
    /**
     * Gets qm_score
     * @return float
     */
    public function getQmScore()
    {
        return $this->qm_score;
    }
  
    /**
     * Sets qm_score
     * @param float $qm_score QM Score
     * @return $this
     */
    public function setQmScore($qm_score)
    {
        
        $this->qm_score = $qm_score;
        return $this;
    }
    
    /**
     * Gets error
     * @return string
     */
    public function getError()
    {
        return $this->error;
    }
  
    /**
     * Sets error
     * @param string $error error
     * @return $this
     */
    public function setError($error)
    {
        
        $this->error = $error;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at When the record was first created. Use ISO 8601 datetime format
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Gets reverse_pearson_correlation_coefficient
     * @return float
     */
    public function getReversePearsonCorrelationCoefficient()
    {
        return $this->reverse_pearson_correlation_coefficient;
    }
  
    /**
     * Sets reverse_pearson_correlation_coefficient
     * @param float $reverse_pearson_correlation_coefficient Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation
     * @return $this
     */
    public function setReversePearsonCorrelationCoefficient($reverse_pearson_correlation_coefficient)
    {
        
        $this->reverse_pearson_correlation_coefficient = $reverse_pearson_correlation_coefficient;
        return $this;
    }
    
    /**
     * Gets predictive_pearson_correlation_coefficient
     * @return float
     */
    public function getPredictivePearsonCorrelationCoefficient()
    {
        return $this->predictive_pearson_correlation_coefficient;
    }
  
    /**
     * Sets predictive_pearson_correlation_coefficient
     * @param float $predictive_pearson_correlation_coefficient Predictive Pearson Correlation Coefficient
     * @return $this
     */
    public function setPredictivePearsonCorrelationCoefficient($predictive_pearson_correlation_coefficient)
    {
        
        $this->predictive_pearson_correlation_coefficient = $predictive_pearson_correlation_coefficient;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
