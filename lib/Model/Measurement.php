<?php
/**
 * Measurement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Measurement Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Measurement implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'variable' => 'string',
        'source' => 'string',
        'timestamp' => 'int',
        'start_time' => 'string',
        'human_time' => '\Swagger\Client\Model\HumanTime',
        'value' => 'double',
        'unit' => 'string',
        'original_value' => 'int',
        'stored_value' => 'double',
        'stored_abbreviated_unit_name' => 'string',
        'original_abbreviated_unit_name' => 'string',
        'abbreviated_unit_name' => 'string',
        'note' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'variable' => 'variable',
        'source' => 'source',
        'timestamp' => 'timestamp',
        'start_time' => 'startTime',
        'human_time' => 'humanTime',
        'value' => 'value',
        'unit' => 'unit',
        'original_value' => 'originalValue',
        'stored_value' => 'storedValue',
        'stored_abbreviated_unit_name' => 'storedAbbreviatedUnitName',
        'original_abbreviated_unit_name' => 'originalAbbreviatedUnitName',
        'abbreviated_unit_name' => 'abbreviatedUnitName',
        'note' => 'note'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'variable' => 'setVariable',
        'source' => 'setSource',
        'timestamp' => 'setTimestamp',
        'start_time' => 'setStartTime',
        'human_time' => 'setHumanTime',
        'value' => 'setValue',
        'unit' => 'setUnit',
        'original_value' => 'setOriginalValue',
        'stored_value' => 'setStoredValue',
        'stored_abbreviated_unit_name' => 'setStoredAbbreviatedUnitName',
        'original_abbreviated_unit_name' => 'setOriginalAbbreviatedUnitName',
        'abbreviated_unit_name' => 'setAbbreviatedUnitName',
        'note' => 'setNote'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'variable' => 'getVariable',
        'source' => 'getSource',
        'timestamp' => 'getTimestamp',
        'start_time' => 'getStartTime',
        'human_time' => 'getHumanTime',
        'value' => 'getValue',
        'unit' => 'getUnit',
        'original_value' => 'getOriginalValue',
        'stored_value' => 'getStoredValue',
        'stored_abbreviated_unit_name' => 'getStoredAbbreviatedUnitName',
        'original_abbreviated_unit_name' => 'getOriginalAbbreviatedUnitName',
        'abbreviated_unit_name' => 'getAbbreviatedUnitName',
        'note' => 'getNote'
    );
  
    
    /**
      * $variable ORIGINAL Name of the variable for which we are creating the measurement records
      * @var string
      */
    protected $variable;
    
    /**
      * $source Application or device used to record the measurement values
      * @var string
      */
    protected $source;
    
    /**
      * $timestamp Timestamp for the measurement event in epoch time
      * @var int
      */
    protected $timestamp;
    
    /**
      * $start_time Start Time for the measurement event in ISO 8601
      * @var string
      */
    protected $start_time;
    
    /**
      * $human_time Start Time for the measurement event in ISO 8601
      * @var \Swagger\Client\Model\HumanTime
      */
    protected $human_time;
    
    /**
      * $value Converted measurement value in requested unit
      * @var double
      */
    protected $value;
    
    /**
      * $unit Unit of measurement as requested in GET request
      * @var string
      */
    protected $unit;
    
    /**
      * $original_value Original value
      * @var int
      */
    protected $original_value;
    
    /**
      * $stored_value Measurement value in the unit as orignally submitted
      * @var double
      */
    protected $stored_value;
    
    /**
      * $stored_abbreviated_unit_name Unit of measurement as originally submitted
      * @var string
      */
    protected $stored_abbreviated_unit_name;
    
    /**
      * $original_abbreviated_unit_name Original Unit of measurement as originally submitted
      * @var string
      */
    protected $original_abbreviated_unit_name;
    
    /**
      * $abbreviated_unit_name Unit of measurement as originally submitted
      * @var string
      */
    protected $abbreviated_unit_name;
    
    /**
      * $note Note of measurement
      * @var string
      */
    protected $note;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->variable = $data["variable"];
            $this->source = $data["source"];
            $this->timestamp = $data["timestamp"];
            $this->start_time = $data["start_time"];
            $this->human_time = $data["human_time"];
            $this->value = $data["value"];
            $this->unit = $data["unit"];
            $this->original_value = $data["original_value"];
            $this->stored_value = $data["stored_value"];
            $this->stored_abbreviated_unit_name = $data["stored_abbreviated_unit_name"];
            $this->original_abbreviated_unit_name = $data["original_abbreviated_unit_name"];
            $this->abbreviated_unit_name = $data["abbreviated_unit_name"];
            $this->note = $data["note"];
        }
    }
    
    /**
     * Gets variable
     * @return string
     */
    public function getVariable()
    {
        return $this->variable;
    }
  
    /**
     * Sets variable
     * @param string $variable ORIGINAL Name of the variable for which we are creating the measurement records
     * @return $this
     */
    public function setVariable($variable)
    {
        
        $this->variable = $variable;
        return $this;
    }
    
    /**
     * Gets source
     * @return string
     */
    public function getSource()
    {
        return $this->source;
    }
  
    /**
     * Sets source
     * @param string $source Application or device used to record the measurement values
     * @return $this
     */
    public function setSource($source)
    {
        
        $this->source = $source;
        return $this;
    }
    
    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param int $timestamp Timestamp for the measurement event in epoch time
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets start_time
     * @return string
     */
    public function getStartTime()
    {
        return $this->start_time;
    }
  
    /**
     * Sets start_time
     * @param string $start_time Start Time for the measurement event in ISO 8601
     * @return $this
     */
    public function setStartTime($start_time)
    {
        
        $this->start_time = $start_time;
        return $this;
    }
    
    /**
     * Gets human_time
     * @return \Swagger\Client\Model\HumanTime
     */
    public function getHumanTime()
    {
        return $this->human_time;
    }
  
    /**
     * Sets human_time
     * @param \Swagger\Client\Model\HumanTime $human_time Start Time for the measurement event in ISO 8601
     * @return $this
     */
    public function setHumanTime($human_time)
    {
        
        $this->human_time = $human_time;
        return $this;
    }
    
    /**
     * Gets value
     * @return double
     */
    public function getValue()
    {
        return $this->value;
    }
  
    /**
     * Sets value
     * @param double $value Converted measurement value in requested unit
     * @return $this
     */
    public function setValue($value)
    {
        
        $this->value = $value;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit Unit of measurement as requested in GET request
     * @return $this
     */
    public function setUnit($unit)
    {
        
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Gets original_value
     * @return int
     */
    public function getOriginalValue()
    {
        return $this->original_value;
    }
  
    /**
     * Sets original_value
     * @param int $original_value Original value
     * @return $this
     */
    public function setOriginalValue($original_value)
    {
        
        $this->original_value = $original_value;
        return $this;
    }
    
    /**
     * Gets stored_value
     * @return double
     */
    public function getStoredValue()
    {
        return $this->stored_value;
    }
  
    /**
     * Sets stored_value
     * @param double $stored_value Measurement value in the unit as orignally submitted
     * @return $this
     */
    public function setStoredValue($stored_value)
    {
        
        $this->stored_value = $stored_value;
        return $this;
    }
    
    /**
     * Gets stored_abbreviated_unit_name
     * @return string
     */
    public function getStoredAbbreviatedUnitName()
    {
        return $this->stored_abbreviated_unit_name;
    }
  
    /**
     * Sets stored_abbreviated_unit_name
     * @param string $stored_abbreviated_unit_name Unit of measurement as originally submitted
     * @return $this
     */
    public function setStoredAbbreviatedUnitName($stored_abbreviated_unit_name)
    {
        
        $this->stored_abbreviated_unit_name = $stored_abbreviated_unit_name;
        return $this;
    }
    
    /**
     * Gets original_abbreviated_unit_name
     * @return string
     */
    public function getOriginalAbbreviatedUnitName()
    {
        return $this->original_abbreviated_unit_name;
    }
  
    /**
     * Sets original_abbreviated_unit_name
     * @param string $original_abbreviated_unit_name Original Unit of measurement as originally submitted
     * @return $this
     */
    public function setOriginalAbbreviatedUnitName($original_abbreviated_unit_name)
    {
        
        $this->original_abbreviated_unit_name = $original_abbreviated_unit_name;
        return $this;
    }
    
    /**
     * Gets abbreviated_unit_name
     * @return string
     */
    public function getAbbreviatedUnitName()
    {
        return $this->abbreviated_unit_name;
    }
  
    /**
     * Sets abbreviated_unit_name
     * @param string $abbreviated_unit_name Unit of measurement as originally submitted
     * @return $this
     */
    public function setAbbreviatedUnitName($abbreviated_unit_name)
    {
        
        $this->abbreviated_unit_name = $abbreviated_unit_name;
        return $this;
    }
    
    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }
  
    /**
     * Sets note
     * @param string $note Note of measurement
     * @return $this
     */
    public function setNote($note)
    {
        
        $this->note = $note;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
