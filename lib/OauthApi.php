<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class OauthApi {

  function __construct($apiClient = null) {
    if (null === $apiClient) {
      if (Configuration::$apiClient === null) {
        Configuration::$apiClient = new ApiClient(); // create a new API client if not present
        $this->apiClient = Configuration::$apiClient;
      }
      else
        $this->apiClient = Configuration::$apiClient; // use the default one
    } else {
      $this->apiClient = $apiClient; // use the one provided by the user
    }
  }

  private $apiClient; // instance of the ApiClient

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * oauth2AccesstokenGet
   *
   * Access Token
   *
   * @param string $client_id Client id (required)
   * @param string $client_secret Client secret (required)
   * @param string $grant_type Grant Type can be &#39;authorization_code&#39; or &#39;refresh_token&#39; (required)
   * @param string $response_type Response type (required)
   * @param string $scope Scope (required)
   * @param string $redirect_uri Redirect uri (required)
   * @param string $state State (required)
   * @param string $realm Realm (required)
   * @return void
   */
   public function oauth2AccesstokenGet($client_id, $client_secret, $grant_type, $response_type, $scope, $redirect_uri, $state, $realm) {
      
      // verify the required parameter 'client_id' is set
      if ($client_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $client_id when calling oauth2AccesstokenGet');
      }
      
      // verify the required parameter 'client_secret' is set
      if ($client_secret === null) {
        throw new \InvalidArgumentException('Missing the required parameter $client_secret when calling oauth2AccesstokenGet');
      }
      
      // verify the required parameter 'grant_type' is set
      if ($grant_type === null) {
        throw new \InvalidArgumentException('Missing the required parameter $grant_type when calling oauth2AccesstokenGet');
      }
      

      // parse inputs
      $resourcePath = "/oauth2/accesstoken";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($client_id !== null) {
        $queryParams['client_id'] = $this->apiClient->toQueryValue($client_id);
      }// query params
      if($client_secret !== null) {
        $queryParams['client_secret'] = $this->apiClient->toQueryValue($client_secret);
      }// query params
      if($grant_type !== null) {
        $queryParams['grant_type'] = $this->apiClient->toQueryValue($grant_type);
      }// query params
      if($response_type !== null) {
        $queryParams['response_type'] = $this->apiClient->toQueryValue($response_type);
      }// query params
      if($scope !== null) {
        $queryParams['scope'] = $this->apiClient->toQueryValue($scope);
      }// query params
      if($redirect_uri !== null) {
        $queryParams['redirect_uri'] = $this->apiClient->toQueryValue($redirect_uri);
      }// query params
      if($state !== null) {
        $queryParams['state'] = $this->apiClient->toQueryValue($state);
      }// query params
      if($realm !== null) {
        $queryParams['realm'] = $this->apiClient->toQueryValue($realm);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * oauth2AuthorizeGet
   *
   * Authorize
   *
   * @param string $client_id This is the unique ID that QuantiModo uses to identify your application. Obtain a client id by emailing info@quantimo.do. (required)
   * @param string $client_secret This is the secret for your obtained clietn_id. QuantiModo uses this to validate that only your application uses the client_id. (required)
   * @param string $response_type If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment. (required)
   * @param string $scope Scopes include basic, readmeasurements, and writemeasurements. The \&quot;basic\&quot; scope allows you to read user info (displayname, email, etc). The \&quot;readmeasurements\&quot; scope allows one to read a user&#39;s data. The \&quot;writemeasurements\&quot; scope allows you to write user data. Separate multiple scopes by a space. (required)
   * @param string $redirect_uri The redirect URI is the URL within your client application that will receive the OAuth2 credentials. (required)
   * @param string $state An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI (required)
   * @param string $realm Name of the realm representing the users of your distributed applications and services. A \&quot;realm\&quot; attribute MAY be included to indicate the scope of protection. (required)
   * @return void
   */
   public function oauth2AuthorizeGet($client_id, $client_secret, $response_type, $scope, $redirect_uri, $state, $realm) {
      
      // verify the required parameter 'client_id' is set
      if ($client_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $client_id when calling oauth2AuthorizeGet');
      }
      
      // verify the required parameter 'client_secret' is set
      if ($client_secret === null) {
        throw new \InvalidArgumentException('Missing the required parameter $client_secret when calling oauth2AuthorizeGet');
      }
      
      // verify the required parameter 'response_type' is set
      if ($response_type === null) {
        throw new \InvalidArgumentException('Missing the required parameter $response_type when calling oauth2AuthorizeGet');
      }
      
      // verify the required parameter 'scope' is set
      if ($scope === null) {
        throw new \InvalidArgumentException('Missing the required parameter $scope when calling oauth2AuthorizeGet');
      }
      

      // parse inputs
      $resourcePath = "/oauth2/authorize";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($client_id !== null) {
        $queryParams['client_id'] = $this->apiClient->toQueryValue($client_id);
      }// query params
      if($client_secret !== null) {
        $queryParams['client_secret'] = $this->apiClient->toQueryValue($client_secret);
      }// query params
      if($response_type !== null) {
        $queryParams['response_type'] = $this->apiClient->toQueryValue($response_type);
      }// query params
      if($scope !== null) {
        $queryParams['scope'] = $this->apiClient->toQueryValue($scope);
      }// query params
      if($redirect_uri !== null) {
        $queryParams['redirect_uri'] = $this->apiClient->toQueryValue($redirect_uri);
      }// query params
      if($state !== null) {
        $queryParams['state'] = $this->apiClient->toQueryValue($state);
      }// query params
      if($realm !== null) {
        $queryParams['realm'] = $this->apiClient->toQueryValue($realm);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  

}
