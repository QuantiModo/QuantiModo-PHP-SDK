<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class ConnectorsApi {

  function __construct($apiClient = null) {
    if (null === $apiClient) {
      if (Configuration::$apiClient === null) {
        Configuration::$apiClient = new ApiClient(); // create a new API client if not present
        $this->apiClient = Configuration::$apiClient;
      }
      else
        $this->apiClient = Configuration::$apiClient; // use the default one
    } else {
      $this->apiClient = $apiClient; // use the one provided by the user
    }
  }

  private $apiClient; // instance of the ApiClient

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * connectorsListGet
   *
   * List of Connectors
   *
   * @return array[Connector]
   */
   public function connectorsListGet() {
      

      // parse inputs
      $resourcePath = "/connectors/list";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Connector]');
      return $responseObject;
  }
  
  /**
   * connectorsConnectorConnectGet
   *
   * Obtain a token from 3rd party data source
   *
   * @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
   * @return void
   */
   public function connectorsConnectorConnectGet($connector) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorConnectGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/connect";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * connectorsConnectorConnectInstructionsGet
   *
   * Get connection parameters
   *
   * @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
   * @param string $url URL which should be used to enable the connector (required)
   * @param array[string] $parameters Array of Parameters for the request to enable connector (required)
   * @param boolean $use_popup Should use popup when enabling connector (required)
   * @return void
   */
   public function connectorsConnectorConnectInstructionsGet($connector, $url, $parameters, $use_popup) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorConnectInstructionsGet');
      }
      
      // verify the required parameter 'url' is set
      if ($url === null) {
        throw new \InvalidArgumentException('Missing the required parameter $url when calling connectorsConnectorConnectInstructionsGet');
      }
      
      // verify the required parameter 'parameters' is set
      if ($parameters === null) {
        throw new \InvalidArgumentException('Missing the required parameter $parameters when calling connectorsConnectorConnectInstructionsGet');
      }
      
      // verify the required parameter 'use_popup' is set
      if ($use_popup === null) {
        throw new \InvalidArgumentException('Missing the required parameter $use_popup when calling connectorsConnectorConnectInstructionsGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/connectInstructions";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($url !== null) {
        $queryParams['url'] = $this->apiClient->toQueryValue($url);
      }// query params
      if($parameters !== null) {
        $queryParams['parameters'] = $this->apiClient->toQueryValue($parameters);
      }// query params
      if($use_popup !== null) {
        $queryParams['usePopup'] = $this->apiClient->toQueryValue($use_popup);
      }
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * connectorsConnectorConnectParameterGet
   *
   * Get connection parameters
   *
   * @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
   * @param string $display_name Name of the parameter that is user visible in the form (required)
   * @param string $key Name of the property that the user has to enter such as username or password Connector (used in HTTP request) TODO What&#39;s a connector key? (required)
   * @param boolean $use_popup Should use popup when enabling connector (required)
   * @param string $type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp (required)
   * @param string $placeholder Placeholder hint value for the parameter input tag (required)
   * @param string $default_value Default parameter value (required)
   * @return void
   */
   public function connectorsConnectorConnectParameterGet($connector, $display_name, $key, $use_popup, $type, $placeholder, $default_value) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'display_name' is set
      if ($display_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $display_name when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'key' is set
      if ($key === null) {
        throw new \InvalidArgumentException('Missing the required parameter $key when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'use_popup' is set
      if ($use_popup === null) {
        throw new \InvalidArgumentException('Missing the required parameter $use_popup when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'type' is set
      if ($type === null) {
        throw new \InvalidArgumentException('Missing the required parameter $type when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'placeholder' is set
      if ($placeholder === null) {
        throw new \InvalidArgumentException('Missing the required parameter $placeholder when calling connectorsConnectorConnectParameterGet');
      }
      
      // verify the required parameter 'default_value' is set
      if ($default_value === null) {
        throw new \InvalidArgumentException('Missing the required parameter $default_value when calling connectorsConnectorConnectParameterGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/connectParameter";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($display_name !== null) {
        $queryParams['displayName'] = $this->apiClient->toQueryValue($display_name);
      }// query params
      if($key !== null) {
        $queryParams['key'] = $this->apiClient->toQueryValue($key);
      }// query params
      if($use_popup !== null) {
        $queryParams['usePopup'] = $this->apiClient->toQueryValue($use_popup);
      }// query params
      if($type !== null) {
        $queryParams['type'] = $this->apiClient->toQueryValue($type);
      }// query params
      if($placeholder !== null) {
        $queryParams['placeholder'] = $this->apiClient->toQueryValue($placeholder);
      }// query params
      if($default_value !== null) {
        $queryParams['defaultValue'] = $this->apiClient->toQueryValue($default_value);
      }
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * connectorsConnectorDisconnectGet
   *
   * Delete stored connection info
   *
   * @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
   * @return void
   */
   public function connectorsConnectorDisconnectGet($connector) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorDisconnectGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/disconnect";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * connectorsConnectorInfoGet
   *
   * Get connector info for user
   *
   * @param string $connector Lowercase system name of the source application or device. Get a list of available connectors from the /connectors/list endpoint. (required)
   * @return void
   */
   public function connectorsConnectorInfoGet($connector) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorInfoGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/info";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * connectorsConnectorUpdateGet
   *
   * Sync with data source
   *
   * @param string $connector Lowercase system name of the source application or device (required)
   * @return void
   */
   public function connectorsConnectorUpdateGet($connector) {
      
      // verify the required parameter 'connector' is set
      if ($connector === null) {
        throw new \InvalidArgumentException('Missing the required parameter $connector when calling connectorsConnectorUpdateGet');
      }
      

      // parse inputs
      $resourcePath = "/connectors/{connector}/update";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($connector !== null) {
        $resourcePath = str_replace("{" . "connector" . "}",
                                    $this->apiClient->toPathValue($connector), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  

}
