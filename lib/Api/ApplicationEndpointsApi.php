<?php
/**
 * ApplicationEndpointsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * ApplicationEndpointsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApplicationEndpointsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.quantimo.do/api/v2');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return ApplicationEndpointsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * applicationConnectionsGet
     *
     * Get all Connections
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id The id for the connector data source for which the connection is connected (optional)
     * @param string $connect_status Indicates whether a connector is currently connected to a service for a user. (optional)
     * @param string $connect_error Error message if there is a problem with authorizing this connection. (optional)
     * @param string $update_requested_at Time at which an update was requested by a user. (optional)
     * @param string $update_status Indicates whether a connector is currently updated. (optional)
     * @param string $update_error Indicates if there was an error during the update. (optional)
     * @param string $last_successful_updated_at The time at which the connector was last successfully updated. (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2003
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationConnectionsGet($access_token = null, $connector_id = null, $connect_status = null, $connect_error = null, $update_requested_at = null, $update_status = null, $update_error = null, $last_successful_updated_at = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationConnectionsGetWithHttpInfo ($access_token, $connector_id, $connect_status, $connect_error, $update_requested_at, $update_status, $update_error, $last_successful_updated_at, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationConnectionsGetWithHttpInfo
     *
     * Get all Connections
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id The id for the connector data source for which the connection is connected (optional)
     * @param string $connect_status Indicates whether a connector is currently connected to a service for a user. (optional)
     * @param string $connect_error Error message if there is a problem with authorizing this connection. (optional)
     * @param string $update_requested_at Time at which an update was requested by a user. (optional)
     * @param string $update_status Indicates whether a connector is currently updated. (optional)
     * @param string $update_error Indicates if there was an error during the update. (optional)
     * @param string $last_successful_updated_at The time at which the connector was last successfully updated. (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationConnectionsGetWithHttpInfo($access_token = null, $connector_id = null, $connect_status = null, $connect_error = null, $update_requested_at = null, $update_status = null, $update_error = null, $last_successful_updated_at = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/connections";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($connector_id !== null) {
            $queryParams['connector_id'] = $this->apiClient->getSerializer()->toQueryValue($connector_id);
        }// query params
        
        if ($connect_status !== null) {
            $queryParams['connect_status'] = $this->apiClient->getSerializer()->toQueryValue($connect_status);
        }// query params
        
        if ($connect_error !== null) {
            $queryParams['connect_error'] = $this->apiClient->getSerializer()->toQueryValue($connect_error);
        }// query params
        
        if ($update_requested_at !== null) {
            $queryParams['update_requested_at'] = $this->apiClient->getSerializer()->toQueryValue($update_requested_at);
        }// query params
        
        if ($update_status !== null) {
            $queryParams['update_status'] = $this->apiClient->getSerializer()->toQueryValue($update_status);
        }// query params
        
        if ($update_error !== null) {
            $queryParams['update_error'] = $this->apiClient->getSerializer()->toQueryValue($update_error);
        }// query params
        
        if ($last_successful_updated_at !== null) {
            $queryParams['last_successful_updated_at'] = $this->apiClient->getSerializer()->toQueryValue($last_successful_updated_at);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2003'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2003', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationCredentialsGet
     *
     * Get all Credentials
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id The id for the connector data source from which the credential was obtained (optional)
     * @param string $attr_key Attribute name such as token, userid, username, or password (optional)
     * @param string $attr_value Encrypted value for the attribute specified (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2004
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationCredentialsGet($access_token = null, $connector_id = null, $attr_key = null, $attr_value = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationCredentialsGetWithHttpInfo ($access_token, $connector_id, $attr_key, $attr_value, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationCredentialsGetWithHttpInfo
     *
     * Get all Credentials
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id The id for the connector data source from which the credential was obtained (optional)
     * @param string $attr_key Attribute name such as token, userid, username, or password (optional)
     * @param string $attr_value Encrypted value for the attribute specified (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationCredentialsGetWithHttpInfo($access_token = null, $connector_id = null, $attr_key = null, $attr_value = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/credentials";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($connector_id !== null) {
            $queryParams['connector_id'] = $this->apiClient->getSerializer()->toQueryValue($connector_id);
        }// query params
        
        if ($attr_key !== null) {
            $queryParams['attr_key'] = $this->apiClient->getSerializer()->toQueryValue($attr_key);
        }// query params
        
        if ($attr_value !== null) {
            $queryParams['attr_value'] = $this->apiClient->getSerializer()->toQueryValue($attr_value);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2004'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2004', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2004', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationMeasurementsGet
     *
     * Get measurements for all users using your application
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which originally stored the measurement (optional)
     * @param int $connector_id The id for the connector data source from which the measurement was obtained (optional)
     * @param int $variable_id ID of the variable for which we are creating the measurement records (optional)
     * @param int $source_id Application or device used to record the measurement values (optional)
     * @param string $start_time start time for the measurement event. Use ISO 8601 datetime format (optional)
     * @param Number $value The value of the measurement after conversion to the default unit for that variable (optional)
     * @param int $unit_id The default unit id for the variable (optional)
     * @param Number $original_value Unconverted value of measurement as originally posted (before conversion to default unit) (optional)
     * @param int $original_unit_id Unit id of the measurement as originally submitted (optional)
     * @param int $duration Duration of the event being measurement in seconds (optional)
     * @param string $note An optional note the user may include with their measurement (optional)
     * @param Number $latitude Latitude at which the measurement was taken (optional)
     * @param Number $longitude Longitude at which the measurement was taken (optional)
     * @param string $location Optional human readable name for the location where the measurement was recorded (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param string $error An error message if there is a problem with the measurement (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2005
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationMeasurementsGet($access_token = null, $client_id = null, $connector_id = null, $variable_id = null, $source_id = null, $start_time = null, $value = null, $unit_id = null, $original_value = null, $original_unit_id = null, $duration = null, $note = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $error = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationMeasurementsGetWithHttpInfo ($access_token, $client_id, $connector_id, $variable_id, $source_id, $start_time, $value, $unit_id, $original_value, $original_unit_id, $duration, $note, $latitude, $longitude, $location, $created_at, $updated_at, $error, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationMeasurementsGetWithHttpInfo
     *
     * Get measurements for all users using your application
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which originally stored the measurement (optional)
     * @param int $connector_id The id for the connector data source from which the measurement was obtained (optional)
     * @param int $variable_id ID of the variable for which we are creating the measurement records (optional)
     * @param int $source_id Application or device used to record the measurement values (optional)
     * @param string $start_time start time for the measurement event. Use ISO 8601 datetime format (optional)
     * @param Number $value The value of the measurement after conversion to the default unit for that variable (optional)
     * @param int $unit_id The default unit id for the variable (optional)
     * @param Number $original_value Unconverted value of measurement as originally posted (before conversion to default unit) (optional)
     * @param int $original_unit_id Unit id of the measurement as originally submitted (optional)
     * @param int $duration Duration of the event being measurement in seconds (optional)
     * @param string $note An optional note the user may include with their measurement (optional)
     * @param Number $latitude Latitude at which the measurement was taken (optional)
     * @param Number $longitude Longitude at which the measurement was taken (optional)
     * @param string $location Optional human readable name for the location where the measurement was recorded (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param string $error An error message if there is a problem with the measurement (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationMeasurementsGetWithHttpInfo($access_token = null, $client_id = null, $connector_id = null, $variable_id = null, $source_id = null, $start_time = null, $value = null, $unit_id = null, $original_value = null, $original_unit_id = null, $duration = null, $note = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $error = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/measurements";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }// query params
        
        if ($connector_id !== null) {
            $queryParams['connector_id'] = $this->apiClient->getSerializer()->toQueryValue($connector_id);
        }// query params
        
        if ($variable_id !== null) {
            $queryParams['variable_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_id);
        }// query params
        
        if ($source_id !== null) {
            $queryParams['source_id'] = $this->apiClient->getSerializer()->toQueryValue($source_id);
        }// query params
        
        if ($start_time !== null) {
            $queryParams['start_time'] = $this->apiClient->getSerializer()->toQueryValue($start_time);
        }// query params
        
        if ($value !== null) {
            $queryParams['value'] = $this->apiClient->getSerializer()->toQueryValue($value);
        }// query params
        
        if ($unit_id !== null) {
            $queryParams['unit_id'] = $this->apiClient->getSerializer()->toQueryValue($unit_id);
        }// query params
        
        if ($original_value !== null) {
            $queryParams['original_value'] = $this->apiClient->getSerializer()->toQueryValue($original_value);
        }// query params
        
        if ($original_unit_id !== null) {
            $queryParams['original_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($original_unit_id);
        }// query params
        
        if ($duration !== null) {
            $queryParams['duration'] = $this->apiClient->getSerializer()->toQueryValue($duration);
        }// query params
        
        if ($note !== null) {
            $queryParams['note'] = $this->apiClient->getSerializer()->toQueryValue($note);
        }// query params
        
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }// query params
        
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }// query params
        
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($error !== null) {
            $queryParams['error'] = $this->apiClient->getSerializer()->toQueryValue($error);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2005'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2005', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2005', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationTrackingRemindersGet
     *
     * Get tracking reminders
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this trackingReminder (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2006
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationTrackingRemindersGet($access_token = null, $client_id = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationTrackingRemindersGetWithHttpInfo ($access_token, $client_id, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationTrackingRemindersGetWithHttpInfo
     *
     * Get tracking reminders
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this trackingReminder (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationTrackingRemindersGetWithHttpInfo($access_token = null, $client_id = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/trackingReminders";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2006'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2006', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2006', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationUpdatesGet
     *
     * Get all Updates
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id connector_id (optional)
     * @param int $number_of_measurements number_of_measurements (optional)
     * @param bool $success success (optional)
     * @param string $message message (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2007
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUpdatesGet($access_token = null, $connector_id = null, $number_of_measurements = null, $success = null, $message = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationUpdatesGetWithHttpInfo ($access_token, $connector_id, $number_of_measurements, $success, $message, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationUpdatesGetWithHttpInfo
     *
     * Get all Updates
     *
     * @param string $access_token Application&#39;s OAuth2 access token (optional)
     * @param int $connector_id connector_id (optional)
     * @param int $number_of_measurements number_of_measurements (optional)
     * @param bool $success success (optional)
     * @param string $message message (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUpdatesGetWithHttpInfo($access_token = null, $connector_id = null, $number_of_measurements = null, $success = null, $message = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/updates";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($connector_id !== null) {
            $queryParams['connector_id'] = $this->apiClient->getSerializer()->toQueryValue($connector_id);
        }// query params
        
        if ($number_of_measurements !== null) {
            $queryParams['number_of_measurements'] = $this->apiClient->getSerializer()->toQueryValue($number_of_measurements);
        }// query params
        
        if ($success !== null) {
            $queryParams['success'] = $this->apiClient->getSerializer()->toQueryValue($success);
        }// query params
        
        if ($message !== null) {
            $queryParams['message'] = $this->apiClient->getSerializer()->toQueryValue($message);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2007'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2007', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2007', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationUserVariableRelationshipsGet
     *
     * Get all UserVariableRelationships
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param int $id id (optional)
     * @param string $confidence_level Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     * @param Number $confidence_score A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     * @param string $direction Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. (optional)
     * @param int $duration_of_action Estimated number of seconds following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param string $error_message error_message (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $outcome_variable_id Variable ID for the outcome variable (optional)
     * @param int $predictor_variable_id Variable ID for the predictor variable (optional)
     * @param int $predictor_unit_id ID for default unit of the predictor variable (optional)
     * @param Number $sinn_rank A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. (optional)
     * @param string $strength_level Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. (optional)
     * @param Number $strength_score A value represented to the size of the effect which the predictor appears to have on the outcome. (optional)
     * @param string $vote vote (optional)
     * @param Number $value_predicting_high_outcome Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value (optional)
     * @param Number $value_predicting_low_outcome Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2008
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUserVariableRelationshipsGet($access_token = null, $id = null, $confidence_level = null, $confidence_score = null, $direction = null, $duration_of_action = null, $error_message = null, $onset_delay = null, $outcome_variable_id = null, $predictor_variable_id = null, $predictor_unit_id = null, $sinn_rank = null, $strength_level = null, $strength_score = null, $vote = null, $value_predicting_high_outcome = null, $value_predicting_low_outcome = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationUserVariableRelationshipsGetWithHttpInfo ($access_token, $id, $confidence_level, $confidence_score, $direction, $duration_of_action, $error_message, $onset_delay, $outcome_variable_id, $predictor_variable_id, $predictor_unit_id, $sinn_rank, $strength_level, $strength_score, $vote, $value_predicting_high_outcome, $value_predicting_low_outcome, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationUserVariableRelationshipsGetWithHttpInfo
     *
     * Get all UserVariableRelationships
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param int $id id (optional)
     * @param string $confidence_level Our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     * @param Number $confidence_score A quantitative representation of our confidence that a consistent predictive relationship exists based on the amount of evidence, reproducibility, and other factors (optional)
     * @param string $direction Direction is positive if higher predictor values generally precede higher outcome values. Direction is negative if higher predictor values generally precede lower outcome values. (optional)
     * @param int $duration_of_action Estimated number of seconds following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param string $error_message error_message (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $outcome_variable_id Variable ID for the outcome variable (optional)
     * @param int $predictor_variable_id Variable ID for the predictor variable (optional)
     * @param int $predictor_unit_id ID for default unit of the predictor variable (optional)
     * @param Number $sinn_rank A value representative of the relevance of this predictor relative to other predictors of this outcome.  Usually used for relevancy sorting. (optional)
     * @param string $strength_level Can be weak, medium, or strong based on the size of the effect which the predictor appears to have on the outcome relative to other variable relationship strength scores. (optional)
     * @param Number $strength_score A value represented to the size of the effect which the predictor appears to have on the outcome. (optional)
     * @param string $vote vote (optional)
     * @param Number $value_predicting_high_outcome Value for the predictor variable (in it&#39;s default unit) which typically precedes an above average outcome value (optional)
     * @param Number $value_predicting_low_outcome Value for the predictor variable (in it&#39;s default unit) which typically precedes a below average outcome value (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUserVariableRelationshipsGetWithHttpInfo($access_token = null, $id = null, $confidence_level = null, $confidence_score = null, $direction = null, $duration_of_action = null, $error_message = null, $onset_delay = null, $outcome_variable_id = null, $predictor_variable_id = null, $predictor_unit_id = null, $sinn_rank = null, $strength_level = null, $strength_score = null, $vote = null, $value_predicting_high_outcome = null, $value_predicting_low_outcome = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/userVariableRelationships";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }// query params
        
        if ($confidence_level !== null) {
            $queryParams['confidence_level'] = $this->apiClient->getSerializer()->toQueryValue($confidence_level);
        }// query params
        
        if ($confidence_score !== null) {
            $queryParams['confidence_score'] = $this->apiClient->getSerializer()->toQueryValue($confidence_score);
        }// query params
        
        if ($direction !== null) {
            $queryParams['direction'] = $this->apiClient->getSerializer()->toQueryValue($direction);
        }// query params
        
        if ($duration_of_action !== null) {
            $queryParams['duration_of_action'] = $this->apiClient->getSerializer()->toQueryValue($duration_of_action);
        }// query params
        
        if ($error_message !== null) {
            $queryParams['error_message'] = $this->apiClient->getSerializer()->toQueryValue($error_message);
        }// query params
        
        if ($onset_delay !== null) {
            $queryParams['onset_delay'] = $this->apiClient->getSerializer()->toQueryValue($onset_delay);
        }// query params
        
        if ($outcome_variable_id !== null) {
            $queryParams['outcome_variable_id'] = $this->apiClient->getSerializer()->toQueryValue($outcome_variable_id);
        }// query params
        
        if ($predictor_variable_id !== null) {
            $queryParams['predictor_variable_id'] = $this->apiClient->getSerializer()->toQueryValue($predictor_variable_id);
        }// query params
        
        if ($predictor_unit_id !== null) {
            $queryParams['predictor_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($predictor_unit_id);
        }// query params
        
        if ($sinn_rank !== null) {
            $queryParams['sinn_rank'] = $this->apiClient->getSerializer()->toQueryValue($sinn_rank);
        }// query params
        
        if ($strength_level !== null) {
            $queryParams['strength_level'] = $this->apiClient->getSerializer()->toQueryValue($strength_level);
        }// query params
        
        if ($strength_score !== null) {
            $queryParams['strength_score'] = $this->apiClient->getSerializer()->toQueryValue($strength_score);
        }// query params
        
        if ($vote !== null) {
            $queryParams['vote'] = $this->apiClient->getSerializer()->toQueryValue($vote);
        }// query params
        
        if ($value_predicting_high_outcome !== null) {
            $queryParams['value_predicting_high_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_high_outcome);
        }// query params
        
        if ($value_predicting_low_outcome !== null) {
            $queryParams['value_predicting_low_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_low_outcome);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2008'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2008', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2008', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationUserVariablesGet
     *
     * Get all UserVariables
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this user variable (optional)
     * @param int $parent_id ID of the parent variable if this variable has any parent (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $default_unit_id D of unit to use for this variable (optional)
     * @param Number $minimum_allowed_value Minimum reasonable value for this variable (uses default unit) (optional)
     * @param Number $maximum_allowed_value Maximum reasonable value for this variable (uses default unit) (optional)
     * @param Number $filling_value Value for replacing null measurements (optional)
     * @param int $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param int $variable_category_id ID of variable category (optional)
     * @param int $updated updated (optional)
     * @param int $public Is variable public (optional)
     * @param bool $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     * @param string $filling_type 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     * @param int $number_of_measurements Number of measurements (optional)
     * @param int $number_of_processed_measurements Number of processed measurements (optional)
     * @param int $measurements_at_last_analysis Number of measurements at last analysis (optional)
     * @param int $last_unit_id ID of last Unit (optional)
     * @param int $last_original_unit_id ID of last original Unit (optional)
     * @param int $last_original_value Last original value which is stored (optional)
     * @param Number $last_value Last Value (optional)
     * @param Number $last_original_value2 Last original value which is stored (optional)
     * @param int $last_source_id ID of last source (optional)
     * @param int $number_of_correlations Number of correlations for this variable (optional)
     * @param string $status status (optional)
     * @param string $error_message error_message (optional)
     * @param string $last_successful_update_time When this variable or its settings were last updated (optional)
     * @param Number $standard_deviation Standard deviation (optional)
     * @param Number $variance Variance (optional)
     * @param Number $minimum_recorded_value Minimum recorded value of this variable (optional)
     * @param Number $maximum_recorded_value Maximum recorded value of this variable (optional)
     * @param Number $mean Mean (optional)
     * @param Number $median Median (optional)
     * @param int $most_common_unit_id Most common Unit ID (optional)
     * @param Number $most_common_value Most common value (optional)
     * @param Number $number_of_unique_daily_values Number of unique daily values (optional)
     * @param int $number_of_changes Number of changes (optional)
     * @param Number $skewness Skewness (optional)
     * @param Number $kurtosis Kurtosis (optional)
     * @param Number $latitude Latitude (optional)
     * @param Number $longitude Longitude (optional)
     * @param string $location Location (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param bool $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     * @param string $sources Comma-separated list of source names to limit variables to those sources (optional)
     * @param int $earliest_source_time Earliest source time (optional)
     * @param int $latest_source_time Latest source time (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param int $earliest_filling_time Earliest filling time (optional)
     * @param int $latest_filling_time Latest filling time (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse2009
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUserVariablesGet($access_token = null, $client_id = null, $parent_id = null, $variable_id = null, $default_unit_id = null, $minimum_allowed_value = null, $maximum_allowed_value = null, $filling_value = null, $join_with = null, $onset_delay = null, $duration_of_action = null, $variable_category_id = null, $updated = null, $public = null, $cause_only = null, $filling_type = null, $number_of_measurements = null, $number_of_processed_measurements = null, $measurements_at_last_analysis = null, $last_unit_id = null, $last_original_unit_id = null, $last_original_value = null, $last_value = null, $last_original_value2 = null, $last_source_id = null, $number_of_correlations = null, $status = null, $error_message = null, $last_successful_update_time = null, $standard_deviation = null, $variance = null, $minimum_recorded_value = null, $maximum_recorded_value = null, $mean = null, $median = null, $most_common_unit_id = null, $most_common_value = null, $number_of_unique_daily_values = null, $number_of_changes = null, $skewness = null, $kurtosis = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $outcome = null, $sources = null, $earliest_source_time = null, $latest_source_time = null, $earliest_measurement_time = null, $latest_measurement_time = null, $earliest_filling_time = null, $latest_filling_time = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationUserVariablesGetWithHttpInfo ($access_token, $client_id, $parent_id, $variable_id, $default_unit_id, $minimum_allowed_value, $maximum_allowed_value, $filling_value, $join_with, $onset_delay, $duration_of_action, $variable_category_id, $updated, $public, $cause_only, $filling_type, $number_of_measurements, $number_of_processed_measurements, $measurements_at_last_analysis, $last_unit_id, $last_original_unit_id, $last_original_value, $last_value, $last_original_value2, $last_source_id, $number_of_correlations, $status, $error_message, $last_successful_update_time, $standard_deviation, $variance, $minimum_recorded_value, $maximum_recorded_value, $mean, $median, $most_common_unit_id, $most_common_value, $number_of_unique_daily_values, $number_of_changes, $skewness, $kurtosis, $latitude, $longitude, $location, $created_at, $updated_at, $outcome, $sources, $earliest_source_time, $latest_source_time, $earliest_measurement_time, $latest_measurement_time, $earliest_filling_time, $latest_filling_time, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationUserVariablesGetWithHttpInfo
     *
     * Get all UserVariables
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this user variable (optional)
     * @param int $parent_id ID of the parent variable if this variable has any parent (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $default_unit_id D of unit to use for this variable (optional)
     * @param Number $minimum_allowed_value Minimum reasonable value for this variable (uses default unit) (optional)
     * @param Number $maximum_allowed_value Maximum reasonable value for this variable (uses default unit) (optional)
     * @param Number $filling_value Value for replacing null measurements (optional)
     * @param int $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables (optional)
     * @param int $onset_delay Estimated number of seconds that pass before a stimulus produces a perceivable effect (optional)
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect (optional)
     * @param int $variable_category_id ID of variable category (optional)
     * @param int $updated updated (optional)
     * @param int $public Is variable public (optional)
     * @param bool $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user (optional)
     * @param string $filling_type 0 -&gt; No filling, 1 -&gt; Use filling-value (optional)
     * @param int $number_of_measurements Number of measurements (optional)
     * @param int $number_of_processed_measurements Number of processed measurements (optional)
     * @param int $measurements_at_last_analysis Number of measurements at last analysis (optional)
     * @param int $last_unit_id ID of last Unit (optional)
     * @param int $last_original_unit_id ID of last original Unit (optional)
     * @param int $last_original_value Last original value which is stored (optional)
     * @param Number $last_value Last Value (optional)
     * @param Number $last_original_value2 Last original value which is stored (optional)
     * @param int $last_source_id ID of last source (optional)
     * @param int $number_of_correlations Number of correlations for this variable (optional)
     * @param string $status status (optional)
     * @param string $error_message error_message (optional)
     * @param string $last_successful_update_time When this variable or its settings were last updated (optional)
     * @param Number $standard_deviation Standard deviation (optional)
     * @param Number $variance Variance (optional)
     * @param Number $minimum_recorded_value Minimum recorded value of this variable (optional)
     * @param Number $maximum_recorded_value Maximum recorded value of this variable (optional)
     * @param Number $mean Mean (optional)
     * @param Number $median Median (optional)
     * @param int $most_common_unit_id Most common Unit ID (optional)
     * @param Number $most_common_value Most common value (optional)
     * @param Number $number_of_unique_daily_values Number of unique daily values (optional)
     * @param int $number_of_changes Number of changes (optional)
     * @param Number $skewness Skewness (optional)
     * @param Number $kurtosis Kurtosis (optional)
     * @param Number $latitude Latitude (optional)
     * @param Number $longitude Longitude (optional)
     * @param string $location Location (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param bool $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables (optional)
     * @param string $sources Comma-separated list of source names to limit variables to those sources (optional)
     * @param int $earliest_source_time Earliest source time (optional)
     * @param int $latest_source_time Latest source time (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param int $earliest_filling_time Earliest filling time (optional)
     * @param int $latest_filling_time Latest filling time (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationUserVariablesGetWithHttpInfo($access_token = null, $client_id = null, $parent_id = null, $variable_id = null, $default_unit_id = null, $minimum_allowed_value = null, $maximum_allowed_value = null, $filling_value = null, $join_with = null, $onset_delay = null, $duration_of_action = null, $variable_category_id = null, $updated = null, $public = null, $cause_only = null, $filling_type = null, $number_of_measurements = null, $number_of_processed_measurements = null, $measurements_at_last_analysis = null, $last_unit_id = null, $last_original_unit_id = null, $last_original_value = null, $last_value = null, $last_original_value2 = null, $last_source_id = null, $number_of_correlations = null, $status = null, $error_message = null, $last_successful_update_time = null, $standard_deviation = null, $variance = null, $minimum_recorded_value = null, $maximum_recorded_value = null, $mean = null, $median = null, $most_common_unit_id = null, $most_common_value = null, $number_of_unique_daily_values = null, $number_of_changes = null, $skewness = null, $kurtosis = null, $latitude = null, $longitude = null, $location = null, $created_at = null, $updated_at = null, $outcome = null, $sources = null, $earliest_source_time = null, $latest_source_time = null, $earliest_measurement_time = null, $latest_measurement_time = null, $earliest_filling_time = null, $latest_filling_time = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/userVariables";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }// query params
        
        if ($parent_id !== null) {
            $queryParams['parent_id'] = $this->apiClient->getSerializer()->toQueryValue($parent_id);
        }// query params
        
        if ($variable_id !== null) {
            $queryParams['variable_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_id);
        }// query params
        
        if ($default_unit_id !== null) {
            $queryParams['default_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($default_unit_id);
        }// query params
        
        if ($minimum_allowed_value !== null) {
            $queryParams['minimum_allowed_value'] = $this->apiClient->getSerializer()->toQueryValue($minimum_allowed_value);
        }// query params
        
        if ($maximum_allowed_value !== null) {
            $queryParams['maximum_allowed_value'] = $this->apiClient->getSerializer()->toQueryValue($maximum_allowed_value);
        }// query params
        
        if ($filling_value !== null) {
            $queryParams['filling_value'] = $this->apiClient->getSerializer()->toQueryValue($filling_value);
        }// query params
        
        if ($join_with !== null) {
            $queryParams['join_with'] = $this->apiClient->getSerializer()->toQueryValue($join_with);
        }// query params
        
        if ($onset_delay !== null) {
            $queryParams['onset_delay'] = $this->apiClient->getSerializer()->toQueryValue($onset_delay);
        }// query params
        
        if ($duration_of_action !== null) {
            $queryParams['duration_of_action'] = $this->apiClient->getSerializer()->toQueryValue($duration_of_action);
        }// query params
        
        if ($variable_category_id !== null) {
            $queryParams['variable_category_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_category_id);
        }// query params
        
        if ($updated !== null) {
            $queryParams['updated'] = $this->apiClient->getSerializer()->toQueryValue($updated);
        }// query params
        
        if ($public !== null) {
            $queryParams['public'] = $this->apiClient->getSerializer()->toQueryValue($public);
        }// query params
        
        if ($cause_only !== null) {
            $queryParams['cause_only'] = $this->apiClient->getSerializer()->toQueryValue($cause_only);
        }// query params
        
        if ($filling_type !== null) {
            $queryParams['filling_type'] = $this->apiClient->getSerializer()->toQueryValue($filling_type);
        }// query params
        
        if ($number_of_measurements !== null) {
            $queryParams['number_of_measurements'] = $this->apiClient->getSerializer()->toQueryValue($number_of_measurements);
        }// query params
        
        if ($number_of_processed_measurements !== null) {
            $queryParams['number_of_processed_measurements'] = $this->apiClient->getSerializer()->toQueryValue($number_of_processed_measurements);
        }// query params
        
        if ($measurements_at_last_analysis !== null) {
            $queryParams['measurements_at_last_analysis'] = $this->apiClient->getSerializer()->toQueryValue($measurements_at_last_analysis);
        }// query params
        
        if ($last_unit_id !== null) {
            $queryParams['last_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($last_unit_id);
        }// query params
        
        if ($last_original_unit_id !== null) {
            $queryParams['last_original_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($last_original_unit_id);
        }// query params
        
        if ($last_original_value !== null) {
            $queryParams['last_original_value'] = $this->apiClient->getSerializer()->toQueryValue($last_original_value);
        }// query params
        
        if ($last_value !== null) {
            $queryParams['last_value'] = $this->apiClient->getSerializer()->toQueryValue($last_value);
        }// query params
        
        if ($last_original_value2 !== null) {
            $queryParams['last_original_value'] = $this->apiClient->getSerializer()->toQueryValue($last_original_value2);
        }// query params
        
        if ($last_source_id !== null) {
            $queryParams['last_source_id'] = $this->apiClient->getSerializer()->toQueryValue($last_source_id);
        }// query params
        
        if ($number_of_correlations !== null) {
            $queryParams['number_of_correlations'] = $this->apiClient->getSerializer()->toQueryValue($number_of_correlations);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($error_message !== null) {
            $queryParams['error_message'] = $this->apiClient->getSerializer()->toQueryValue($error_message);
        }// query params
        
        if ($last_successful_update_time !== null) {
            $queryParams['last_successful_update_time'] = $this->apiClient->getSerializer()->toQueryValue($last_successful_update_time);
        }// query params
        
        if ($standard_deviation !== null) {
            $queryParams['standard_deviation'] = $this->apiClient->getSerializer()->toQueryValue($standard_deviation);
        }// query params
        
        if ($variance !== null) {
            $queryParams['variance'] = $this->apiClient->getSerializer()->toQueryValue($variance);
        }// query params
        
        if ($minimum_recorded_value !== null) {
            $queryParams['minimum_recorded_value'] = $this->apiClient->getSerializer()->toQueryValue($minimum_recorded_value);
        }// query params
        
        if ($maximum_recorded_value !== null) {
            $queryParams['maximum_recorded_value'] = $this->apiClient->getSerializer()->toQueryValue($maximum_recorded_value);
        }// query params
        
        if ($mean !== null) {
            $queryParams['mean'] = $this->apiClient->getSerializer()->toQueryValue($mean);
        }// query params
        
        if ($median !== null) {
            $queryParams['median'] = $this->apiClient->getSerializer()->toQueryValue($median);
        }// query params
        
        if ($most_common_unit_id !== null) {
            $queryParams['most_common_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($most_common_unit_id);
        }// query params
        
        if ($most_common_value !== null) {
            $queryParams['most_common_value'] = $this->apiClient->getSerializer()->toQueryValue($most_common_value);
        }// query params
        
        if ($number_of_unique_daily_values !== null) {
            $queryParams['number_of_unique_daily_values'] = $this->apiClient->getSerializer()->toQueryValue($number_of_unique_daily_values);
        }// query params
        
        if ($number_of_changes !== null) {
            $queryParams['number_of_changes'] = $this->apiClient->getSerializer()->toQueryValue($number_of_changes);
        }// query params
        
        if ($skewness !== null) {
            $queryParams['skewness'] = $this->apiClient->getSerializer()->toQueryValue($skewness);
        }// query params
        
        if ($kurtosis !== null) {
            $queryParams['kurtosis'] = $this->apiClient->getSerializer()->toQueryValue($kurtosis);
        }// query params
        
        if ($latitude !== null) {
            $queryParams['latitude'] = $this->apiClient->getSerializer()->toQueryValue($latitude);
        }// query params
        
        if ($longitude !== null) {
            $queryParams['longitude'] = $this->apiClient->getSerializer()->toQueryValue($longitude);
        }// query params
        
        if ($location !== null) {
            $queryParams['location'] = $this->apiClient->getSerializer()->toQueryValue($location);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($outcome !== null) {
            $queryParams['outcome'] = $this->apiClient->getSerializer()->toQueryValue($outcome);
        }// query params
        
        if ($sources !== null) {
            $queryParams['sources'] = $this->apiClient->getSerializer()->toQueryValue($sources);
        }// query params
        
        if ($earliest_source_time !== null) {
            $queryParams['earliest_source_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_source_time);
        }// query params
        
        if ($latest_source_time !== null) {
            $queryParams['latest_source_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_source_time);
        }// query params
        
        if ($earliest_measurement_time !== null) {
            $queryParams['earliest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_measurement_time);
        }// query params
        
        if ($latest_measurement_time !== null) {
            $queryParams['latest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_measurement_time);
        }// query params
        
        if ($earliest_filling_time !== null) {
            $queryParams['earliest_filling_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_filling_time);
        }// query params
        
        if ($latest_filling_time !== null) {
            $queryParams['latest_filling_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_filling_time);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2009'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2009', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2009', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationVariableUserSourcesGet
     *
     * Get all VariableUserSources
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $timestamp Time that this measurement occurred Uses epoch minute (epoch time divided by 60) (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse20010
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationVariableUserSourcesGet($access_token = null, $variable_id = null, $timestamp = null, $earliest_measurement_time = null, $latest_measurement_time = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationVariableUserSourcesGetWithHttpInfo ($access_token, $variable_id, $timestamp, $earliest_measurement_time, $latest_measurement_time, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationVariableUserSourcesGetWithHttpInfo
     *
     * Get all VariableUserSources
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param int $variable_id ID of variable (optional)
     * @param int $timestamp Time that this measurement occurred Uses epoch minute (epoch time divided by 60) (optional)
     * @param int $earliest_measurement_time Earliest measurement time (optional)
     * @param int $latest_measurement_time Latest measurement time (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20010, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationVariableUserSourcesGetWithHttpInfo($access_token = null, $variable_id = null, $timestamp = null, $earliest_measurement_time = null, $latest_measurement_time = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/variableUserSources";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($variable_id !== null) {
            $queryParams['variable_id'] = $this->apiClient->getSerializer()->toQueryValue($variable_id);
        }// query params
        
        if ($timestamp !== null) {
            $queryParams['timestamp'] = $this->apiClient->getSerializer()->toQueryValue($timestamp);
        }// query params
        
        if ($earliest_measurement_time !== null) {
            $queryParams['earliest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($earliest_measurement_time);
        }// query params
        
        if ($latest_measurement_time !== null) {
            $queryParams['latest_measurement_time'] = $this->apiClient->getSerializer()->toQueryValue($latest_measurement_time);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse20010'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse20010', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20010', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * applicationVotesGet
     *
     * Get all Votes
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this vote (optional)
     * @param int $cause_id ID of predictor variable (optional)
     * @param int $effect_id ID of outcome variable (optional)
     * @param int $value Value of Vote. 1 is for upvote. 0 is for downvote.  Otherwise, there is no vote. (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\InlineResponse20011
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationVotesGet($access_token = null, $client_id = null, $cause_id = null, $effect_id = null, $value = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->applicationVotesGetWithHttpInfo ($access_token, $client_id, $cause_id, $effect_id, $value, $created_at, $updated_at, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * applicationVotesGetWithHttpInfo
     *
     * Get all Votes
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param string $client_id The ID of the client application which last created or updated this vote (optional)
     * @param int $cause_id ID of predictor variable (optional)
     * @param int $effect_id ID of outcome variable (optional)
     * @param int $value Value of Vote. 1 is for upvote. 0 is for downvote.  Otherwise, there is no vote. (optional)
     * @param string $created_at When the record was first created. Use ISO 8601 datetime format (optional)
     * @param string $updated_at When the record was last updated. Use ISO 8601 datetime format (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. The maximum limit is 200 records. (optional)
     * @param int $offset OFFSET says to skip that many rows before beginning to return rows to the client. OFFSET 0 is the same as omitting the OFFSET clause. If both OFFSET and LIMIT appear, then OFFSET rows are skipped before starting to count the LIMIT rows that are returned. (optional)
     * @param string $sort Sort by given field. If the field is prefixed with &#39;-&#39;, it will sort in descending order. (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function applicationVotesGetWithHttpInfo($access_token = null, $client_id = null, $cause_id = null, $effect_id = null, $value = null, $created_at = null, $updated_at = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/application/votes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($client_id !== null) {
            $queryParams['client_id'] = $this->apiClient->getSerializer()->toQueryValue($client_id);
        }// query params
        
        if ($cause_id !== null) {
            $queryParams['cause_id'] = $this->apiClient->getSerializer()->toQueryValue($cause_id);
        }// query params
        
        if ($effect_id !== null) {
            $queryParams['effect_id'] = $this->apiClient->getSerializer()->toQueryValue($effect_id);
        }// query params
        
        if ($value !== null) {
            $queryParams['value'] = $this->apiClient->getSerializer()->toQueryValue($value);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse20011'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse20011', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse20011', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
