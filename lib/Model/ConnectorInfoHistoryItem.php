<?php
/**
 * ConnectorInfoHistoryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * ConnectorInfoHistoryItem Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ConnectorInfoHistoryItem implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'number_of_measurements' => 'int',
        'success' => 'bool',
        'message' => 'string',
        'created_at' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'number_of_measurements' => 'number_of_measurements',
        'success' => 'success',
        'message' => 'message',
        'created_at' => 'created_at'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'number_of_measurements' => 'setNumberOfMeasurements',
        'success' => 'setSuccess',
        'message' => 'setMessage',
        'created_at' => 'setCreatedAt'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'number_of_measurements' => 'getNumberOfMeasurements',
        'success' => 'getSuccess',
        'message' => 'getMessage',
        'created_at' => 'getCreatedAt'
    );
  
    
    /**
      * $number_of_measurements Number of measurements
      * @var int
      */
    protected $number_of_measurements;
    
    /**
      * $success True if the update was successfull
      * @var bool
      */
    protected $success;
    
    /**
      * $message Error message.
      * @var string
      */
    protected $message;
    
    /**
      * $created_at Date and time of the update
      * @var string
      */
    protected $created_at;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->number_of_measurements = $data["number_of_measurements"];
            $this->success = $data["success"];
            $this->message = $data["message"];
            $this->created_at = $data["created_at"];
        }
    }
    
    /**
     * Gets number_of_measurements
     * @return int
     */
    public function getNumberOfMeasurements()
    {
        return $this->number_of_measurements;
    }
  
    /**
     * Sets number_of_measurements
     * @param int $number_of_measurements Number of measurements
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        
        $this->number_of_measurements = $number_of_measurements;
        return $this;
    }
    
    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->success;
    }
  
    /**
     * Sets success
     * @param bool $success True if the update was successfull
     * @return $this
     */
    public function setSuccess($success)
    {
        
        $this->success = $success;
        return $this;
    }
    
    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->message;
    }
  
    /**
     * Sets message
     * @param string $message Error message.
     * @return $this
     */
    public function setMessage($message)
    {
        
        $this->message = $message;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param string $created_at Date and time of the update
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
