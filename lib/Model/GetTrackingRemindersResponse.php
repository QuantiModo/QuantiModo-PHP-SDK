<?php
/**
 * GetTrackingRemindersResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * GetTrackingRemindersResponse Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetTrackingRemindersResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetTrackingRemindersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'available_units' => '\QuantiModo\Client\Model\Unit[]',
        'client_id' => 'string',
        'combination_operation' => 'string',
        'created_at' => '\DateTime',
        'data' => '\QuantiModo\Client\Model\TrackingRemindersArray',
        'unit_abbreviated_name' => 'string',
        'unit_category_id' => 'int',
        'unit_category_name' => 'string',
        'unit_id' => 'int',
        'unit_name' => 'string',
        'default_value' => 'double',
        'filling_value' => 'int',
        'first_daily_reminder_time' => '\DateTime',
        'frequency_text_description' => 'string',
        'frequency_text_description_with_time' => '\DateTime',
        'id' => 'int',
        'image_url' => 'string',
        'input_type' => 'string',
        'ion_icon' => 'string',
        'last_value' => 'double',
        'local_daily_reminder_notification_times' => 'string[]',
        'local_daily_reminder_notification_times_for_all_reminders' => 'string[]',
        'manual_tracking' => 'bool',
        'message' => 'string',
        'minimum_allowed_value' => 'int',
        'next_reminder_time_epoch_seconds' => 'int',
        'number_of_raw_measurements' => 'int',
        'png_path' => 'string',
        'png_url' => 'string',
        'reminder_frequency' => 'int',
        'reminder_start_epoch_seconds' => 'int',
        'reminder_start_time' => '\DateTime',
        'reminder_start_time_local' => '\DateTime',
        'reminder_start_time_local_human_formatted' => '\DateTime',
        'repeating' => 'bool',
        'second_daily_reminder_time' => '\DateTime',
        'second_to_last_value' => 'double',
        'start_tracking_date' => 'string',
        'status' => 'int',
        'stop_tracking_date' => 'string',
        'success' => 'bool',
        'svg_url' => 'string',
        'third_to_last_value' => 'double',
        'tracking_reminder_id' => 'int',
        'tracking_reminder_image_url' => 'string',
        'updated_at' => '\DateTime',
        'user_id' => 'int',
        'user_variable_unit_abbreviated_name' => 'string',
        'user_variable_unit_category_id' => 'int',
        'user_variable_unit_category_name' => 'string',
        'user_variable_unit_id' => 'int',
        'user_variable_unit_name' => 'string',
        'user_variable_variable_category_id' => 'int',
        'user_variable_variable_category_name' => 'string',
        'value_and_frequency_text_description' => 'string',
        'value_and_frequency_text_description_with_time' => '\DateTime',
        'variable_category_id' => 'int',
        'variable_category_image_url' => 'string',
        'variable_category_name' => 'string',
        'variable_id' => 'int',
        'variable_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'available_units' => null,
        'client_id' => null,
        'combination_operation' => null,
        'created_at' => 'date-time',
        'data' => null,
        'unit_abbreviated_name' => null,
        'unit_category_id' => null,
        'unit_category_name' => null,
        'unit_id' => null,
        'unit_name' => null,
        'default_value' => 'double',
        'filling_value' => null,
        'first_daily_reminder_time' => 'date-time',
        'frequency_text_description' => null,
        'frequency_text_description_with_time' => 'date-time',
        'id' => null,
        'image_url' => null,
        'input_type' => null,
        'ion_icon' => null,
        'last_value' => 'double',
        'local_daily_reminder_notification_times' => null,
        'local_daily_reminder_notification_times_for_all_reminders' => null,
        'manual_tracking' => null,
        'message' => null,
        'minimum_allowed_value' => null,
        'next_reminder_time_epoch_seconds' => null,
        'number_of_raw_measurements' => null,
        'png_path' => null,
        'png_url' => null,
        'reminder_frequency' => null,
        'reminder_start_epoch_seconds' => null,
        'reminder_start_time' => 'date-time',
        'reminder_start_time_local' => 'date-time',
        'reminder_start_time_local_human_formatted' => 'date-time',
        'repeating' => null,
        'second_daily_reminder_time' => 'date-time',
        'second_to_last_value' => 'double',
        'start_tracking_date' => null,
        'status' => null,
        'stop_tracking_date' => null,
        'success' => null,
        'svg_url' => null,
        'third_to_last_value' => 'double',
        'tracking_reminder_id' => null,
        'tracking_reminder_image_url' => null,
        'updated_at' => 'date-time',
        'user_id' => null,
        'user_variable_unit_abbreviated_name' => null,
        'user_variable_unit_category_id' => null,
        'user_variable_unit_category_name' => null,
        'user_variable_unit_id' => null,
        'user_variable_unit_name' => null,
        'user_variable_variable_category_id' => null,
        'user_variable_variable_category_name' => null,
        'value_and_frequency_text_description' => null,
        'value_and_frequency_text_description_with_time' => 'date-time',
        'variable_category_id' => null,
        'variable_category_image_url' => null,
        'variable_category_name' => null,
        'variable_id' => null,
        'variable_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'available_units' => 'availableUnits',
        'client_id' => 'clientId',
        'combination_operation' => 'combinationOperation',
        'created_at' => 'createdAt',
        'data' => 'data',
        'unit_abbreviated_name' => 'unitAbbreviatedName',
        'unit_category_id' => 'unitCategoryId',
        'unit_category_name' => 'unitCategoryName',
        'unit_id' => 'unitId',
        'unit_name' => 'unitName',
        'default_value' => 'defaultValue',
        'filling_value' => 'fillingValue',
        'first_daily_reminder_time' => 'firstDailyReminderTime',
        'frequency_text_description' => 'frequencyTextDescription',
        'frequency_text_description_with_time' => 'frequencyTextDescriptionWithTime',
        'id' => 'id',
        'image_url' => 'imageUrl',
        'input_type' => 'inputType',
        'ion_icon' => 'ionIcon',
        'last_value' => 'lastValue',
        'local_daily_reminder_notification_times' => 'localDailyReminderNotificationTimes',
        'local_daily_reminder_notification_times_for_all_reminders' => 'localDailyReminderNotificationTimesForAllReminders',
        'manual_tracking' => 'manualTracking',
        'message' => 'message',
        'minimum_allowed_value' => 'minimumAllowedValue',
        'next_reminder_time_epoch_seconds' => 'nextReminderTimeEpochSeconds',
        'number_of_raw_measurements' => 'numberOfRawMeasurements',
        'png_path' => 'pngPath',
        'png_url' => 'pngUrl',
        'reminder_frequency' => 'reminderFrequency',
        'reminder_start_epoch_seconds' => 'reminderStartEpochSeconds',
        'reminder_start_time' => 'reminderStartTime',
        'reminder_start_time_local' => 'reminderStartTimeLocal',
        'reminder_start_time_local_human_formatted' => 'reminderStartTimeLocalHumanFormatted',
        'repeating' => 'repeating',
        'second_daily_reminder_time' => 'secondDailyReminderTime',
        'second_to_last_value' => 'secondToLastValue',
        'start_tracking_date' => 'startTrackingDate',
        'status' => 'status',
        'stop_tracking_date' => 'stopTrackingDate',
        'success' => 'success',
        'svg_url' => 'svgUrl',
        'third_to_last_value' => 'thirdToLastValue',
        'tracking_reminder_id' => 'trackingReminderId',
        'tracking_reminder_image_url' => 'trackingReminderImageUrl',
        'updated_at' => 'updatedAt',
        'user_id' => 'userId',
        'user_variable_unit_abbreviated_name' => 'userVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'userVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'userVariableUnitCategoryName',
        'user_variable_unit_id' => 'userVariableUnitId',
        'user_variable_unit_name' => 'userVariableUnitName',
        'user_variable_variable_category_id' => 'userVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'userVariableVariableCategoryName',
        'value_and_frequency_text_description' => 'valueAndFrequencyTextDescription',
        'value_and_frequency_text_description_with_time' => 'valueAndFrequencyTextDescriptionWithTime',
        'variable_category_id' => 'variableCategoryId',
        'variable_category_image_url' => 'variableCategoryImageUrl',
        'variable_category_name' => 'variableCategoryName',
        'variable_id' => 'variableId',
        'variable_name' => 'variableName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'available_units' => 'setAvailableUnits',
        'client_id' => 'setClientId',
        'combination_operation' => 'setCombinationOperation',
        'created_at' => 'setCreatedAt',
        'data' => 'setData',
        'unit_abbreviated_name' => 'setUnitAbbreviatedName',
        'unit_category_id' => 'setUnitCategoryId',
        'unit_category_name' => 'setUnitCategoryName',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'default_value' => 'setDefaultValue',
        'filling_value' => 'setFillingValue',
        'first_daily_reminder_time' => 'setFirstDailyReminderTime',
        'frequency_text_description' => 'setFrequencyTextDescription',
        'frequency_text_description_with_time' => 'setFrequencyTextDescriptionWithTime',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'input_type' => 'setInputType',
        'ion_icon' => 'setIonIcon',
        'last_value' => 'setLastValue',
        'local_daily_reminder_notification_times' => 'setLocalDailyReminderNotificationTimes',
        'local_daily_reminder_notification_times_for_all_reminders' => 'setLocalDailyReminderNotificationTimesForAllReminders',
        'manual_tracking' => 'setManualTracking',
        'message' => 'setMessage',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'next_reminder_time_epoch_seconds' => 'setNextReminderTimeEpochSeconds',
        'number_of_raw_measurements' => 'setNumberOfRawMeasurements',
        'png_path' => 'setPngPath',
        'png_url' => 'setPngUrl',
        'reminder_frequency' => 'setReminderFrequency',
        'reminder_start_epoch_seconds' => 'setReminderStartEpochSeconds',
        'reminder_start_time' => 'setReminderStartTime',
        'reminder_start_time_local' => 'setReminderStartTimeLocal',
        'reminder_start_time_local_human_formatted' => 'setReminderStartTimeLocalHumanFormatted',
        'repeating' => 'setRepeating',
        'second_daily_reminder_time' => 'setSecondDailyReminderTime',
        'second_to_last_value' => 'setSecondToLastValue',
        'start_tracking_date' => 'setStartTrackingDate',
        'status' => 'setStatus',
        'stop_tracking_date' => 'setStopTrackingDate',
        'success' => 'setSuccess',
        'svg_url' => 'setSvgUrl',
        'third_to_last_value' => 'setThirdToLastValue',
        'tracking_reminder_id' => 'setTrackingReminderId',
        'tracking_reminder_image_url' => 'setTrackingReminderImageUrl',
        'updated_at' => 'setUpdatedAt',
        'user_id' => 'setUserId',
        'user_variable_unit_abbreviated_name' => 'setUserVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'setUserVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'setUserVariableUnitCategoryName',
        'user_variable_unit_id' => 'setUserVariableUnitId',
        'user_variable_unit_name' => 'setUserVariableUnitName',
        'user_variable_variable_category_id' => 'setUserVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'setUserVariableVariableCategoryName',
        'value_and_frequency_text_description' => 'setValueAndFrequencyTextDescription',
        'value_and_frequency_text_description_with_time' => 'setValueAndFrequencyTextDescriptionWithTime',
        'variable_category_id' => 'setVariableCategoryId',
        'variable_category_image_url' => 'setVariableCategoryImageUrl',
        'variable_category_name' => 'setVariableCategoryName',
        'variable_id' => 'setVariableId',
        'variable_name' => 'setVariableName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'available_units' => 'getAvailableUnits',
        'client_id' => 'getClientId',
        'combination_operation' => 'getCombinationOperation',
        'created_at' => 'getCreatedAt',
        'data' => 'getData',
        'unit_abbreviated_name' => 'getUnitAbbreviatedName',
        'unit_category_id' => 'getUnitCategoryId',
        'unit_category_name' => 'getUnitCategoryName',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'default_value' => 'getDefaultValue',
        'filling_value' => 'getFillingValue',
        'first_daily_reminder_time' => 'getFirstDailyReminderTime',
        'frequency_text_description' => 'getFrequencyTextDescription',
        'frequency_text_description_with_time' => 'getFrequencyTextDescriptionWithTime',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'input_type' => 'getInputType',
        'ion_icon' => 'getIonIcon',
        'last_value' => 'getLastValue',
        'local_daily_reminder_notification_times' => 'getLocalDailyReminderNotificationTimes',
        'local_daily_reminder_notification_times_for_all_reminders' => 'getLocalDailyReminderNotificationTimesForAllReminders',
        'manual_tracking' => 'getManualTracking',
        'message' => 'getMessage',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'next_reminder_time_epoch_seconds' => 'getNextReminderTimeEpochSeconds',
        'number_of_raw_measurements' => 'getNumberOfRawMeasurements',
        'png_path' => 'getPngPath',
        'png_url' => 'getPngUrl',
        'reminder_frequency' => 'getReminderFrequency',
        'reminder_start_epoch_seconds' => 'getReminderStartEpochSeconds',
        'reminder_start_time' => 'getReminderStartTime',
        'reminder_start_time_local' => 'getReminderStartTimeLocal',
        'reminder_start_time_local_human_formatted' => 'getReminderStartTimeLocalHumanFormatted',
        'repeating' => 'getRepeating',
        'second_daily_reminder_time' => 'getSecondDailyReminderTime',
        'second_to_last_value' => 'getSecondToLastValue',
        'start_tracking_date' => 'getStartTrackingDate',
        'status' => 'getStatus',
        'stop_tracking_date' => 'getStopTrackingDate',
        'success' => 'getSuccess',
        'svg_url' => 'getSvgUrl',
        'third_to_last_value' => 'getThirdToLastValue',
        'tracking_reminder_id' => 'getTrackingReminderId',
        'tracking_reminder_image_url' => 'getTrackingReminderImageUrl',
        'updated_at' => 'getUpdatedAt',
        'user_id' => 'getUserId',
        'user_variable_unit_abbreviated_name' => 'getUserVariableUnitAbbreviatedName',
        'user_variable_unit_category_id' => 'getUserVariableUnitCategoryId',
        'user_variable_unit_category_name' => 'getUserVariableUnitCategoryName',
        'user_variable_unit_id' => 'getUserVariableUnitId',
        'user_variable_unit_name' => 'getUserVariableUnitName',
        'user_variable_variable_category_id' => 'getUserVariableVariableCategoryId',
        'user_variable_variable_category_name' => 'getUserVariableVariableCategoryName',
        'value_and_frequency_text_description' => 'getValueAndFrequencyTextDescription',
        'value_and_frequency_text_description_with_time' => 'getValueAndFrequencyTextDescriptionWithTime',
        'variable_category_id' => 'getVariableCategoryId',
        'variable_category_image_url' => 'getVariableCategoryImageUrl',
        'variable_category_name' => 'getVariableCategoryName',
        'variable_id' => 'getVariableId',
        'variable_name' => 'getVariableName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['available_units'] = isset($data['available_units']) ? $data['available_units'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['combination_operation'] = isset($data['combination_operation']) ? $data['combination_operation'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['unit_abbreviated_name'] = isset($data['unit_abbreviated_name']) ? $data['unit_abbreviated_name'] : null;
        $this->container['unit_category_id'] = isset($data['unit_category_id']) ? $data['unit_category_id'] : null;
        $this->container['unit_category_name'] = isset($data['unit_category_name']) ? $data['unit_category_name'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['filling_value'] = isset($data['filling_value']) ? $data['filling_value'] : null;
        $this->container['first_daily_reminder_time'] = isset($data['first_daily_reminder_time']) ? $data['first_daily_reminder_time'] : null;
        $this->container['frequency_text_description'] = isset($data['frequency_text_description']) ? $data['frequency_text_description'] : null;
        $this->container['frequency_text_description_with_time'] = isset($data['frequency_text_description_with_time']) ? $data['frequency_text_description_with_time'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['input_type'] = isset($data['input_type']) ? $data['input_type'] : null;
        $this->container['ion_icon'] = isset($data['ion_icon']) ? $data['ion_icon'] : null;
        $this->container['last_value'] = isset($data['last_value']) ? $data['last_value'] : null;
        $this->container['local_daily_reminder_notification_times'] = isset($data['local_daily_reminder_notification_times']) ? $data['local_daily_reminder_notification_times'] : null;
        $this->container['local_daily_reminder_notification_times_for_all_reminders'] = isset($data['local_daily_reminder_notification_times_for_all_reminders']) ? $data['local_daily_reminder_notification_times_for_all_reminders'] : null;
        $this->container['manual_tracking'] = isset($data['manual_tracking']) ? $data['manual_tracking'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['minimum_allowed_value'] = isset($data['minimum_allowed_value']) ? $data['minimum_allowed_value'] : null;
        $this->container['next_reminder_time_epoch_seconds'] = isset($data['next_reminder_time_epoch_seconds']) ? $data['next_reminder_time_epoch_seconds'] : null;
        $this->container['number_of_raw_measurements'] = isset($data['number_of_raw_measurements']) ? $data['number_of_raw_measurements'] : null;
        $this->container['png_path'] = isset($data['png_path']) ? $data['png_path'] : null;
        $this->container['png_url'] = isset($data['png_url']) ? $data['png_url'] : null;
        $this->container['reminder_frequency'] = isset($data['reminder_frequency']) ? $data['reminder_frequency'] : null;
        $this->container['reminder_start_epoch_seconds'] = isset($data['reminder_start_epoch_seconds']) ? $data['reminder_start_epoch_seconds'] : null;
        $this->container['reminder_start_time'] = isset($data['reminder_start_time']) ? $data['reminder_start_time'] : null;
        $this->container['reminder_start_time_local'] = isset($data['reminder_start_time_local']) ? $data['reminder_start_time_local'] : null;
        $this->container['reminder_start_time_local_human_formatted'] = isset($data['reminder_start_time_local_human_formatted']) ? $data['reminder_start_time_local_human_formatted'] : null;
        $this->container['repeating'] = isset($data['repeating']) ? $data['repeating'] : null;
        $this->container['second_daily_reminder_time'] = isset($data['second_daily_reminder_time']) ? $data['second_daily_reminder_time'] : null;
        $this->container['second_to_last_value'] = isset($data['second_to_last_value']) ? $data['second_to_last_value'] : null;
        $this->container['start_tracking_date'] = isset($data['start_tracking_date']) ? $data['start_tracking_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['stop_tracking_date'] = isset($data['stop_tracking_date']) ? $data['stop_tracking_date'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['svg_url'] = isset($data['svg_url']) ? $data['svg_url'] : null;
        $this->container['third_to_last_value'] = isset($data['third_to_last_value']) ? $data['third_to_last_value'] : null;
        $this->container['tracking_reminder_id'] = isset($data['tracking_reminder_id']) ? $data['tracking_reminder_id'] : null;
        $this->container['tracking_reminder_image_url'] = isset($data['tracking_reminder_image_url']) ? $data['tracking_reminder_image_url'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_variable_unit_abbreviated_name'] = isset($data['user_variable_unit_abbreviated_name']) ? $data['user_variable_unit_abbreviated_name'] : null;
        $this->container['user_variable_unit_category_id'] = isset($data['user_variable_unit_category_id']) ? $data['user_variable_unit_category_id'] : null;
        $this->container['user_variable_unit_category_name'] = isset($data['user_variable_unit_category_name']) ? $data['user_variable_unit_category_name'] : null;
        $this->container['user_variable_unit_id'] = isset($data['user_variable_unit_id']) ? $data['user_variable_unit_id'] : null;
        $this->container['user_variable_unit_name'] = isset($data['user_variable_unit_name']) ? $data['user_variable_unit_name'] : null;
        $this->container['user_variable_variable_category_id'] = isset($data['user_variable_variable_category_id']) ? $data['user_variable_variable_category_id'] : null;
        $this->container['user_variable_variable_category_name'] = isset($data['user_variable_variable_category_name']) ? $data['user_variable_variable_category_name'] : null;
        $this->container['value_and_frequency_text_description'] = isset($data['value_and_frequency_text_description']) ? $data['value_and_frequency_text_description'] : null;
        $this->container['value_and_frequency_text_description_with_time'] = isset($data['value_and_frequency_text_description_with_time']) ? $data['value_and_frequency_text_description_with_time'] : null;
        $this->container['variable_category_id'] = isset($data['variable_category_id']) ? $data['variable_category_id'] : null;
        $this->container['variable_category_image_url'] = isset($data['variable_category_image_url']) ? $data['variable_category_image_url'] : null;
        $this->container['variable_category_name'] = isset($data['variable_category_name']) ? $data['variable_category_name'] : null;
        $this->container['variable_id'] = isset($data['variable_id']) ? $data['variable_id'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalid_properties[] = "'success' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['success'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets available_units
     * @return \QuantiModo\Client\Model\Unit[]
     */
    public function getAvailableUnits()
    {
        return $this->container['available_units'];
    }

    /**
     * Sets available_units
     * @param \QuantiModo\Client\Model\Unit[] $available_units
     * @return $this
     */
    public function setAvailableUnits($available_units)
    {
        $this->container['available_units'] = $available_units;

        return $this;
    }

    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param string $client_id Example: ionic
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->container['combination_operation'];
    }

    /**
     * Sets combination_operation
     * @param string $combination_operation Example: MEAN
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $this->container['combination_operation'] = $combination_operation;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Example: 2016-12-25 10:28:42
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets data
     * @return \QuantiModo\Client\Model\TrackingRemindersArray
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param \QuantiModo\Client\Model\TrackingRemindersArray $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets unit_abbreviated_name
     * @return string
     */
    public function getUnitAbbreviatedName()
    {
        return $this->container['unit_abbreviated_name'];
    }

    /**
     * Sets unit_abbreviated_name
     * @param string $unit_abbreviated_name Example: mg
     * @return $this
     */
    public function setUnitAbbreviatedName($unit_abbreviated_name)
    {
        $this->container['unit_abbreviated_name'] = $unit_abbreviated_name;

        return $this;
    }

    /**
     * Gets unit_category_id
     * @return int
     */
    public function getUnitCategoryId()
    {
        return $this->container['unit_category_id'];
    }

    /**
     * Sets unit_category_id
     * @param int $unit_category_id Example: 3
     * @return $this
     */
    public function setUnitCategoryId($unit_category_id)
    {
        $this->container['unit_category_id'] = $unit_category_id;

        return $this;
    }

    /**
     * Gets unit_category_name
     * @return string
     */
    public function getUnitCategoryName()
    {
        return $this->container['unit_category_name'];
    }

    /**
     * Sets unit_category_name
     * @param string $unit_category_name Example: Weight
     * @return $this
     */
    public function setUnitCategoryName($unit_category_name)
    {
        $this->container['unit_category_name'] = $unit_category_name;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id Example: 7
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     * @param string $unit_name Example: Milligrams
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets default_value
     * @return double
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     * @param double $default_value Example: 500
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets filling_value
     * @return int
     */
    public function getFillingValue()
    {
        return $this->container['filling_value'];
    }

    /**
     * Sets filling_value
     * @param int $filling_value Example: 0
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        $this->container['filling_value'] = $filling_value;

        return $this;
    }

    /**
     * Gets first_daily_reminder_time
     * @return \DateTime
     */
    public function getFirstDailyReminderTime()
    {
        return $this->container['first_daily_reminder_time'];
    }

    /**
     * Sets first_daily_reminder_time
     * @param \DateTime $first_daily_reminder_time Example: 12:00:00
     * @return $this
     */
    public function setFirstDailyReminderTime($first_daily_reminder_time)
    {
        $this->container['first_daily_reminder_time'] = $first_daily_reminder_time;

        return $this;
    }

    /**
     * Gets frequency_text_description
     * @return string
     */
    public function getFrequencyTextDescription()
    {
        return $this->container['frequency_text_description'];
    }

    /**
     * Sets frequency_text_description
     * @param string $frequency_text_description Example: Daily (ended 2017-02-02)
     * @return $this
     */
    public function setFrequencyTextDescription($frequency_text_description)
    {
        $this->container['frequency_text_description'] = $frequency_text_description;

        return $this;
    }

    /**
     * Gets frequency_text_description_with_time
     * @return \DateTime
     */
    public function getFrequencyTextDescriptionWithTime()
    {
        return $this->container['frequency_text_description_with_time'];
    }

    /**
     * Sets frequency_text_description_with_time
     * @param \DateTime $frequency_text_description_with_time Example: Daily at 09:00 AM (ended 2017-02-02)
     * @return $this
     */
    public function setFrequencyTextDescriptionWithTime($frequency_text_description_with_time)
    {
        $this->container['frequency_text_description_with_time'] = $frequency_text_description_with_time;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Example: 30376
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url Example: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets input_type
     * @return string
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     * @param string $input_type Example: value
     * @return $this
     */
    public function setInputType($input_type)
    {
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets ion_icon
     * @return string
     */
    public function getIonIcon()
    {
        return $this->container['ion_icon'];
    }

    /**
     * Sets ion_icon
     * @param string $ion_icon Example: ion-ios-medkit-outline
     * @return $this
     */
    public function setIonIcon($ion_icon)
    {
        $this->container['ion_icon'] = $ion_icon;

        return $this;
    }

    /**
     * Gets last_value
     * @return double
     */
    public function getLastValue()
    {
        return $this->container['last_value'];
    }

    /**
     * Sets last_value
     * @param double $last_value Example: 500
     * @return $this
     */
    public function setLastValue($last_value)
    {
        $this->container['last_value'] = $last_value;

        return $this;
    }

    /**
     * Gets local_daily_reminder_notification_times
     * @return string[]
     */
    public function getLocalDailyReminderNotificationTimes()
    {
        return $this->container['local_daily_reminder_notification_times'];
    }

    /**
     * Sets local_daily_reminder_notification_times
     * @param string[] $local_daily_reminder_notification_times
     * @return $this
     */
    public function setLocalDailyReminderNotificationTimes($local_daily_reminder_notification_times)
    {
        $this->container['local_daily_reminder_notification_times'] = $local_daily_reminder_notification_times;

        return $this;
    }

    /**
     * Gets local_daily_reminder_notification_times_for_all_reminders
     * @return string[]
     */
    public function getLocalDailyReminderNotificationTimesForAllReminders()
    {
        return $this->container['local_daily_reminder_notification_times_for_all_reminders'];
    }

    /**
     * Sets local_daily_reminder_notification_times_for_all_reminders
     * @param string[] $local_daily_reminder_notification_times_for_all_reminders
     * @return $this
     */
    public function setLocalDailyReminderNotificationTimesForAllReminders($local_daily_reminder_notification_times_for_all_reminders)
    {
        $this->container['local_daily_reminder_notification_times_for_all_reminders'] = $local_daily_reminder_notification_times_for_all_reminders;

        return $this;
    }

    /**
     * Gets manual_tracking
     * @return bool
     */
    public function getManualTracking()
    {
        return $this->container['manual_tracking'];
    }

    /**
     * Sets manual_tracking
     * @param bool $manual_tracking Example: true
     * @return $this
     */
    public function setManualTracking($manual_tracking)
    {
        $this->container['manual_tracking'] = $manual_tracking;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message Message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets minimum_allowed_value
     * @return int
     */
    public function getMinimumAllowedValue()
    {
        return $this->container['minimum_allowed_value'];
    }

    /**
     * Sets minimum_allowed_value
     * @param int $minimum_allowed_value Example: 0
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        $this->container['minimum_allowed_value'] = $minimum_allowed_value;

        return $this;
    }

    /**
     * Gets next_reminder_time_epoch_seconds
     * @return int
     */
    public function getNextReminderTimeEpochSeconds()
    {
        return $this->container['next_reminder_time_epoch_seconds'];
    }

    /**
     * Sets next_reminder_time_epoch_seconds
     * @param int $next_reminder_time_epoch_seconds Example: 1502373600
     * @return $this
     */
    public function setNextReminderTimeEpochSeconds($next_reminder_time_epoch_seconds)
    {
        $this->container['next_reminder_time_epoch_seconds'] = $next_reminder_time_epoch_seconds;

        return $this;
    }

    /**
     * Gets number_of_raw_measurements
     * @return int
     */
    public function getNumberOfRawMeasurements()
    {
        return $this->container['number_of_raw_measurements'];
    }

    /**
     * Sets number_of_raw_measurements
     * @param int $number_of_raw_measurements Example: 791
     * @return $this
     */
    public function setNumberOfRawMeasurements($number_of_raw_measurements)
    {
        $this->container['number_of_raw_measurements'] = $number_of_raw_measurements;

        return $this;
    }

    /**
     * Gets png_path
     * @return string
     */
    public function getPngPath()
    {
        return $this->container['png_path'];
    }

    /**
     * Sets png_path
     * @param string $png_path Example: img/variable_categories/treatments.png
     * @return $this
     */
    public function setPngPath($png_path)
    {
        $this->container['png_path'] = $png_path;

        return $this;
    }

    /**
     * Gets png_url
     * @return string
     */
    public function getPngUrl()
    {
        return $this->container['png_url'];
    }

    /**
     * Sets png_url
     * @param string $png_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/treatments.png
     * @return $this
     */
    public function setPngUrl($png_url)
    {
        $this->container['png_url'] = $png_url;

        return $this;
    }

    /**
     * Gets reminder_frequency
     * @return int
     */
    public function getReminderFrequency()
    {
        return $this->container['reminder_frequency'];
    }

    /**
     * Sets reminder_frequency
     * @param int $reminder_frequency Example: 86400
     * @return $this
     */
    public function setReminderFrequency($reminder_frequency)
    {
        $this->container['reminder_frequency'] = $reminder_frequency;

        return $this;
    }

    /**
     * Gets reminder_start_epoch_seconds
     * @return int
     */
    public function getReminderStartEpochSeconds()
    {
        return $this->container['reminder_start_epoch_seconds'];
    }

    /**
     * Sets reminder_start_epoch_seconds
     * @param int $reminder_start_epoch_seconds Example: 1481896800
     * @return $this
     */
    public function setReminderStartEpochSeconds($reminder_start_epoch_seconds)
    {
        $this->container['reminder_start_epoch_seconds'] = $reminder_start_epoch_seconds;

        return $this;
    }

    /**
     * Gets reminder_start_time
     * @return \DateTime
     */
    public function getReminderStartTime()
    {
        return $this->container['reminder_start_time'];
    }

    /**
     * Sets reminder_start_time
     * @param \DateTime $reminder_start_time Example: 14:00:00
     * @return $this
     */
    public function setReminderStartTime($reminder_start_time)
    {
        $this->container['reminder_start_time'] = $reminder_start_time;

        return $this;
    }

    /**
     * Gets reminder_start_time_local
     * @return \DateTime
     */
    public function getReminderStartTimeLocal()
    {
        return $this->container['reminder_start_time_local'];
    }

    /**
     * Sets reminder_start_time_local
     * @param \DateTime $reminder_start_time_local Example: 09:00:00
     * @return $this
     */
    public function setReminderStartTimeLocal($reminder_start_time_local)
    {
        $this->container['reminder_start_time_local'] = $reminder_start_time_local;

        return $this;
    }

    /**
     * Gets reminder_start_time_local_human_formatted
     * @return \DateTime
     */
    public function getReminderStartTimeLocalHumanFormatted()
    {
        return $this->container['reminder_start_time_local_human_formatted'];
    }

    /**
     * Sets reminder_start_time_local_human_formatted
     * @param \DateTime $reminder_start_time_local_human_formatted Example: 09:00 AM
     * @return $this
     */
    public function setReminderStartTimeLocalHumanFormatted($reminder_start_time_local_human_formatted)
    {
        $this->container['reminder_start_time_local_human_formatted'] = $reminder_start_time_local_human_formatted;

        return $this;
    }

    /**
     * Gets repeating
     * @return bool
     */
    public function getRepeating()
    {
        return $this->container['repeating'];
    }

    /**
     * Sets repeating
     * @param bool $repeating Example: true
     * @return $this
     */
    public function setRepeating($repeating)
    {
        $this->container['repeating'] = $repeating;

        return $this;
    }

    /**
     * Gets second_daily_reminder_time
     * @return \DateTime
     */
    public function getSecondDailyReminderTime()
    {
        return $this->container['second_daily_reminder_time'];
    }

    /**
     * Sets second_daily_reminder_time
     * @param \DateTime $second_daily_reminder_time Example: 14:00:00
     * @return $this
     */
    public function setSecondDailyReminderTime($second_daily_reminder_time)
    {
        $this->container['second_daily_reminder_time'] = $second_daily_reminder_time;

        return $this;
    }

    /**
     * Gets second_to_last_value
     * @return double
     */
    public function getSecondToLastValue()
    {
        return $this->container['second_to_last_value'];
    }

    /**
     * Sets second_to_last_value
     * @param double $second_to_last_value Example: 250
     * @return $this
     */
    public function setSecondToLastValue($second_to_last_value)
    {
        $this->container['second_to_last_value'] = $second_to_last_value;

        return $this;
    }

    /**
     * Gets start_tracking_date
     * @return string
     */
    public function getStartTrackingDate()
    {
        return $this->container['start_tracking_date'];
    }

    /**
     * Sets start_tracking_date
     * @param string $start_tracking_date Example: 2016-12-16
     * @return $this
     */
    public function setStartTrackingDate($start_tracking_date)
    {
        $this->container['start_tracking_date'] = $start_tracking_date;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Status code
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets stop_tracking_date
     * @return string
     */
    public function getStopTrackingDate()
    {
        return $this->container['stop_tracking_date'];
    }

    /**
     * Sets stop_tracking_date
     * @param string $stop_tracking_date Example: 2017-02-02
     * @return $this
     */
    public function setStopTrackingDate($stop_tracking_date)
    {
        $this->container['stop_tracking_date'] = $stop_tracking_date;

        return $this;
    }

    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     * @param bool $success
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets svg_url
     * @return string
     */
    public function getSvgUrl()
    {
        return $this->container['svg_url'];
    }

    /**
     * Sets svg_url
     * @param string $svg_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/treatments.svg
     * @return $this
     */
    public function setSvgUrl($svg_url)
    {
        $this->container['svg_url'] = $svg_url;

        return $this;
    }

    /**
     * Gets third_to_last_value
     * @return double
     */
    public function getThirdToLastValue()
    {
        return $this->container['third_to_last_value'];
    }

    /**
     * Sets third_to_last_value
     * @param double $third_to_last_value Example: 250
     * @return $this
     */
    public function setThirdToLastValue($third_to_last_value)
    {
        $this->container['third_to_last_value'] = $third_to_last_value;

        return $this;
    }

    /**
     * Gets tracking_reminder_id
     * @return int
     */
    public function getTrackingReminderId()
    {
        return $this->container['tracking_reminder_id'];
    }

    /**
     * Sets tracking_reminder_id
     * @param int $tracking_reminder_id Example: 30376
     * @return $this
     */
    public function setTrackingReminderId($tracking_reminder_id)
    {
        $this->container['tracking_reminder_id'] = $tracking_reminder_id;

        return $this;
    }

    /**
     * Gets tracking_reminder_image_url
     * @return string
     */
    public function getTrackingReminderImageUrl()
    {
        return $this->container['tracking_reminder_image_url'];
    }

    /**
     * Sets tracking_reminder_image_url
     * @param string $tracking_reminder_image_url Example: https://rximage.nlm.nih.gov/image/images/gallery/original/55111-0129-60_RXNAVIMAGE10_B051D81E.jpg
     * @return $this
     */
    public function setTrackingReminderImageUrl($tracking_reminder_image_url)
    {
        $this->container['tracking_reminder_image_url'] = $tracking_reminder_image_url;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at Example: 2017-08-09 19:38:05
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Example: 230
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_variable_unit_abbreviated_name
     * @return string
     */
    public function getUserVariableUnitAbbreviatedName()
    {
        return $this->container['user_variable_unit_abbreviated_name'];
    }

    /**
     * Sets user_variable_unit_abbreviated_name
     * @param string $user_variable_unit_abbreviated_name Example: mg
     * @return $this
     */
    public function setUserVariableUnitAbbreviatedName($user_variable_unit_abbreviated_name)
    {
        $this->container['user_variable_unit_abbreviated_name'] = $user_variable_unit_abbreviated_name;

        return $this;
    }

    /**
     * Gets user_variable_unit_category_id
     * @return int
     */
    public function getUserVariableUnitCategoryId()
    {
        return $this->container['user_variable_unit_category_id'];
    }

    /**
     * Sets user_variable_unit_category_id
     * @param int $user_variable_unit_category_id Example: 3
     * @return $this
     */
    public function setUserVariableUnitCategoryId($user_variable_unit_category_id)
    {
        $this->container['user_variable_unit_category_id'] = $user_variable_unit_category_id;

        return $this;
    }

    /**
     * Gets user_variable_unit_category_name
     * @return string
     */
    public function getUserVariableUnitCategoryName()
    {
        return $this->container['user_variable_unit_category_name'];
    }

    /**
     * Sets user_variable_unit_category_name
     * @param string $user_variable_unit_category_name Example: Weight
     * @return $this
     */
    public function setUserVariableUnitCategoryName($user_variable_unit_category_name)
    {
        $this->container['user_variable_unit_category_name'] = $user_variable_unit_category_name;

        return $this;
    }

    /**
     * Gets user_variable_unit_id
     * @return int
     */
    public function getUserVariableUnitId()
    {
        return $this->container['user_variable_unit_id'];
    }

    /**
     * Sets user_variable_unit_id
     * @param int $user_variable_unit_id Example: 7
     * @return $this
     */
    public function setUserVariableUnitId($user_variable_unit_id)
    {
        $this->container['user_variable_unit_id'] = $user_variable_unit_id;

        return $this;
    }

    /**
     * Gets user_variable_unit_name
     * @return string
     */
    public function getUserVariableUnitName()
    {
        return $this->container['user_variable_unit_name'];
    }

    /**
     * Sets user_variable_unit_name
     * @param string $user_variable_unit_name Example: Milligrams
     * @return $this
     */
    public function setUserVariableUnitName($user_variable_unit_name)
    {
        $this->container['user_variable_unit_name'] = $user_variable_unit_name;

        return $this;
    }

    /**
     * Gets user_variable_variable_category_id
     * @return int
     */
    public function getUserVariableVariableCategoryId()
    {
        return $this->container['user_variable_variable_category_id'];
    }

    /**
     * Sets user_variable_variable_category_id
     * @param int $user_variable_variable_category_id Example: 13
     * @return $this
     */
    public function setUserVariableVariableCategoryId($user_variable_variable_category_id)
    {
        $this->container['user_variable_variable_category_id'] = $user_variable_variable_category_id;

        return $this;
    }

    /**
     * Gets user_variable_variable_category_name
     * @return string
     */
    public function getUserVariableVariableCategoryName()
    {
        return $this->container['user_variable_variable_category_name'];
    }

    /**
     * Sets user_variable_variable_category_name
     * @param string $user_variable_variable_category_name Example: Treatments
     * @return $this
     */
    public function setUserVariableVariableCategoryName($user_variable_variable_category_name)
    {
        $this->container['user_variable_variable_category_name'] = $user_variable_variable_category_name;

        return $this;
    }

    /**
     * Gets value_and_frequency_text_description
     * @return string
     */
    public function getValueAndFrequencyTextDescription()
    {
        return $this->container['value_and_frequency_text_description'];
    }

    /**
     * Sets value_and_frequency_text_description
     * @param string $value_and_frequency_text_description Example: 500 mg daily (ended 2017-02-02)
     * @return $this
     */
    public function setValueAndFrequencyTextDescription($value_and_frequency_text_description)
    {
        $this->container['value_and_frequency_text_description'] = $value_and_frequency_text_description;

        return $this;
    }

    /**
     * Gets value_and_frequency_text_description_with_time
     * @return \DateTime
     */
    public function getValueAndFrequencyTextDescriptionWithTime()
    {
        return $this->container['value_and_frequency_text_description_with_time'];
    }

    /**
     * Sets value_and_frequency_text_description_with_time
     * @param \DateTime $value_and_frequency_text_description_with_time Example: 500 mg daily at 09:00 AM (ended 2017-02-02)
     * @return $this
     */
    public function setValueAndFrequencyTextDescriptionWithTime($value_and_frequency_text_description_with_time)
    {
        $this->container['value_and_frequency_text_description_with_time'] = $value_and_frequency_text_description_with_time;

        return $this;
    }

    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->container['variable_category_id'];
    }

    /**
     * Sets variable_category_id
     * @param int $variable_category_id Example: 13
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        $this->container['variable_category_id'] = $variable_category_id;

        return $this;
    }

    /**
     * Gets variable_category_image_url
     * @return string
     */
    public function getVariableCategoryImageUrl()
    {
        return $this->container['variable_category_image_url'];
    }

    /**
     * Sets variable_category_image_url
     * @param string $variable_category_image_url Example: https://maxcdn.icons8.com/Color/PNG/96/Healthcare/pill-96.png
     * @return $this
     */
    public function setVariableCategoryImageUrl($variable_category_image_url)
    {
        $this->container['variable_category_image_url'] = $variable_category_image_url;

        return $this;
    }

    /**
     * Gets variable_category_name
     * @return string
     */
    public function getVariableCategoryName()
    {
        return $this->container['variable_category_name'];
    }

    /**
     * Sets variable_category_name
     * @param string $variable_category_name Example: Treatments
     * @return $this
     */
    public function setVariableCategoryName($variable_category_name)
    {
        $this->container['variable_category_name'] = $variable_category_name;

        return $this;
    }

    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     * @param int $variable_id Example: 5627291
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        $this->container['variable_id'] = $variable_id;

        return $this;
    }

    /**
     * Gets variable_name
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     * @param string $variable_name Example: Acetyl L-Carnitine By MRM
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


