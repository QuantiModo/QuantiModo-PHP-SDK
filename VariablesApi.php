<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class VariablesApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  
	/**
	 * publicVariablesGet
   *
	 * Get public variables
   
	 * @return 
	 */

   public function publicVariablesGet() {

  		// parse inputs
  		$resourcePath = "/public/variables";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * publicVariablesSearchSearchGet
   *
	 * Get top 5 PUBLIC variables with the most correlations
   * search, string: Search query (required)
   * * effectOrCause, string: Allows us to specify which column in the `correlations` table will be searched. Choices are effect or cause. (required)
   * 
	 * @return 
	 */

   public function publicVariablesSearchSearchGet($search, $effectOrCause) {

  		// parse inputs
  		$resourcePath = "/public/variables/search/{search}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($effectOrCause !== null) {
  		  $queryParams['effectOrCause'] = $this->apiClient->toQueryValue($effectOrCause);
  		}
      
      // path params
      if($search !== null) {
  			$resourcePath = str_replace("{" . "search" . "}",
  			                            $this->apiClient->toPathValue($search), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variableCategoriesGet
   *
	 * Get variable categories
   
	 * @return 
	 */

   public function variableCategoriesGet() {

  		// parse inputs
  		$resourcePath = "/variableCategories";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variableUserSettingsPost
   *
	 * Change variable user setting
   * sharingData, array[VariableUserSettings]: Variable user settings data (required)
   * 
	 * @return 
	 */

   public function variableUserSettingsPost($sharingData) {

  		// parse inputs
  		$resourcePath = "/variableUserSettings";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      // body params
      $body = null;
      if (isset($sharingData)) {
        $body = $sharingData;
      }

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variablesGet
   *
	 * Get variables by the category name
   * userId, int: User id (required)
   * * categoryName, string: Category name (required)
   * 
	 * @return 
	 */

   public function variablesGet($userId, $categoryName) {

  		// parse inputs
  		$resourcePath = "/variables";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($userId !== null) {
  		  $queryParams['userId'] = $this->apiClient->toQueryValue($userId);
  		}// query params
      if($categoryName !== null) {
  		  $queryParams['categoryName'] = $this->apiClient->toQueryValue($categoryName);
  		}
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variablesPost
   *
	 * Set variable
   * variableName, array[Variable]: Original name for the variable. (required)
   * 
	 * @return 
	 */

   public function variablesPost($variableName) {

  		// parse inputs
  		$resourcePath = "/variables";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      // body params
      $body = null;
      if (isset($variableName)) {
        $body = $variableName;
      }

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variablesSearchSearchGet
   *
	 * Get variables by search query
   * search, string: Search query (required)
   * * categoryName, string: Filter variables by category name. (required)
   * * source, string: Filter variables by source name. (required)
   * * limit, int: Search limit (required)
   * * offset, int: Search offset (required)
   * 
	 * @return 
	 */

   public function variablesSearchSearchGet($search, $categoryName, $source, $limit, $offset) {

  		// parse inputs
  		$resourcePath = "/variables/search/{search}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($categoryName !== null) {
  		  $queryParams['categoryName'] = $this->apiClient->toQueryValue($categoryName);
  		}// query params
      if($source !== null) {
  		  $queryParams['source'] = $this->apiClient->toQueryValue($source);
  		}// query params
      if($limit !== null) {
  		  $queryParams['limit'] = $this->apiClient->toQueryValue($limit);
  		}// query params
      if($offset !== null) {
  		  $queryParams['offset'] = $this->apiClient->toQueryValue($offset);
  		}
      
      // path params
      if($search !== null) {
  			$resourcePath = str_replace("{" . "search" . "}",
  			                            $this->apiClient->toPathValue($search), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * variablesVariableNameGet
   *
	 * Get info about a variable
   * variableName, string: Variable name (required)
   * * categoryName, string: categoryName` parameter allows us to filter the variables so that only ones from the specified category are returned. (required)
   * 
	 * @return 
	 */

   public function variablesVariableNameGet($variableName, $categoryName) {

  		// parse inputs
  		$resourcePath = "/variables/{variableName}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      // query params
      if($categoryName !== null) {
  		  $queryParams['categoryName'] = $this->apiClient->toQueryValue($categoryName);
  		}
      
      // path params
      if($variableName !== null) {
  			$resourcePath = str_replace("{" . "variableName" . "}",
  			                            $this->apiClient->toPathValue($variableName), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  

}
