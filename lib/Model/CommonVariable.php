<?php
/**
 * CommonVariable
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * CommonVariable Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommonVariable implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommonVariable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'alias' => 'string',
        'available_units' => '\QuantiModo\Client\Model\Unit[]',
        'category' => 'string',
        'cause_only' => 'int',
        'charts' => '\QuantiModo\Client\Model\Chart[]',
        'charts_link_dynamic' => 'string',
        'charts_link_email' => 'string',
        'charts_link_facebook' => 'string',
        'charts_link_google' => 'string',
        'charts_link_static' => 'string',
        'charts_link_twitter' => 'string',
        'child_user_tag_variables' => '\QuantiModo\Client\Model\UserVariableArray',
        'client_id' => 'string',
        'combination_operation' => 'string',
        'common_alias' => 'string',
        'common_tagged_variables' => '\QuantiModo\Client\Model\CommonVariableArray',
        'common_tag_variables' => '\QuantiModo\Client\Model\CommonVariableArray',
        'common_variable_most_common_connector_id' => 'int',
        'common_variable_updated_at' => '\DateTime',
        'created_at' => '\DateTime',
        'data_source' => '\QuantiModo\Client\Model\DataSource',
        'unit_abbreviated_name' => 'string',
        'unit_category_id' => 'int',
        'unit_category_name' => 'string',
        'unit_id' => 'int',
        'unit_name' => 'string',
        'description' => 'string',
        'duration_of_action' => 'int',
        'duration_of_action_in_hours' => 'int',
        'earliest_filling_time' => 'int',
        'earliest_measurement_time' => 'int',
        'earliest_source_time' => 'int',
        'experiment_end_time' => '\DateTime',
        'experiment_end_time_seconds' => '\DateTime',
        'experiment_end_time_string' => '\DateTime',
        'experiment_start_time' => '\DateTime',
        'experiment_start_time_seconds' => '\DateTime',
        'experiment_start_time_string' => '\DateTime',
        'filling_type' => 'string',
        'filling_value' => 'double',
        'id' => 'int',
        'image_url' => 'string',
        'informational_url' => 'string',
        'ingredient_of_user_tag_variables' => '\QuantiModo\Client\Model\UserVariableArray',
        'ingredient_user_tag_variables' => '\QuantiModo\Client\Model\UserVariableArray',
        'input_type' => 'string',
        'ion_icon' => 'string',
        'joined_user_tag_variables' => '\QuantiModo\Client\Model\UserVariableArray',
        'joined_variables' => '\QuantiModo\Client\Model\CommonVariable[]',
        'join_with' => 'string',
        'kurtosis' => 'double',
        'last_original_unit_id' => 'int',
        'last_original_value' => 'double',
        'last_processed_daily_value' => 'double',
        'last_source' => 'int',
        'last_successful_update_time' => '\DateTime',
        'last_unit' => 'string',
        'last_unit_id' => 'int',
        'last_value' => 'int',
        'latest_filling_time' => 'int',
        'latest_measurement_time' => 'int',
        'latest_source_time' => 'int',
        'latest_user_measurement_time' => 'int',
        'manual_tracking' => 'bool',
        'maximum_allowed_value' => 'double',
        'maximum_recorded_value' => 'double',
        'mean' => 'double',
        'measurements_at_last_analysis' => 'int',
        'median' => 'double',
        'minimum_allowed_value' => 'double',
        'minimum_recorded_value' => 'double',
        'most_common_connector_id' => 'int',
        'most_common_original_unit_id' => 'int',
        'most_common_unit' => 'string',
        'most_common_value' => 'int',
        'name' => 'string',
        'number_of_aggregate_correlations_as_cause' => 'int',
        'number_of_aggregate_correlations_as_effect' => 'int',
        'number_of_changes' => 'int',
        'number_of_correlations' => 'int',
        'number_of_measurements' => 'int',
        'number_of_processed_daily_measurements' => 'int',
        'number_of_raw_measurements' => 'int',
        'number_of_tracking_reminders' => 'int',
        'number_of_unique_daily_values' => 'int',
        'number_of_unique_values' => 'int',
        'number_of_user_correlations_as_cause' => 'int',
        'number_of_user_correlations_as_effect' => 'int',
        'number_of_user_variables' => 'int',
        'onset_delay' => 'int',
        'onset_delay_in_hours' => 'int',
        'outcome' => 'int',
        'outcome_of_interest' => 'int',
        'parent' => 'int',
        'parent_id' => 'string',
        'parent_user_tag_variables' => '\QuantiModo\Client\Model\UserVariableArray',
        'png_path' => 'string',
        'png_url' => 'string',
        'predictor_of_interest' => 'int',
        'price' => 'string',
        'product_url' => 'string',
        'public' => 'bool',
        'raw_measurements_at_last_analysis' => 'int',
        'second_most_common_value' => 'double',
        'second_to_last_value' => 'double',
        'share_user_measurements' => 'bool',
        'skewness' => 'double',
        'sources' => 'string',
        'standard_deviation' => 'double',
        'status' => 'string',
        'subtitle' => 'string',
        'sub_variables' => '\QuantiModo\Client\Model\CommonVariable[]',
        'svg_url' => 'string',
        'third_most_common_value' => 'double',
        'third_to_last_value' => 'double',
        'upc' => 'string',
        'updated' => 'int',
        'updated_at' => '\DateTime',
        'user_id' => 'int',
        'valence' => 'string',
        'variable_category_id' => 'int',
        'variable_category_image_url' => 'string',
        'variable_category_name' => 'string',
        'variable_filling_value' => 'double',
        'variable_id' => 'int',
        'variable_name' => 'string',
        'variance' => 'double',
        'wikipedia_title' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'alias' => null,
        'available_units' => null,
        'category' => null,
        'cause_only' => null,
        'charts' => null,
        'charts_link_dynamic' => null,
        'charts_link_email' => null,
        'charts_link_facebook' => null,
        'charts_link_google' => null,
        'charts_link_static' => null,
        'charts_link_twitter' => null,
        'child_user_tag_variables' => null,
        'client_id' => null,
        'combination_operation' => null,
        'common_alias' => null,
        'common_tagged_variables' => null,
        'common_tag_variables' => null,
        'common_variable_most_common_connector_id' => null,
        'common_variable_updated_at' => 'date-time',
        'created_at' => 'date-time',
        'data_source' => null,
        'unit_abbreviated_name' => null,
        'unit_category_id' => null,
        'unit_category_name' => null,
        'unit_id' => null,
        'unit_name' => null,
        'description' => null,
        'duration_of_action' => null,
        'duration_of_action_in_hours' => null,
        'earliest_filling_time' => null,
        'earliest_measurement_time' => null,
        'earliest_source_time' => null,
        'experiment_end_time' => 'date-time',
        'experiment_end_time_seconds' => 'date-time',
        'experiment_end_time_string' => 'date-time',
        'experiment_start_time' => 'date-time',
        'experiment_start_time_seconds' => 'date-time',
        'experiment_start_time_string' => 'date-time',
        'filling_type' => null,
        'filling_value' => 'double',
        'id' => null,
        'image_url' => null,
        'informational_url' => null,
        'ingredient_of_user_tag_variables' => null,
        'ingredient_user_tag_variables' => null,
        'input_type' => null,
        'ion_icon' => null,
        'joined_user_tag_variables' => null,
        'joined_variables' => null,
        'join_with' => null,
        'kurtosis' => 'double',
        'last_original_unit_id' => null,
        'last_original_value' => 'double',
        'last_processed_daily_value' => 'double',
        'last_source' => null,
        'last_successful_update_time' => 'date-time',
        'last_unit' => null,
        'last_unit_id' => null,
        'last_value' => null,
        'latest_filling_time' => null,
        'latest_measurement_time' => null,
        'latest_source_time' => null,
        'latest_user_measurement_time' => null,
        'manual_tracking' => null,
        'maximum_allowed_value' => 'double',
        'maximum_recorded_value' => 'double',
        'mean' => 'double',
        'measurements_at_last_analysis' => null,
        'median' => 'double',
        'minimum_allowed_value' => 'double',
        'minimum_recorded_value' => 'double',
        'most_common_connector_id' => null,
        'most_common_original_unit_id' => null,
        'most_common_unit' => null,
        'most_common_value' => null,
        'name' => null,
        'number_of_aggregate_correlations_as_cause' => null,
        'number_of_aggregate_correlations_as_effect' => null,
        'number_of_changes' => null,
        'number_of_correlations' => null,
        'number_of_measurements' => null,
        'number_of_processed_daily_measurements' => null,
        'number_of_raw_measurements' => null,
        'number_of_tracking_reminders' => null,
        'number_of_unique_daily_values' => null,
        'number_of_unique_values' => null,
        'number_of_user_correlations_as_cause' => null,
        'number_of_user_correlations_as_effect' => null,
        'number_of_user_variables' => null,
        'onset_delay' => null,
        'onset_delay_in_hours' => null,
        'outcome' => null,
        'outcome_of_interest' => null,
        'parent' => null,
        'parent_id' => null,
        'parent_user_tag_variables' => null,
        'png_path' => null,
        'png_url' => null,
        'predictor_of_interest' => null,
        'price' => null,
        'product_url' => null,
        'public' => null,
        'raw_measurements_at_last_analysis' => null,
        'second_most_common_value' => 'double',
        'second_to_last_value' => 'double',
        'share_user_measurements' => null,
        'skewness' => 'double',
        'sources' => null,
        'standard_deviation' => 'double',
        'status' => null,
        'subtitle' => null,
        'sub_variables' => null,
        'svg_url' => null,
        'third_most_common_value' => 'double',
        'third_to_last_value' => 'double',
        'upc' => null,
        'updated' => null,
        'updated_at' => 'date-time',
        'user_id' => null,
        'valence' => null,
        'variable_category_id' => null,
        'variable_category_image_url' => null,
        'variable_category_name' => null,
        'variable_filling_value' => 'double',
        'variable_id' => null,
        'variable_name' => null,
        'variance' => 'double',
        'wikipedia_title' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'alias' => 'alias',
        'available_units' => 'availableUnits',
        'category' => 'category',
        'cause_only' => 'causeOnly',
        'charts' => 'charts',
        'charts_link_dynamic' => 'chartsLinkDynamic',
        'charts_link_email' => 'chartsLinkEmail',
        'charts_link_facebook' => 'chartsLinkFacebook',
        'charts_link_google' => 'chartsLinkGoogle',
        'charts_link_static' => 'chartsLinkStatic',
        'charts_link_twitter' => 'chartsLinkTwitter',
        'child_user_tag_variables' => 'childUserTagVariables',
        'client_id' => 'clientId',
        'combination_operation' => 'combinationOperation',
        'common_alias' => 'commonAlias',
        'common_tagged_variables' => 'commonTaggedVariables',
        'common_tag_variables' => 'commonTagVariables',
        'common_variable_most_common_connector_id' => 'commonVariableMostCommonConnectorId',
        'common_variable_updated_at' => 'commonVariableUpdatedAt',
        'created_at' => 'createdAt',
        'data_source' => 'dataSource',
        'unit_abbreviated_name' => 'unitAbbreviatedName',
        'unit_category_id' => 'unitCategoryId',
        'unit_category_name' => 'unitCategoryName',
        'unit_id' => 'unitId',
        'unit_name' => 'unitName',
        'description' => 'description',
        'duration_of_action' => 'durationOfAction',
        'duration_of_action_in_hours' => 'durationOfActionInHours',
        'earliest_filling_time' => 'earliestFillingTime',
        'earliest_measurement_time' => 'earliestMeasurementTime',
        'earliest_source_time' => 'earliestSourceTime',
        'experiment_end_time' => 'experimentEndTime',
        'experiment_end_time_seconds' => 'experimentEndTimeSeconds',
        'experiment_end_time_string' => 'experimentEndTimeString',
        'experiment_start_time' => 'experimentStartTime',
        'experiment_start_time_seconds' => 'experimentStartTimeSeconds',
        'experiment_start_time_string' => 'experimentStartTimeString',
        'filling_type' => 'fillingType',
        'filling_value' => 'fillingValue',
        'id' => 'id',
        'image_url' => 'imageUrl',
        'informational_url' => 'informationalUrl',
        'ingredient_of_user_tag_variables' => 'ingredientOfUserTagVariables',
        'ingredient_user_tag_variables' => 'ingredientUserTagVariables',
        'input_type' => 'inputType',
        'ion_icon' => 'ionIcon',
        'joined_user_tag_variables' => 'joinedUserTagVariables',
        'joined_variables' => 'joinedVariables',
        'join_with' => 'joinWith',
        'kurtosis' => 'kurtosis',
        'last_original_unit_id' => 'lastOriginalUnitId',
        'last_original_value' => 'lastOriginalValue',
        'last_processed_daily_value' => 'lastProcessedDailyValue',
        'last_source' => 'lastSource',
        'last_successful_update_time' => 'lastSuccessfulUpdateTime',
        'last_unit' => 'lastUnit',
        'last_unit_id' => 'lastUnitId',
        'last_value' => 'lastValue',
        'latest_filling_time' => 'latestFillingTime',
        'latest_measurement_time' => 'latestMeasurementTime',
        'latest_source_time' => 'latestSourceTime',
        'latest_user_measurement_time' => 'latestUserMeasurementTime',
        'manual_tracking' => 'manualTracking',
        'maximum_allowed_value' => 'maximumAllowedValue',
        'maximum_recorded_value' => 'maximumRecordedValue',
        'mean' => 'mean',
        'measurements_at_last_analysis' => 'measurementsAtLastAnalysis',
        'median' => 'median',
        'minimum_allowed_value' => 'minimumAllowedValue',
        'minimum_recorded_value' => 'minimumRecordedValue',
        'most_common_connector_id' => 'mostCommonConnectorId',
        'most_common_original_unit_id' => 'mostCommonOriginalUnitId',
        'most_common_unit' => 'mostCommonUnit',
        'most_common_value' => 'mostCommonValue',
        'name' => 'name',
        'number_of_aggregate_correlations_as_cause' => 'numberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'numberOfAggregateCorrelationsAsEffect',
        'number_of_changes' => 'numberOfChanges',
        'number_of_correlations' => 'numberOfCorrelations',
        'number_of_measurements' => 'numberOfMeasurements',
        'number_of_processed_daily_measurements' => 'numberOfProcessedDailyMeasurements',
        'number_of_raw_measurements' => 'numberOfRawMeasurements',
        'number_of_tracking_reminders' => 'numberOfTrackingReminders',
        'number_of_unique_daily_values' => 'numberOfUniqueDailyValues',
        'number_of_unique_values' => 'numberOfUniqueValues',
        'number_of_user_correlations_as_cause' => 'numberOfUserCorrelationsAsCause',
        'number_of_user_correlations_as_effect' => 'numberOfUserCorrelationsAsEffect',
        'number_of_user_variables' => 'numberOfUserVariables',
        'onset_delay' => 'onsetDelay',
        'onset_delay_in_hours' => 'onsetDelayInHours',
        'outcome' => 'outcome',
        'outcome_of_interest' => 'outcomeOfInterest',
        'parent' => 'parent',
        'parent_id' => 'parentId',
        'parent_user_tag_variables' => 'parentUserTagVariables',
        'png_path' => 'pngPath',
        'png_url' => 'pngUrl',
        'predictor_of_interest' => 'predictorOfInterest',
        'price' => 'price',
        'product_url' => 'productUrl',
        'public' => 'public',
        'raw_measurements_at_last_analysis' => 'rawMeasurementsAtLastAnalysis',
        'second_most_common_value' => 'secondMostCommonValue',
        'second_to_last_value' => 'secondToLastValue',
        'share_user_measurements' => 'shareUserMeasurements',
        'skewness' => 'skewness',
        'sources' => 'sources',
        'standard_deviation' => 'standardDeviation',
        'status' => 'status',
        'subtitle' => 'subtitle',
        'sub_variables' => 'subVariables',
        'svg_url' => 'svgUrl',
        'third_most_common_value' => 'thirdMostCommonValue',
        'third_to_last_value' => 'thirdToLastValue',
        'upc' => 'upc',
        'updated' => 'updated',
        'updated_at' => 'updatedAt',
        'user_id' => 'userId',
        'valence' => 'valence',
        'variable_category_id' => 'variableCategoryId',
        'variable_category_image_url' => 'variableCategoryImageUrl',
        'variable_category_name' => 'variableCategoryName',
        'variable_filling_value' => 'variableFillingValue',
        'variable_id' => 'variableId',
        'variable_name' => 'variableName',
        'variance' => 'variance',
        'wikipedia_title' => 'wikipediaTitle'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'alias' => 'setAlias',
        'available_units' => 'setAvailableUnits',
        'category' => 'setCategory',
        'cause_only' => 'setCauseOnly',
        'charts' => 'setCharts',
        'charts_link_dynamic' => 'setChartsLinkDynamic',
        'charts_link_email' => 'setChartsLinkEmail',
        'charts_link_facebook' => 'setChartsLinkFacebook',
        'charts_link_google' => 'setChartsLinkGoogle',
        'charts_link_static' => 'setChartsLinkStatic',
        'charts_link_twitter' => 'setChartsLinkTwitter',
        'child_user_tag_variables' => 'setChildUserTagVariables',
        'client_id' => 'setClientId',
        'combination_operation' => 'setCombinationOperation',
        'common_alias' => 'setCommonAlias',
        'common_tagged_variables' => 'setCommonTaggedVariables',
        'common_tag_variables' => 'setCommonTagVariables',
        'common_variable_most_common_connector_id' => 'setCommonVariableMostCommonConnectorId',
        'common_variable_updated_at' => 'setCommonVariableUpdatedAt',
        'created_at' => 'setCreatedAt',
        'data_source' => 'setDataSource',
        'unit_abbreviated_name' => 'setUnitAbbreviatedName',
        'unit_category_id' => 'setUnitCategoryId',
        'unit_category_name' => 'setUnitCategoryName',
        'unit_id' => 'setUnitId',
        'unit_name' => 'setUnitName',
        'description' => 'setDescription',
        'duration_of_action' => 'setDurationOfAction',
        'duration_of_action_in_hours' => 'setDurationOfActionInHours',
        'earliest_filling_time' => 'setEarliestFillingTime',
        'earliest_measurement_time' => 'setEarliestMeasurementTime',
        'earliest_source_time' => 'setEarliestSourceTime',
        'experiment_end_time' => 'setExperimentEndTime',
        'experiment_end_time_seconds' => 'setExperimentEndTimeSeconds',
        'experiment_end_time_string' => 'setExperimentEndTimeString',
        'experiment_start_time' => 'setExperimentStartTime',
        'experiment_start_time_seconds' => 'setExperimentStartTimeSeconds',
        'experiment_start_time_string' => 'setExperimentStartTimeString',
        'filling_type' => 'setFillingType',
        'filling_value' => 'setFillingValue',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'informational_url' => 'setInformationalUrl',
        'ingredient_of_user_tag_variables' => 'setIngredientOfUserTagVariables',
        'ingredient_user_tag_variables' => 'setIngredientUserTagVariables',
        'input_type' => 'setInputType',
        'ion_icon' => 'setIonIcon',
        'joined_user_tag_variables' => 'setJoinedUserTagVariables',
        'joined_variables' => 'setJoinedVariables',
        'join_with' => 'setJoinWith',
        'kurtosis' => 'setKurtosis',
        'last_original_unit_id' => 'setLastOriginalUnitId',
        'last_original_value' => 'setLastOriginalValue',
        'last_processed_daily_value' => 'setLastProcessedDailyValue',
        'last_source' => 'setLastSource',
        'last_successful_update_time' => 'setLastSuccessfulUpdateTime',
        'last_unit' => 'setLastUnit',
        'last_unit_id' => 'setLastUnitId',
        'last_value' => 'setLastValue',
        'latest_filling_time' => 'setLatestFillingTime',
        'latest_measurement_time' => 'setLatestMeasurementTime',
        'latest_source_time' => 'setLatestSourceTime',
        'latest_user_measurement_time' => 'setLatestUserMeasurementTime',
        'manual_tracking' => 'setManualTracking',
        'maximum_allowed_value' => 'setMaximumAllowedValue',
        'maximum_recorded_value' => 'setMaximumRecordedValue',
        'mean' => 'setMean',
        'measurements_at_last_analysis' => 'setMeasurementsAtLastAnalysis',
        'median' => 'setMedian',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'minimum_recorded_value' => 'setMinimumRecordedValue',
        'most_common_connector_id' => 'setMostCommonConnectorId',
        'most_common_original_unit_id' => 'setMostCommonOriginalUnitId',
        'most_common_unit' => 'setMostCommonUnit',
        'most_common_value' => 'setMostCommonValue',
        'name' => 'setName',
        'number_of_aggregate_correlations_as_cause' => 'setNumberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'setNumberOfAggregateCorrelationsAsEffect',
        'number_of_changes' => 'setNumberOfChanges',
        'number_of_correlations' => 'setNumberOfCorrelations',
        'number_of_measurements' => 'setNumberOfMeasurements',
        'number_of_processed_daily_measurements' => 'setNumberOfProcessedDailyMeasurements',
        'number_of_raw_measurements' => 'setNumberOfRawMeasurements',
        'number_of_tracking_reminders' => 'setNumberOfTrackingReminders',
        'number_of_unique_daily_values' => 'setNumberOfUniqueDailyValues',
        'number_of_unique_values' => 'setNumberOfUniqueValues',
        'number_of_user_correlations_as_cause' => 'setNumberOfUserCorrelationsAsCause',
        'number_of_user_correlations_as_effect' => 'setNumberOfUserCorrelationsAsEffect',
        'number_of_user_variables' => 'setNumberOfUserVariables',
        'onset_delay' => 'setOnsetDelay',
        'onset_delay_in_hours' => 'setOnsetDelayInHours',
        'outcome' => 'setOutcome',
        'outcome_of_interest' => 'setOutcomeOfInterest',
        'parent' => 'setParent',
        'parent_id' => 'setParentId',
        'parent_user_tag_variables' => 'setParentUserTagVariables',
        'png_path' => 'setPngPath',
        'png_url' => 'setPngUrl',
        'predictor_of_interest' => 'setPredictorOfInterest',
        'price' => 'setPrice',
        'product_url' => 'setProductUrl',
        'public' => 'setPublic',
        'raw_measurements_at_last_analysis' => 'setRawMeasurementsAtLastAnalysis',
        'second_most_common_value' => 'setSecondMostCommonValue',
        'second_to_last_value' => 'setSecondToLastValue',
        'share_user_measurements' => 'setShareUserMeasurements',
        'skewness' => 'setSkewness',
        'sources' => 'setSources',
        'standard_deviation' => 'setStandardDeviation',
        'status' => 'setStatus',
        'subtitle' => 'setSubtitle',
        'sub_variables' => 'setSubVariables',
        'svg_url' => 'setSvgUrl',
        'third_most_common_value' => 'setThirdMostCommonValue',
        'third_to_last_value' => 'setThirdToLastValue',
        'upc' => 'setUpc',
        'updated' => 'setUpdated',
        'updated_at' => 'setUpdatedAt',
        'user_id' => 'setUserId',
        'valence' => 'setValence',
        'variable_category_id' => 'setVariableCategoryId',
        'variable_category_image_url' => 'setVariableCategoryImageUrl',
        'variable_category_name' => 'setVariableCategoryName',
        'variable_filling_value' => 'setVariableFillingValue',
        'variable_id' => 'setVariableId',
        'variable_name' => 'setVariableName',
        'variance' => 'setVariance',
        'wikipedia_title' => 'setWikipediaTitle'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'alias' => 'getAlias',
        'available_units' => 'getAvailableUnits',
        'category' => 'getCategory',
        'cause_only' => 'getCauseOnly',
        'charts' => 'getCharts',
        'charts_link_dynamic' => 'getChartsLinkDynamic',
        'charts_link_email' => 'getChartsLinkEmail',
        'charts_link_facebook' => 'getChartsLinkFacebook',
        'charts_link_google' => 'getChartsLinkGoogle',
        'charts_link_static' => 'getChartsLinkStatic',
        'charts_link_twitter' => 'getChartsLinkTwitter',
        'child_user_tag_variables' => 'getChildUserTagVariables',
        'client_id' => 'getClientId',
        'combination_operation' => 'getCombinationOperation',
        'common_alias' => 'getCommonAlias',
        'common_tagged_variables' => 'getCommonTaggedVariables',
        'common_tag_variables' => 'getCommonTagVariables',
        'common_variable_most_common_connector_id' => 'getCommonVariableMostCommonConnectorId',
        'common_variable_updated_at' => 'getCommonVariableUpdatedAt',
        'created_at' => 'getCreatedAt',
        'data_source' => 'getDataSource',
        'unit_abbreviated_name' => 'getUnitAbbreviatedName',
        'unit_category_id' => 'getUnitCategoryId',
        'unit_category_name' => 'getUnitCategoryName',
        'unit_id' => 'getUnitId',
        'unit_name' => 'getUnitName',
        'description' => 'getDescription',
        'duration_of_action' => 'getDurationOfAction',
        'duration_of_action_in_hours' => 'getDurationOfActionInHours',
        'earliest_filling_time' => 'getEarliestFillingTime',
        'earliest_measurement_time' => 'getEarliestMeasurementTime',
        'earliest_source_time' => 'getEarliestSourceTime',
        'experiment_end_time' => 'getExperimentEndTime',
        'experiment_end_time_seconds' => 'getExperimentEndTimeSeconds',
        'experiment_end_time_string' => 'getExperimentEndTimeString',
        'experiment_start_time' => 'getExperimentStartTime',
        'experiment_start_time_seconds' => 'getExperimentStartTimeSeconds',
        'experiment_start_time_string' => 'getExperimentStartTimeString',
        'filling_type' => 'getFillingType',
        'filling_value' => 'getFillingValue',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'informational_url' => 'getInformationalUrl',
        'ingredient_of_user_tag_variables' => 'getIngredientOfUserTagVariables',
        'ingredient_user_tag_variables' => 'getIngredientUserTagVariables',
        'input_type' => 'getInputType',
        'ion_icon' => 'getIonIcon',
        'joined_user_tag_variables' => 'getJoinedUserTagVariables',
        'joined_variables' => 'getJoinedVariables',
        'join_with' => 'getJoinWith',
        'kurtosis' => 'getKurtosis',
        'last_original_unit_id' => 'getLastOriginalUnitId',
        'last_original_value' => 'getLastOriginalValue',
        'last_processed_daily_value' => 'getLastProcessedDailyValue',
        'last_source' => 'getLastSource',
        'last_successful_update_time' => 'getLastSuccessfulUpdateTime',
        'last_unit' => 'getLastUnit',
        'last_unit_id' => 'getLastUnitId',
        'last_value' => 'getLastValue',
        'latest_filling_time' => 'getLatestFillingTime',
        'latest_measurement_time' => 'getLatestMeasurementTime',
        'latest_source_time' => 'getLatestSourceTime',
        'latest_user_measurement_time' => 'getLatestUserMeasurementTime',
        'manual_tracking' => 'getManualTracking',
        'maximum_allowed_value' => 'getMaximumAllowedValue',
        'maximum_recorded_value' => 'getMaximumRecordedValue',
        'mean' => 'getMean',
        'measurements_at_last_analysis' => 'getMeasurementsAtLastAnalysis',
        'median' => 'getMedian',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'minimum_recorded_value' => 'getMinimumRecordedValue',
        'most_common_connector_id' => 'getMostCommonConnectorId',
        'most_common_original_unit_id' => 'getMostCommonOriginalUnitId',
        'most_common_unit' => 'getMostCommonUnit',
        'most_common_value' => 'getMostCommonValue',
        'name' => 'getName',
        'number_of_aggregate_correlations_as_cause' => 'getNumberOfAggregateCorrelationsAsCause',
        'number_of_aggregate_correlations_as_effect' => 'getNumberOfAggregateCorrelationsAsEffect',
        'number_of_changes' => 'getNumberOfChanges',
        'number_of_correlations' => 'getNumberOfCorrelations',
        'number_of_measurements' => 'getNumberOfMeasurements',
        'number_of_processed_daily_measurements' => 'getNumberOfProcessedDailyMeasurements',
        'number_of_raw_measurements' => 'getNumberOfRawMeasurements',
        'number_of_tracking_reminders' => 'getNumberOfTrackingReminders',
        'number_of_unique_daily_values' => 'getNumberOfUniqueDailyValues',
        'number_of_unique_values' => 'getNumberOfUniqueValues',
        'number_of_user_correlations_as_cause' => 'getNumberOfUserCorrelationsAsCause',
        'number_of_user_correlations_as_effect' => 'getNumberOfUserCorrelationsAsEffect',
        'number_of_user_variables' => 'getNumberOfUserVariables',
        'onset_delay' => 'getOnsetDelay',
        'onset_delay_in_hours' => 'getOnsetDelayInHours',
        'outcome' => 'getOutcome',
        'outcome_of_interest' => 'getOutcomeOfInterest',
        'parent' => 'getParent',
        'parent_id' => 'getParentId',
        'parent_user_tag_variables' => 'getParentUserTagVariables',
        'png_path' => 'getPngPath',
        'png_url' => 'getPngUrl',
        'predictor_of_interest' => 'getPredictorOfInterest',
        'price' => 'getPrice',
        'product_url' => 'getProductUrl',
        'public' => 'getPublic',
        'raw_measurements_at_last_analysis' => 'getRawMeasurementsAtLastAnalysis',
        'second_most_common_value' => 'getSecondMostCommonValue',
        'second_to_last_value' => 'getSecondToLastValue',
        'share_user_measurements' => 'getShareUserMeasurements',
        'skewness' => 'getSkewness',
        'sources' => 'getSources',
        'standard_deviation' => 'getStandardDeviation',
        'status' => 'getStatus',
        'subtitle' => 'getSubtitle',
        'sub_variables' => 'getSubVariables',
        'svg_url' => 'getSvgUrl',
        'third_most_common_value' => 'getThirdMostCommonValue',
        'third_to_last_value' => 'getThirdToLastValue',
        'upc' => 'getUpc',
        'updated' => 'getUpdated',
        'updated_at' => 'getUpdatedAt',
        'user_id' => 'getUserId',
        'valence' => 'getValence',
        'variable_category_id' => 'getVariableCategoryId',
        'variable_category_image_url' => 'getVariableCategoryImageUrl',
        'variable_category_name' => 'getVariableCategoryName',
        'variable_filling_value' => 'getVariableFillingValue',
        'variable_id' => 'getVariableId',
        'variable_name' => 'getVariableName',
        'variance' => 'getVariance',
        'wikipedia_title' => 'getWikipediaTitle'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const COMBINATION_OPERATION_MEAN = 'MEAN';
    const COMBINATION_OPERATION_SUM = 'SUM';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCombinationOperationAllowableValues()
    {
        return [
            self::COMBINATION_OPERATION_MEAN,
            self::COMBINATION_OPERATION_SUM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alias'] = isset($data['alias']) ? $data['alias'] : null;
        $this->container['available_units'] = isset($data['available_units']) ? $data['available_units'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['cause_only'] = isset($data['cause_only']) ? $data['cause_only'] : null;
        $this->container['charts'] = isset($data['charts']) ? $data['charts'] : null;
        $this->container['charts_link_dynamic'] = isset($data['charts_link_dynamic']) ? $data['charts_link_dynamic'] : null;
        $this->container['charts_link_email'] = isset($data['charts_link_email']) ? $data['charts_link_email'] : null;
        $this->container['charts_link_facebook'] = isset($data['charts_link_facebook']) ? $data['charts_link_facebook'] : null;
        $this->container['charts_link_google'] = isset($data['charts_link_google']) ? $data['charts_link_google'] : null;
        $this->container['charts_link_static'] = isset($data['charts_link_static']) ? $data['charts_link_static'] : null;
        $this->container['charts_link_twitter'] = isset($data['charts_link_twitter']) ? $data['charts_link_twitter'] : null;
        $this->container['child_user_tag_variables'] = isset($data['child_user_tag_variables']) ? $data['child_user_tag_variables'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['combination_operation'] = isset($data['combination_operation']) ? $data['combination_operation'] : null;
        $this->container['common_alias'] = isset($data['common_alias']) ? $data['common_alias'] : null;
        $this->container['common_tagged_variables'] = isset($data['common_tagged_variables']) ? $data['common_tagged_variables'] : null;
        $this->container['common_tag_variables'] = isset($data['common_tag_variables']) ? $data['common_tag_variables'] : null;
        $this->container['common_variable_most_common_connector_id'] = isset($data['common_variable_most_common_connector_id']) ? $data['common_variable_most_common_connector_id'] : null;
        $this->container['common_variable_updated_at'] = isset($data['common_variable_updated_at']) ? $data['common_variable_updated_at'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['data_source'] = isset($data['data_source']) ? $data['data_source'] : null;
        $this->container['unit_abbreviated_name'] = isset($data['unit_abbreviated_name']) ? $data['unit_abbreviated_name'] : null;
        $this->container['unit_category_id'] = isset($data['unit_category_id']) ? $data['unit_category_id'] : null;
        $this->container['unit_category_name'] = isset($data['unit_category_name']) ? $data['unit_category_name'] : null;
        $this->container['unit_id'] = isset($data['unit_id']) ? $data['unit_id'] : null;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['duration_of_action'] = isset($data['duration_of_action']) ? $data['duration_of_action'] : null;
        $this->container['duration_of_action_in_hours'] = isset($data['duration_of_action_in_hours']) ? $data['duration_of_action_in_hours'] : null;
        $this->container['earliest_filling_time'] = isset($data['earliest_filling_time']) ? $data['earliest_filling_time'] : null;
        $this->container['earliest_measurement_time'] = isset($data['earliest_measurement_time']) ? $data['earliest_measurement_time'] : null;
        $this->container['earliest_source_time'] = isset($data['earliest_source_time']) ? $data['earliest_source_time'] : null;
        $this->container['experiment_end_time'] = isset($data['experiment_end_time']) ? $data['experiment_end_time'] : null;
        $this->container['experiment_end_time_seconds'] = isset($data['experiment_end_time_seconds']) ? $data['experiment_end_time_seconds'] : null;
        $this->container['experiment_end_time_string'] = isset($data['experiment_end_time_string']) ? $data['experiment_end_time_string'] : null;
        $this->container['experiment_start_time'] = isset($data['experiment_start_time']) ? $data['experiment_start_time'] : null;
        $this->container['experiment_start_time_seconds'] = isset($data['experiment_start_time_seconds']) ? $data['experiment_start_time_seconds'] : null;
        $this->container['experiment_start_time_string'] = isset($data['experiment_start_time_string']) ? $data['experiment_start_time_string'] : null;
        $this->container['filling_type'] = isset($data['filling_type']) ? $data['filling_type'] : null;
        $this->container['filling_value'] = isset($data['filling_value']) ? $data['filling_value'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['informational_url'] = isset($data['informational_url']) ? $data['informational_url'] : null;
        $this->container['ingredient_of_user_tag_variables'] = isset($data['ingredient_of_user_tag_variables']) ? $data['ingredient_of_user_tag_variables'] : null;
        $this->container['ingredient_user_tag_variables'] = isset($data['ingredient_user_tag_variables']) ? $data['ingredient_user_tag_variables'] : null;
        $this->container['input_type'] = isset($data['input_type']) ? $data['input_type'] : null;
        $this->container['ion_icon'] = isset($data['ion_icon']) ? $data['ion_icon'] : null;
        $this->container['joined_user_tag_variables'] = isset($data['joined_user_tag_variables']) ? $data['joined_user_tag_variables'] : null;
        $this->container['joined_variables'] = isset($data['joined_variables']) ? $data['joined_variables'] : null;
        $this->container['join_with'] = isset($data['join_with']) ? $data['join_with'] : null;
        $this->container['kurtosis'] = isset($data['kurtosis']) ? $data['kurtosis'] : null;
        $this->container['last_original_unit_id'] = isset($data['last_original_unit_id']) ? $data['last_original_unit_id'] : null;
        $this->container['last_original_value'] = isset($data['last_original_value']) ? $data['last_original_value'] : null;
        $this->container['last_processed_daily_value'] = isset($data['last_processed_daily_value']) ? $data['last_processed_daily_value'] : null;
        $this->container['last_source'] = isset($data['last_source']) ? $data['last_source'] : null;
        $this->container['last_successful_update_time'] = isset($data['last_successful_update_time']) ? $data['last_successful_update_time'] : null;
        $this->container['last_unit'] = isset($data['last_unit']) ? $data['last_unit'] : null;
        $this->container['last_unit_id'] = isset($data['last_unit_id']) ? $data['last_unit_id'] : null;
        $this->container['last_value'] = isset($data['last_value']) ? $data['last_value'] : null;
        $this->container['latest_filling_time'] = isset($data['latest_filling_time']) ? $data['latest_filling_time'] : null;
        $this->container['latest_measurement_time'] = isset($data['latest_measurement_time']) ? $data['latest_measurement_time'] : null;
        $this->container['latest_source_time'] = isset($data['latest_source_time']) ? $data['latest_source_time'] : null;
        $this->container['latest_user_measurement_time'] = isset($data['latest_user_measurement_time']) ? $data['latest_user_measurement_time'] : null;
        $this->container['manual_tracking'] = isset($data['manual_tracking']) ? $data['manual_tracking'] : null;
        $this->container['maximum_allowed_value'] = isset($data['maximum_allowed_value']) ? $data['maximum_allowed_value'] : null;
        $this->container['maximum_recorded_value'] = isset($data['maximum_recorded_value']) ? $data['maximum_recorded_value'] : null;
        $this->container['mean'] = isset($data['mean']) ? $data['mean'] : null;
        $this->container['measurements_at_last_analysis'] = isset($data['measurements_at_last_analysis']) ? $data['measurements_at_last_analysis'] : null;
        $this->container['median'] = isset($data['median']) ? $data['median'] : null;
        $this->container['minimum_allowed_value'] = isset($data['minimum_allowed_value']) ? $data['minimum_allowed_value'] : null;
        $this->container['minimum_recorded_value'] = isset($data['minimum_recorded_value']) ? $data['minimum_recorded_value'] : null;
        $this->container['most_common_connector_id'] = isset($data['most_common_connector_id']) ? $data['most_common_connector_id'] : null;
        $this->container['most_common_original_unit_id'] = isset($data['most_common_original_unit_id']) ? $data['most_common_original_unit_id'] : null;
        $this->container['most_common_unit'] = isset($data['most_common_unit']) ? $data['most_common_unit'] : null;
        $this->container['most_common_value'] = isset($data['most_common_value']) ? $data['most_common_value'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['number_of_aggregate_correlations_as_cause'] = isset($data['number_of_aggregate_correlations_as_cause']) ? $data['number_of_aggregate_correlations_as_cause'] : null;
        $this->container['number_of_aggregate_correlations_as_effect'] = isset($data['number_of_aggregate_correlations_as_effect']) ? $data['number_of_aggregate_correlations_as_effect'] : null;
        $this->container['number_of_changes'] = isset($data['number_of_changes']) ? $data['number_of_changes'] : null;
        $this->container['number_of_correlations'] = isset($data['number_of_correlations']) ? $data['number_of_correlations'] : null;
        $this->container['number_of_measurements'] = isset($data['number_of_measurements']) ? $data['number_of_measurements'] : null;
        $this->container['number_of_processed_daily_measurements'] = isset($data['number_of_processed_daily_measurements']) ? $data['number_of_processed_daily_measurements'] : null;
        $this->container['number_of_raw_measurements'] = isset($data['number_of_raw_measurements']) ? $data['number_of_raw_measurements'] : null;
        $this->container['number_of_tracking_reminders'] = isset($data['number_of_tracking_reminders']) ? $data['number_of_tracking_reminders'] : null;
        $this->container['number_of_unique_daily_values'] = isset($data['number_of_unique_daily_values']) ? $data['number_of_unique_daily_values'] : null;
        $this->container['number_of_unique_values'] = isset($data['number_of_unique_values']) ? $data['number_of_unique_values'] : null;
        $this->container['number_of_user_correlations_as_cause'] = isset($data['number_of_user_correlations_as_cause']) ? $data['number_of_user_correlations_as_cause'] : null;
        $this->container['number_of_user_correlations_as_effect'] = isset($data['number_of_user_correlations_as_effect']) ? $data['number_of_user_correlations_as_effect'] : null;
        $this->container['number_of_user_variables'] = isset($data['number_of_user_variables']) ? $data['number_of_user_variables'] : null;
        $this->container['onset_delay'] = isset($data['onset_delay']) ? $data['onset_delay'] : null;
        $this->container['onset_delay_in_hours'] = isset($data['onset_delay_in_hours']) ? $data['onset_delay_in_hours'] : null;
        $this->container['outcome'] = isset($data['outcome']) ? $data['outcome'] : null;
        $this->container['outcome_of_interest'] = isset($data['outcome_of_interest']) ? $data['outcome_of_interest'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['parent_user_tag_variables'] = isset($data['parent_user_tag_variables']) ? $data['parent_user_tag_variables'] : null;
        $this->container['png_path'] = isset($data['png_path']) ? $data['png_path'] : null;
        $this->container['png_url'] = isset($data['png_url']) ? $data['png_url'] : null;
        $this->container['predictor_of_interest'] = isset($data['predictor_of_interest']) ? $data['predictor_of_interest'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['product_url'] = isset($data['product_url']) ? $data['product_url'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['raw_measurements_at_last_analysis'] = isset($data['raw_measurements_at_last_analysis']) ? $data['raw_measurements_at_last_analysis'] : null;
        $this->container['second_most_common_value'] = isset($data['second_most_common_value']) ? $data['second_most_common_value'] : null;
        $this->container['second_to_last_value'] = isset($data['second_to_last_value']) ? $data['second_to_last_value'] : null;
        $this->container['share_user_measurements'] = isset($data['share_user_measurements']) ? $data['share_user_measurements'] : null;
        $this->container['skewness'] = isset($data['skewness']) ? $data['skewness'] : null;
        $this->container['sources'] = isset($data['sources']) ? $data['sources'] : null;
        $this->container['standard_deviation'] = isset($data['standard_deviation']) ? $data['standard_deviation'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['subtitle'] = isset($data['subtitle']) ? $data['subtitle'] : null;
        $this->container['sub_variables'] = isset($data['sub_variables']) ? $data['sub_variables'] : null;
        $this->container['svg_url'] = isset($data['svg_url']) ? $data['svg_url'] : null;
        $this->container['third_most_common_value'] = isset($data['third_most_common_value']) ? $data['third_most_common_value'] : null;
        $this->container['third_to_last_value'] = isset($data['third_to_last_value']) ? $data['third_to_last_value'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['valence'] = isset($data['valence']) ? $data['valence'] : null;
        $this->container['variable_category_id'] = isset($data['variable_category_id']) ? $data['variable_category_id'] : null;
        $this->container['variable_category_image_url'] = isset($data['variable_category_image_url']) ? $data['variable_category_image_url'] : null;
        $this->container['variable_category_name'] = isset($data['variable_category_name']) ? $data['variable_category_name'] : null;
        $this->container['variable_filling_value'] = isset($data['variable_filling_value']) ? $data['variable_filling_value'] : null;
        $this->container['variable_id'] = isset($data['variable_id']) ? $data['variable_id'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
        $this->container['variance'] = isset($data['variance']) ? $data['variance'] : null;
        $this->container['wikipedia_title'] = isset($data['wikipedia_title']) ? $data['wikipedia_title'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['alias'] === null) {
            $invalid_properties[] = "'alias' can't be null";
        }
        if ($this->container['available_units'] === null) {
            $invalid_properties[] = "'available_units' can't be null";
        }
        if ($this->container['cause_only'] === null) {
            $invalid_properties[] = "'cause_only' can't be null";
        }
        if ($this->container['charts_link_dynamic'] === null) {
            $invalid_properties[] = "'charts_link_dynamic' can't be null";
        }
        if ($this->container['charts_link_email'] === null) {
            $invalid_properties[] = "'charts_link_email' can't be null";
        }
        if ($this->container['charts_link_facebook'] === null) {
            $invalid_properties[] = "'charts_link_facebook' can't be null";
        }
        if ($this->container['charts_link_google'] === null) {
            $invalid_properties[] = "'charts_link_google' can't be null";
        }
        if ($this->container['charts_link_static'] === null) {
            $invalid_properties[] = "'charts_link_static' can't be null";
        }
        if ($this->container['charts_link_twitter'] === null) {
            $invalid_properties[] = "'charts_link_twitter' can't be null";
        }
        if ($this->container['child_user_tag_variables'] === null) {
            $invalid_properties[] = "'child_user_tag_variables' can't be null";
        }
        if ($this->container['client_id'] === null) {
            $invalid_properties[] = "'client_id' can't be null";
        }
        if ($this->container['combination_operation'] === null) {
            $invalid_properties[] = "'combination_operation' can't be null";
        }
        $allowed_values = $this->getCombinationOperationAllowableValues();
        if (!in_array($this->container['combination_operation'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'combination_operation', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['common_tagged_variables'] === null) {
            $invalid_properties[] = "'common_tagged_variables' can't be null";
        }
        if ($this->container['common_tag_variables'] === null) {
            $invalid_properties[] = "'common_tag_variables' can't be null";
        }
        if ($this->container['common_variable_most_common_connector_id'] === null) {
            $invalid_properties[] = "'common_variable_most_common_connector_id' can't be null";
        }
        if ($this->container['common_variable_updated_at'] === null) {
            $invalid_properties[] = "'common_variable_updated_at' can't be null";
        }
        if ($this->container['data_source'] === null) {
            $invalid_properties[] = "'data_source' can't be null";
        }
        if ($this->container['unit_abbreviated_name'] === null) {
            $invalid_properties[] = "'unit_abbreviated_name' can't be null";
        }
        if ($this->container['unit_id'] === null) {
            $invalid_properties[] = "'unit_id' can't be null";
        }
        if ($this->container['duration_of_action'] === null) {
            $invalid_properties[] = "'duration_of_action' can't be null";
        }
        if ($this->container['earliest_filling_time'] === null) {
            $invalid_properties[] = "'earliest_filling_time' can't be null";
        }
        if ($this->container['earliest_measurement_time'] === null) {
            $invalid_properties[] = "'earliest_measurement_time' can't be null";
        }
        if ($this->container['earliest_source_time'] === null) {
            $invalid_properties[] = "'earliest_source_time' can't be null";
        }
        if ($this->container['experiment_end_time'] === null) {
            $invalid_properties[] = "'experiment_end_time' can't be null";
        }
        if ($this->container['experiment_end_time_seconds'] === null) {
            $invalid_properties[] = "'experiment_end_time_seconds' can't be null";
        }
        if ($this->container['experiment_end_time_string'] === null) {
            $invalid_properties[] = "'experiment_end_time_string' can't be null";
        }
        if ($this->container['experiment_start_time'] === null) {
            $invalid_properties[] = "'experiment_start_time' can't be null";
        }
        if ($this->container['experiment_start_time_seconds'] === null) {
            $invalid_properties[] = "'experiment_start_time_seconds' can't be null";
        }
        if ($this->container['experiment_start_time_string'] === null) {
            $invalid_properties[] = "'experiment_start_time_string' can't be null";
        }
        if ($this->container['filling_type'] === null) {
            $invalid_properties[] = "'filling_type' can't be null";
        }
        if ($this->container['filling_value'] === null) {
            $invalid_properties[] = "'filling_value' can't be null";
        }
        if ($this->container['informational_url'] === null) {
            $invalid_properties[] = "'informational_url' can't be null";
        }
        if ($this->container['ingredient_of_user_tag_variables'] === null) {
            $invalid_properties[] = "'ingredient_of_user_tag_variables' can't be null";
        }
        if ($this->container['ingredient_user_tag_variables'] === null) {
            $invalid_properties[] = "'ingredient_user_tag_variables' can't be null";
        }
        if ($this->container['joined_user_tag_variables'] === null) {
            $invalid_properties[] = "'joined_user_tag_variables' can't be null";
        }
        if ($this->container['joined_variables'] === null) {
            $invalid_properties[] = "'joined_variables' can't be null";
        }
        if ($this->container['join_with'] === null) {
            $invalid_properties[] = "'join_with' can't be null";
        }
        if ($this->container['last_original_unit_id'] === null) {
            $invalid_properties[] = "'last_original_unit_id' can't be null";
        }
        if ($this->container['last_original_value'] === null) {
            $invalid_properties[] = "'last_original_value' can't be null";
        }
        if ($this->container['last_processed_daily_value'] === null) {
            $invalid_properties[] = "'last_processed_daily_value' can't be null";
        }
        if ($this->container['last_source'] === null) {
            $invalid_properties[] = "'last_source' can't be null";
        }
        if ($this->container['last_successful_update_time'] === null) {
            $invalid_properties[] = "'last_successful_update_time' can't be null";
        }
        if ($this->container['last_unit'] === null) {
            $invalid_properties[] = "'last_unit' can't be null";
        }
        if ($this->container['last_unit_id'] === null) {
            $invalid_properties[] = "'last_unit_id' can't be null";
        }
        if ($this->container['last_value'] === null) {
            $invalid_properties[] = "'last_value' can't be null";
        }
        if ($this->container['latest_filling_time'] === null) {
            $invalid_properties[] = "'latest_filling_time' can't be null";
        }
        if ($this->container['latest_measurement_time'] === null) {
            $invalid_properties[] = "'latest_measurement_time' can't be null";
        }
        if ($this->container['latest_source_time'] === null) {
            $invalid_properties[] = "'latest_source_time' can't be null";
        }
        if ($this->container['latest_user_measurement_time'] === null) {
            $invalid_properties[] = "'latest_user_measurement_time' can't be null";
        }
        if ($this->container['maximum_allowed_value'] === null) {
            $invalid_properties[] = "'maximum_allowed_value' can't be null";
        }
        if ($this->container['maximum_recorded_value'] === null) {
            $invalid_properties[] = "'maximum_recorded_value' can't be null";
        }
        if ($this->container['measurements_at_last_analysis'] === null) {
            $invalid_properties[] = "'measurements_at_last_analysis' can't be null";
        }
        if ($this->container['minimum_allowed_value'] === null) {
            $invalid_properties[] = "'minimum_allowed_value' can't be null";
        }
        if ($this->container['minimum_recorded_value'] === null) {
            $invalid_properties[] = "'minimum_recorded_value' can't be null";
        }
        if ($this->container['most_common_unit'] === null) {
            $invalid_properties[] = "'most_common_unit' can't be null";
        }
        if ($this->container['most_common_value'] === null) {
            $invalid_properties[] = "'most_common_value' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['number_of_changes'] === null) {
            $invalid_properties[] = "'number_of_changes' can't be null";
        }
        if ($this->container['number_of_correlations'] === null) {
            $invalid_properties[] = "'number_of_correlations' can't be null";
        }
        if ($this->container['number_of_processed_daily_measurements'] === null) {
            $invalid_properties[] = "'number_of_processed_daily_measurements' can't be null";
        }
        if ($this->container['number_of_raw_measurements'] === null) {
            $invalid_properties[] = "'number_of_raw_measurements' can't be null";
        }
        if ($this->container['number_of_unique_daily_values'] === null) {
            $invalid_properties[] = "'number_of_unique_daily_values' can't be null";
        }
        if ($this->container['number_of_user_correlations_as_cause'] === null) {
            $invalid_properties[] = "'number_of_user_correlations_as_cause' can't be null";
        }
        if ($this->container['number_of_user_correlations_as_effect'] === null) {
            $invalid_properties[] = "'number_of_user_correlations_as_effect' can't be null";
        }
        if ($this->container['onset_delay'] === null) {
            $invalid_properties[] = "'onset_delay' can't be null";
        }
        if ($this->container['onset_delay_in_hours'] === null) {
            $invalid_properties[] = "'onset_delay_in_hours' can't be null";
        }
        if ($this->container['outcome'] === null) {
            $invalid_properties[] = "'outcome' can't be null";
        }
        if ($this->container['outcome_of_interest'] === null) {
            $invalid_properties[] = "'outcome_of_interest' can't be null";
        }
        if ($this->container['parent'] === null) {
            $invalid_properties[] = "'parent' can't be null";
        }
        if ($this->container['parent_id'] === null) {
            $invalid_properties[] = "'parent_id' can't be null";
        }
        if ($this->container['parent_user_tag_variables'] === null) {
            $invalid_properties[] = "'parent_user_tag_variables' can't be null";
        }
        if ($this->container['predictor_of_interest'] === null) {
            $invalid_properties[] = "'predictor_of_interest' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalid_properties[] = "'price' can't be null";
        }
        if ($this->container['product_url'] === null) {
            $invalid_properties[] = "'product_url' can't be null";
        }
        if ($this->container['raw_measurements_at_last_analysis'] === null) {
            $invalid_properties[] = "'raw_measurements_at_last_analysis' can't be null";
        }
        if ($this->container['second_to_last_value'] === null) {
            $invalid_properties[] = "'second_to_last_value' can't be null";
        }
        if ($this->container['share_user_measurements'] === null) {
            $invalid_properties[] = "'share_user_measurements' can't be null";
        }
        if ($this->container['sources'] === null) {
            $invalid_properties[] = "'sources' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['sub_variables'] === null) {
            $invalid_properties[] = "'sub_variables' can't be null";
        }
        if ($this->container['third_to_last_value'] === null) {
            $invalid_properties[] = "'third_to_last_value' can't be null";
        }
        if ($this->container['updated'] === null) {
            $invalid_properties[] = "'updated' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['variable_category_name'] === null) {
            $invalid_properties[] = "'variable_category_name' can't be null";
        }
        if ($this->container['variable_filling_value'] === null) {
            $invalid_properties[] = "'variable_filling_value' can't be null";
        }
        if ($this->container['variable_id'] === null) {
            $invalid_properties[] = "'variable_id' can't be null";
        }
        if ($this->container['wikipedia_title'] === null) {
            $invalid_properties[] = "'wikipedia_title' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['alias'] === null) {
            return false;
        }
        if ($this->container['available_units'] === null) {
            return false;
        }
        if ($this->container['cause_only'] === null) {
            return false;
        }
        if ($this->container['charts_link_dynamic'] === null) {
            return false;
        }
        if ($this->container['charts_link_email'] === null) {
            return false;
        }
        if ($this->container['charts_link_facebook'] === null) {
            return false;
        }
        if ($this->container['charts_link_google'] === null) {
            return false;
        }
        if ($this->container['charts_link_static'] === null) {
            return false;
        }
        if ($this->container['charts_link_twitter'] === null) {
            return false;
        }
        if ($this->container['child_user_tag_variables'] === null) {
            return false;
        }
        if ($this->container['client_id'] === null) {
            return false;
        }
        if ($this->container['combination_operation'] === null) {
            return false;
        }
        $allowed_values = $this->getCombinationOperationAllowableValues();
        if (!in_array($this->container['combination_operation'], $allowed_values)) {
            return false;
        }
        if ($this->container['common_tagged_variables'] === null) {
            return false;
        }
        if ($this->container['common_tag_variables'] === null) {
            return false;
        }
        if ($this->container['common_variable_most_common_connector_id'] === null) {
            return false;
        }
        if ($this->container['common_variable_updated_at'] === null) {
            return false;
        }
        if ($this->container['data_source'] === null) {
            return false;
        }
        if ($this->container['unit_abbreviated_name'] === null) {
            return false;
        }
        if ($this->container['unit_id'] === null) {
            return false;
        }
        if ($this->container['duration_of_action'] === null) {
            return false;
        }
        if ($this->container['earliest_filling_time'] === null) {
            return false;
        }
        if ($this->container['earliest_measurement_time'] === null) {
            return false;
        }
        if ($this->container['earliest_source_time'] === null) {
            return false;
        }
        if ($this->container['experiment_end_time'] === null) {
            return false;
        }
        if ($this->container['experiment_end_time_seconds'] === null) {
            return false;
        }
        if ($this->container['experiment_end_time_string'] === null) {
            return false;
        }
        if ($this->container['experiment_start_time'] === null) {
            return false;
        }
        if ($this->container['experiment_start_time_seconds'] === null) {
            return false;
        }
        if ($this->container['experiment_start_time_string'] === null) {
            return false;
        }
        if ($this->container['filling_type'] === null) {
            return false;
        }
        if ($this->container['filling_value'] === null) {
            return false;
        }
        if ($this->container['informational_url'] === null) {
            return false;
        }
        if ($this->container['ingredient_of_user_tag_variables'] === null) {
            return false;
        }
        if ($this->container['ingredient_user_tag_variables'] === null) {
            return false;
        }
        if ($this->container['joined_user_tag_variables'] === null) {
            return false;
        }
        if ($this->container['joined_variables'] === null) {
            return false;
        }
        if ($this->container['join_with'] === null) {
            return false;
        }
        if ($this->container['last_original_unit_id'] === null) {
            return false;
        }
        if ($this->container['last_original_value'] === null) {
            return false;
        }
        if ($this->container['last_processed_daily_value'] === null) {
            return false;
        }
        if ($this->container['last_source'] === null) {
            return false;
        }
        if ($this->container['last_successful_update_time'] === null) {
            return false;
        }
        if ($this->container['last_unit'] === null) {
            return false;
        }
        if ($this->container['last_unit_id'] === null) {
            return false;
        }
        if ($this->container['last_value'] === null) {
            return false;
        }
        if ($this->container['latest_filling_time'] === null) {
            return false;
        }
        if ($this->container['latest_measurement_time'] === null) {
            return false;
        }
        if ($this->container['latest_source_time'] === null) {
            return false;
        }
        if ($this->container['latest_user_measurement_time'] === null) {
            return false;
        }
        if ($this->container['maximum_allowed_value'] === null) {
            return false;
        }
        if ($this->container['maximum_recorded_value'] === null) {
            return false;
        }
        if ($this->container['measurements_at_last_analysis'] === null) {
            return false;
        }
        if ($this->container['minimum_allowed_value'] === null) {
            return false;
        }
        if ($this->container['minimum_recorded_value'] === null) {
            return false;
        }
        if ($this->container['most_common_unit'] === null) {
            return false;
        }
        if ($this->container['most_common_value'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['number_of_changes'] === null) {
            return false;
        }
        if ($this->container['number_of_correlations'] === null) {
            return false;
        }
        if ($this->container['number_of_processed_daily_measurements'] === null) {
            return false;
        }
        if ($this->container['number_of_raw_measurements'] === null) {
            return false;
        }
        if ($this->container['number_of_unique_daily_values'] === null) {
            return false;
        }
        if ($this->container['number_of_user_correlations_as_cause'] === null) {
            return false;
        }
        if ($this->container['number_of_user_correlations_as_effect'] === null) {
            return false;
        }
        if ($this->container['onset_delay'] === null) {
            return false;
        }
        if ($this->container['onset_delay_in_hours'] === null) {
            return false;
        }
        if ($this->container['outcome'] === null) {
            return false;
        }
        if ($this->container['outcome_of_interest'] === null) {
            return false;
        }
        if ($this->container['parent'] === null) {
            return false;
        }
        if ($this->container['parent_id'] === null) {
            return false;
        }
        if ($this->container['parent_user_tag_variables'] === null) {
            return false;
        }
        if ($this->container['predictor_of_interest'] === null) {
            return false;
        }
        if ($this->container['price'] === null) {
            return false;
        }
        if ($this->container['product_url'] === null) {
            return false;
        }
        if ($this->container['raw_measurements_at_last_analysis'] === null) {
            return false;
        }
        if ($this->container['second_to_last_value'] === null) {
            return false;
        }
        if ($this->container['share_user_measurements'] === null) {
            return false;
        }
        if ($this->container['sources'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['sub_variables'] === null) {
            return false;
        }
        if ($this->container['third_to_last_value'] === null) {
            return false;
        }
        if ($this->container['updated'] === null) {
            return false;
        }
        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['variable_category_name'] === null) {
            return false;
        }
        if ($this->container['variable_filling_value'] === null) {
            return false;
        }
        if ($this->container['variable_id'] === null) {
            return false;
        }
        if ($this->container['wikipedia_title'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets alias
     * @return string
     */
    public function getAlias()
    {
        return $this->container['alias'];
    }

    /**
     * Sets alias
     * @param string $alias Example:
     * @return $this
     */
    public function setAlias($alias)
    {
        $this->container['alias'] = $alias;

        return $this;
    }

    /**
     * Gets available_units
     * @return \QuantiModo\Client\Model\Unit[]
     */
    public function getAvailableUnits()
    {
        return $this->container['available_units'];
    }

    /**
     * Sets available_units
     * @param \QuantiModo\Client\Model\Unit[] $available_units
     * @return $this
     */
    public function setAvailableUnits($available_units)
    {
        $this->container['available_units'] = $available_units;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category Example: Sleep
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets cause_only
     * @return int
     */
    public function getCauseOnly()
    {
        return $this->container['cause_only'];
    }

    /**
     * Sets cause_only
     * @param int $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
     * @return $this
     */
    public function setCauseOnly($cause_only)
    {
        $this->container['cause_only'] = $cause_only;

        return $this;
    }

    /**
     * Gets charts
     * @return \QuantiModo\Client\Model\Chart[]
     */
    public function getCharts()
    {
        return $this->container['charts'];
    }

    /**
     * Sets charts
     * @param \QuantiModo\Client\Model\Chart[] $charts
     * @return $this
     */
    public function setCharts($charts)
    {
        $this->container['charts'] = $charts;

        return $this;
    }

    /**
     * Gets charts_link_dynamic
     * @return string
     */
    public function getChartsLinkDynamic()
    {
        return $this->container['charts_link_dynamic'];
    }

    /**
     * Sets charts_link_dynamic
     * @param string $charts_link_dynamic Example: https://local.quantimo.do/ionic/Modo/www/#/app/charts/Barometric%20Pressure?variableName=Barometric%20Pressure&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Fenvironment.png
     * @return $this
     */
    public function setChartsLinkDynamic($charts_link_dynamic)
    {
        $this->container['charts_link_dynamic'] = $charts_link_dynamic;

        return $this;
    }

    /**
     * Gets charts_link_email
     * @return string
     */
    public function getChartsLinkEmail()
    {
        return $this->container['charts_link_email'];
    }

    /**
     * Sets charts_link_email
     * @param string $charts_link_email Example: mailto:?subject=Check%20out%20my%20Barometric%20Pressure%20data%21&body=See%20my%20Barometric%20Pressure%20history%20at%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DBarometric%2520Pressure%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Fenvironment.png%0A%0AHave%20a%20great%20day!
     * @return $this
     */
    public function setChartsLinkEmail($charts_link_email)
    {
        $this->container['charts_link_email'] = $charts_link_email;

        return $this;
    }

    /**
     * Gets charts_link_facebook
     * @return string
     */
    public function getChartsLinkFacebook()
    {
        return $this->container['charts_link_facebook'];
    }

    /**
     * Sets charts_link_facebook
     * @param string $charts_link_facebook Example: https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DBarometric%2520Pressure%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Fenvironment.png
     * @return $this
     */
    public function setChartsLinkFacebook($charts_link_facebook)
    {
        $this->container['charts_link_facebook'] = $charts_link_facebook;

        return $this;
    }

    /**
     * Gets charts_link_google
     * @return string
     */
    public function getChartsLinkGoogle()
    {
        return $this->container['charts_link_google'];
    }

    /**
     * Sets charts_link_google
     * @param string $charts_link_google Example: https://plus.google.com/share?url=https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DBarometric%2520Pressure%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Fenvironment.png
     * @return $this
     */
    public function setChartsLinkGoogle($charts_link_google)
    {
        $this->container['charts_link_google'] = $charts_link_google;

        return $this;
    }

    /**
     * Gets charts_link_static
     * @return string
     */
    public function getChartsLinkStatic()
    {
        return $this->container['charts_link_static'];
    }

    /**
     * Sets charts_link_static
     * @param string $charts_link_static Example: https://local.quantimo.do/api/v2/charts?variableName=Barometric%20Pressure&userId=230&pngUrl=https%3A%2F%2Fapp.quantimo.do%2Fionic%2FModo%2Fwww%2Fimg%2Fvariable_categories%2Fenvironment.png
     * @return $this
     */
    public function setChartsLinkStatic($charts_link_static)
    {
        $this->container['charts_link_static'] = $charts_link_static;

        return $this;
    }

    /**
     * Gets charts_link_twitter
     * @return string
     */
    public function getChartsLinkTwitter()
    {
        return $this->container['charts_link_twitter'];
    }

    /**
     * Sets charts_link_twitter
     * @param string $charts_link_twitter Example: https://twitter.com/home?status=Check%20out%20my%20Barometric%20Pressure%20data%21%20https%3A%2F%2Flocal.quantimo.do%2Fapi%2Fv2%2Fcharts%3FvariableName%3DBarometric%2520Pressure%26userId%3D230%26pngUrl%3Dhttps%253A%252F%252Fapp.quantimo.do%252Fionic%252FModo%252Fwww%252Fimg%252Fvariable_categories%252Fenvironment.png%20%40quantimodo
     * @return $this
     */
    public function setChartsLinkTwitter($charts_link_twitter)
    {
        $this->container['charts_link_twitter'] = $charts_link_twitter;

        return $this;
    }

    /**
     * Gets child_user_tag_variables
     * @return \QuantiModo\Client\Model\UserVariableArray
     */
    public function getChildUserTagVariables()
    {
        return $this->container['child_user_tag_variables'];
    }

    /**
     * Sets child_user_tag_variables
     * @param \QuantiModo\Client\Model\UserVariableArray $child_user_tag_variables
     * @return $this
     */
    public function setChildUserTagVariables($child_user_tag_variables)
    {
        $this->container['child_user_tag_variables'] = $child_user_tag_variables;

        return $this;
    }

    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param string $client_id Example: local
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->container['combination_operation'];
    }

    /**
     * Sets combination_operation
     * @param string $combination_operation Way to aggregate measurements over time. Options are \"MEAN\" or \"SUM\". SUM should be used for things like minutes of exercise.  If you use MEAN for exercise, then a person might exercise more minutes in one day but add separate measurements that were smaller.  So when we are doing correlational analysis, we would think that the person exercised less that day even though they exercised more.  Conversely, we must use MEAN for things such as ratings which cannot be SUMMED.
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $allowed_values = $this->getCombinationOperationAllowableValues();
        if (!in_array($combination_operation, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'combination_operation', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['combination_operation'] = $combination_operation;

        return $this;
    }

    /**
     * Gets common_alias
     * @return string
     */
    public function getCommonAlias()
    {
        return $this->container['common_alias'];
    }

    /**
     * Sets common_alias
     * @param string $common_alias Example: Mood_(psychology)
     * @return $this
     */
    public function setCommonAlias($common_alias)
    {
        $this->container['common_alias'] = $common_alias;

        return $this;
    }

    /**
     * Gets common_tagged_variables
     * @return \QuantiModo\Client\Model\CommonVariableArray
     */
    public function getCommonTaggedVariables()
    {
        return $this->container['common_tagged_variables'];
    }

    /**
     * Sets common_tagged_variables
     * @param \QuantiModo\Client\Model\CommonVariableArray $common_tagged_variables
     * @return $this
     */
    public function setCommonTaggedVariables($common_tagged_variables)
    {
        $this->container['common_tagged_variables'] = $common_tagged_variables;

        return $this;
    }

    /**
     * Gets common_tag_variables
     * @return \QuantiModo\Client\Model\CommonVariableArray
     */
    public function getCommonTagVariables()
    {
        return $this->container['common_tag_variables'];
    }

    /**
     * Sets common_tag_variables
     * @param \QuantiModo\Client\Model\CommonVariableArray $common_tag_variables
     * @return $this
     */
    public function setCommonTagVariables($common_tag_variables)
    {
        $this->container['common_tag_variables'] = $common_tag_variables;

        return $this;
    }

    /**
     * Gets common_variable_most_common_connector_id
     * @return int
     */
    public function getCommonVariableMostCommonConnectorId()
    {
        return $this->container['common_variable_most_common_connector_id'];
    }

    /**
     * Sets common_variable_most_common_connector_id
     * @param int $common_variable_most_common_connector_id Example: 13
     * @return $this
     */
    public function setCommonVariableMostCommonConnectorId($common_variable_most_common_connector_id)
    {
        $this->container['common_variable_most_common_connector_id'] = $common_variable_most_common_connector_id;

        return $this;
    }

    /**
     * Gets common_variable_updated_at
     * @return \DateTime
     */
    public function getCommonVariableUpdatedAt()
    {
        return $this->container['common_variable_updated_at'];
    }

    /**
     * Sets common_variable_updated_at
     * @param \DateTime $common_variable_updated_at Example: 2017-07-30 20:47:38
     * @return $this
     */
    public function setCommonVariableUpdatedAt($common_variable_updated_at)
    {
        $this->container['common_variable_updated_at'] = $common_variable_updated_at;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Example: 2014-10-23 03:41:06
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets data_source
     * @return \QuantiModo\Client\Model\DataSource
     */
    public function getDataSource()
    {
        return $this->container['data_source'];
    }

    /**
     * Sets data_source
     * @param \QuantiModo\Client\Model\DataSource $data_source
     * @return $this
     */
    public function setDataSource($data_source)
    {
        $this->container['data_source'] = $data_source;

        return $this;
    }

    /**
     * Gets unit_abbreviated_name
     * @return string
     */
    public function getUnitAbbreviatedName()
    {
        return $this->container['unit_abbreviated_name'];
    }

    /**
     * Sets unit_abbreviated_name
     * @param string $unit_abbreviated_name Abbreviated name of the default unit for the variable
     * @return $this
     */
    public function setUnitAbbreviatedName($unit_abbreviated_name)
    {
        $this->container['unit_abbreviated_name'] = $unit_abbreviated_name;

        return $this;
    }

    /**
     * Gets unit_category_id
     * @return int
     */
    public function getUnitCategoryId()
    {
        return $this->container['unit_category_id'];
    }

    /**
     * Sets unit_category_id
     * @param int $unit_category_id Example: 1
     * @return $this
     */
    public function setUnitCategoryId($unit_category_id)
    {
        $this->container['unit_category_id'] = $unit_category_id;

        return $this;
    }

    /**
     * Gets unit_category_name
     * @return string
     */
    public function getUnitCategoryName()
    {
        return $this->container['unit_category_name'];
    }

    /**
     * Sets unit_category_name
     * @param string $unit_category_name Example: Duration
     * @return $this
     */
    public function setUnitCategoryName($unit_category_name)
    {
        $this->container['unit_category_name'] = $unit_category_name;

        return $this;
    }

    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->container['unit_id'];
    }

    /**
     * Sets unit_id
     * @param int $unit_id Id of the default unit for the variable
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        $this->container['unit_id'] = $unit_id;

        return $this;
    }

    /**
     * Gets unit_name
     * @return string
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     * @param string $unit_name Example: Hours
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description Example: positive
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->container['duration_of_action'];
    }

    /**
     * Sets duration_of_action
     * @param int $duration_of_action The amount of time over which a predictor/stimulus event can exert an observable influence on an outcome variable value. For instance, aspirin (stimulus/predictor) typically decreases headache severity for approximately four hours (duration of action) following the onset delay.
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        $this->container['duration_of_action'] = $duration_of_action;

        return $this;
    }

    /**
     * Gets duration_of_action_in_hours
     * @return int
     */
    public function getDurationOfActionInHours()
    {
        return $this->container['duration_of_action_in_hours'];
    }

    /**
     * Sets duration_of_action_in_hours
     * @param int $duration_of_action_in_hours Example: 168
     * @return $this
     */
    public function setDurationOfActionInHours($duration_of_action_in_hours)
    {
        $this->container['duration_of_action_in_hours'] = $duration_of_action_in_hours;

        return $this;
    }

    /**
     * Gets earliest_filling_time
     * @return int
     */
    public function getEarliestFillingTime()
    {
        return $this->container['earliest_filling_time'];
    }

    /**
     * Sets earliest_filling_time
     * @param int $earliest_filling_time Example: 1362099600
     * @return $this
     */
    public function setEarliestFillingTime($earliest_filling_time)
    {
        $this->container['earliest_filling_time'] = $earliest_filling_time;

        return $this;
    }

    /**
     * Gets earliest_measurement_time
     * @return int
     */
    public function getEarliestMeasurementTime()
    {
        return $this->container['earliest_measurement_time'];
    }

    /**
     * Sets earliest_measurement_time
     * @param int $earliest_measurement_time Earliest measurement time
     * @return $this
     */
    public function setEarliestMeasurementTime($earliest_measurement_time)
    {
        $this->container['earliest_measurement_time'] = $earliest_measurement_time;

        return $this;
    }

    /**
     * Gets earliest_source_time
     * @return int
     */
    public function getEarliestSourceTime()
    {
        return $this->container['earliest_source_time'];
    }

    /**
     * Sets earliest_source_time
     * @param int $earliest_source_time Example: 1334473200
     * @return $this
     */
    public function setEarliestSourceTime($earliest_source_time)
    {
        $this->container['earliest_source_time'] = $earliest_source_time;

        return $this;
    }

    /**
     * Gets experiment_end_time
     * @return \DateTime
     */
    public function getExperimentEndTime()
    {
        return $this->container['experiment_end_time'];
    }

    /**
     * Sets experiment_end_time
     * @param \DateTime $experiment_end_time Example:
     * @return $this
     */
    public function setExperimentEndTime($experiment_end_time)
    {
        $this->container['experiment_end_time'] = $experiment_end_time;

        return $this;
    }

    /**
     * Gets experiment_end_time_seconds
     * @return \DateTime
     */
    public function getExperimentEndTimeSeconds()
    {
        return $this->container['experiment_end_time_seconds'];
    }

    /**
     * Sets experiment_end_time_seconds
     * @param \DateTime $experiment_end_time_seconds Example:
     * @return $this
     */
    public function setExperimentEndTimeSeconds($experiment_end_time_seconds)
    {
        $this->container['experiment_end_time_seconds'] = $experiment_end_time_seconds;

        return $this;
    }

    /**
     * Gets experiment_end_time_string
     * @return \DateTime
     */
    public function getExperimentEndTimeString()
    {
        return $this->container['experiment_end_time_string'];
    }

    /**
     * Sets experiment_end_time_string
     * @param \DateTime $experiment_end_time_string Example:
     * @return $this
     */
    public function setExperimentEndTimeString($experiment_end_time_string)
    {
        $this->container['experiment_end_time_string'] = $experiment_end_time_string;

        return $this;
    }

    /**
     * Gets experiment_start_time
     * @return \DateTime
     */
    public function getExperimentStartTime()
    {
        return $this->container['experiment_start_time'];
    }

    /**
     * Sets experiment_start_time
     * @param \DateTime $experiment_start_time Example:
     * @return $this
     */
    public function setExperimentStartTime($experiment_start_time)
    {
        $this->container['experiment_start_time'] = $experiment_start_time;

        return $this;
    }

    /**
     * Gets experiment_start_time_seconds
     * @return \DateTime
     */
    public function getExperimentStartTimeSeconds()
    {
        return $this->container['experiment_start_time_seconds'];
    }

    /**
     * Sets experiment_start_time_seconds
     * @param \DateTime $experiment_start_time_seconds Example:
     * @return $this
     */
    public function setExperimentStartTimeSeconds($experiment_start_time_seconds)
    {
        $this->container['experiment_start_time_seconds'] = $experiment_start_time_seconds;

        return $this;
    }

    /**
     * Gets experiment_start_time_string
     * @return \DateTime
     */
    public function getExperimentStartTimeString()
    {
        return $this->container['experiment_start_time_string'];
    }

    /**
     * Sets experiment_start_time_string
     * @param \DateTime $experiment_start_time_string Example:
     * @return $this
     */
    public function setExperimentStartTimeString($experiment_start_time_string)
    {
        $this->container['experiment_start_time_string'] = $experiment_start_time_string;

        return $this;
    }

    /**
     * Gets filling_type
     * @return string
     */
    public function getFillingType()
    {
        return $this->container['filling_type'];
    }

    /**
     * Sets filling_type
     * @param string $filling_type Example:
     * @return $this
     */
    public function setFillingType($filling_type)
    {
        $this->container['filling_type'] = $filling_type;

        return $this;
    }

    /**
     * Gets filling_value
     * @return double
     */
    public function getFillingValue()
    {
        return $this->container['filling_value'];
    }

    /**
     * Sets filling_value
     * @param double $filling_value When it comes to analysis to determine the effects of this variable, knowing when it did not occur is as important as knowing when it did occur. For example, if you are tracking a medication, it is important to know when you did not take it, but you do not have to log zero values for all the days when you haven't taken it. Hence, you can specify a filling value (typically 0) to insert whenever data is missing.
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        $this->container['filling_value'] = $filling_value;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Variable ID
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url 
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets informational_url
     * @return string
     */
    public function getInformationalUrl()
    {
        return $this->container['informational_url'];
    }

    /**
     * Sets informational_url
     * @param string $informational_url Example:
     * @return $this
     */
    public function setInformationalUrl($informational_url)
    {
        $this->container['informational_url'] = $informational_url;

        return $this;
    }

    /**
     * Gets ingredient_of_user_tag_variables
     * @return \QuantiModo\Client\Model\UserVariableArray
     */
    public function getIngredientOfUserTagVariables()
    {
        return $this->container['ingredient_of_user_tag_variables'];
    }

    /**
     * Sets ingredient_of_user_tag_variables
     * @param \QuantiModo\Client\Model\UserVariableArray $ingredient_of_user_tag_variables
     * @return $this
     */
    public function setIngredientOfUserTagVariables($ingredient_of_user_tag_variables)
    {
        $this->container['ingredient_of_user_tag_variables'] = $ingredient_of_user_tag_variables;

        return $this;
    }

    /**
     * Gets ingredient_user_tag_variables
     * @return \QuantiModo\Client\Model\UserVariableArray
     */
    public function getIngredientUserTagVariables()
    {
        return $this->container['ingredient_user_tag_variables'];
    }

    /**
     * Sets ingredient_user_tag_variables
     * @param \QuantiModo\Client\Model\UserVariableArray $ingredient_user_tag_variables
     * @return $this
     */
    public function setIngredientUserTagVariables($ingredient_user_tag_variables)
    {
        $this->container['ingredient_user_tag_variables'] = $ingredient_user_tag_variables;

        return $this;
    }

    /**
     * Gets input_type
     * @return string
     */
    public function getInputType()
    {
        return $this->container['input_type'];
    }

    /**
     * Sets input_type
     * @param string $input_type Example: slider
     * @return $this
     */
    public function setInputType($input_type)
    {
        $this->container['input_type'] = $input_type;

        return $this;
    }

    /**
     * Gets ion_icon
     * @return string
     */
    public function getIonIcon()
    {
        return $this->container['ion_icon'];
    }

    /**
     * Sets ion_icon
     * @param string $ion_icon 
     * @return $this
     */
    public function setIonIcon($ion_icon)
    {
        $this->container['ion_icon'] = $ion_icon;

        return $this;
    }

    /**
     * Gets joined_user_tag_variables
     * @return \QuantiModo\Client\Model\UserVariableArray
     */
    public function getJoinedUserTagVariables()
    {
        return $this->container['joined_user_tag_variables'];
    }

    /**
     * Sets joined_user_tag_variables
     * @param \QuantiModo\Client\Model\UserVariableArray $joined_user_tag_variables
     * @return $this
     */
    public function setJoinedUserTagVariables($joined_user_tag_variables)
    {
        $this->container['joined_user_tag_variables'] = $joined_user_tag_variables;

        return $this;
    }

    /**
     * Gets joined_variables
     * @return \QuantiModo\Client\Model\CommonVariable[]
     */
    public function getJoinedVariables()
    {
        return $this->container['joined_variables'];
    }

    /**
     * Sets joined_variables
     * @param \QuantiModo\Client\Model\CommonVariable[] $joined_variables Array of Variables that are joined with this Variable
     * @return $this
     */
    public function setJoinedVariables($joined_variables)
    {
        $this->container['joined_variables'] = $joined_variables;

        return $this;
    }

    /**
     * Gets join_with
     * @return string
     */
    public function getJoinWith()
    {
        return $this->container['join_with'];
    }

    /**
     * Sets join_with
     * @param string $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
     * @return $this
     */
    public function setJoinWith($join_with)
    {
        $this->container['join_with'] = $join_with;

        return $this;
    }

    /**
     * Gets kurtosis
     * @return double
     */
    public function getKurtosis()
    {
        return $this->container['kurtosis'];
    }

    /**
     * Sets kurtosis
     * @param double $kurtosis Example: 10.764488721491
     * @return $this
     */
    public function setKurtosis($kurtosis)
    {
        $this->container['kurtosis'] = $kurtosis;

        return $this;
    }

    /**
     * Gets last_original_unit_id
     * @return int
     */
    public function getLastOriginalUnitId()
    {
        return $this->container['last_original_unit_id'];
    }

    /**
     * Sets last_original_unit_id
     * @param int $last_original_unit_id Example: 47
     * @return $this
     */
    public function setLastOriginalUnitId($last_original_unit_id)
    {
        $this->container['last_original_unit_id'] = $last_original_unit_id;

        return $this;
    }

    /**
     * Gets last_original_value
     * @return double
     */
    public function getLastOriginalValue()
    {
        return $this->container['last_original_value'];
    }

    /**
     * Sets last_original_value
     * @param double $last_original_value Example: 100900
     * @return $this
     */
    public function setLastOriginalValue($last_original_value)
    {
        $this->container['last_original_value'] = $last_original_value;

        return $this;
    }

    /**
     * Gets last_processed_daily_value
     * @return double
     */
    public function getLastProcessedDailyValue()
    {
        return $this->container['last_processed_daily_value'];
    }

    /**
     * Sets last_processed_daily_value
     * @param double $last_processed_daily_value Example: 100900
     * @return $this
     */
    public function setLastProcessedDailyValue($last_processed_daily_value)
    {
        $this->container['last_processed_daily_value'] = $last_processed_daily_value;

        return $this;
    }

    /**
     * Gets last_source
     * @return int
     */
    public function getLastSource()
    {
        return $this->container['last_source'];
    }

    /**
     * Sets last_source
     * @param int $last_source Last source
     * @return $this
     */
    public function setLastSource($last_source)
    {
        $this->container['last_source'] = $last_source;

        return $this;
    }

    /**
     * Gets last_successful_update_time
     * @return \DateTime
     */
    public function getLastSuccessfulUpdateTime()
    {
        return $this->container['last_successful_update_time'];
    }

    /**
     * Sets last_successful_update_time
     * @param \DateTime $last_successful_update_time Example: 2017-02-08 17:43:01
     * @return $this
     */
    public function setLastSuccessfulUpdateTime($last_successful_update_time)
    {
        $this->container['last_successful_update_time'] = $last_successful_update_time;

        return $this;
    }

    /**
     * Gets last_unit
     * @return string
     */
    public function getLastUnit()
    {
        return $this->container['last_unit'];
    }

    /**
     * Sets last_unit
     * @param string $last_unit Last unit
     * @return $this
     */
    public function setLastUnit($last_unit)
    {
        $this->container['last_unit'] = $last_unit;

        return $this;
    }

    /**
     * Gets last_unit_id
     * @return int
     */
    public function getLastUnitId()
    {
        return $this->container['last_unit_id'];
    }

    /**
     * Sets last_unit_id
     * @param int $last_unit_id Example: 47
     * @return $this
     */
    public function setLastUnitId($last_unit_id)
    {
        $this->container['last_unit_id'] = $last_unit_id;

        return $this;
    }

    /**
     * Gets last_value
     * @return int
     */
    public function getLastValue()
    {
        return $this->container['last_value'];
    }

    /**
     * Sets last_value
     * @param int $last_value Last value
     * @return $this
     */
    public function setLastValue($last_value)
    {
        $this->container['last_value'] = $last_value;

        return $this;
    }

    /**
     * Gets latest_filling_time
     * @return int
     */
    public function getLatestFillingTime()
    {
        return $this->container['latest_filling_time'];
    }

    /**
     * Sets latest_filling_time
     * @param int $latest_filling_time Example: 1501722000
     * @return $this
     */
    public function setLatestFillingTime($latest_filling_time)
    {
        $this->container['latest_filling_time'] = $latest_filling_time;

        return $this;
    }

    /**
     * Gets latest_measurement_time
     * @return int
     */
    public function getLatestMeasurementTime()
    {
        return $this->container['latest_measurement_time'];
    }

    /**
     * Sets latest_measurement_time
     * @param int $latest_measurement_time Latest measurement time
     * @return $this
     */
    public function setLatestMeasurementTime($latest_measurement_time)
    {
        $this->container['latest_measurement_time'] = $latest_measurement_time;

        return $this;
    }

    /**
     * Gets latest_source_time
     * @return int
     */
    public function getLatestSourceTime()
    {
        return $this->container['latest_source_time'];
    }

    /**
     * Sets latest_source_time
     * @param int $latest_source_time Example: 1501722000
     * @return $this
     */
    public function setLatestSourceTime($latest_source_time)
    {
        $this->container['latest_source_time'] = $latest_source_time;

        return $this;
    }

    /**
     * Gets latest_user_measurement_time
     * @return int
     */
    public function getLatestUserMeasurementTime()
    {
        return $this->container['latest_user_measurement_time'];
    }

    /**
     * Sets latest_user_measurement_time
     * @param int $latest_user_measurement_time Example: 1501722000
     * @return $this
     */
    public function setLatestUserMeasurementTime($latest_user_measurement_time)
    {
        $this->container['latest_user_measurement_time'] = $latest_user_measurement_time;

        return $this;
    }

    /**
     * Gets manual_tracking
     * @return bool
     */
    public function getManualTracking()
    {
        return $this->container['manual_tracking'];
    }

    /**
     * Sets manual_tracking
     * @param bool $manual_tracking Example: 1
     * @return $this
     */
    public function setManualTracking($manual_tracking)
    {
        $this->container['manual_tracking'] = $manual_tracking;

        return $this;
    }

    /**
     * Gets maximum_allowed_value
     * @return double
     */
    public function getMaximumAllowedValue()
    {
        return $this->container['maximum_allowed_value'];
    }

    /**
     * Sets maximum_allowed_value
     * @param double $maximum_allowed_value The maximum allowed value for measurements. While you can record a value above this maximum, it will be excluded from the correlation analysis.
     * @return $this
     */
    public function setMaximumAllowedValue($maximum_allowed_value)
    {
        $this->container['maximum_allowed_value'] = $maximum_allowed_value;

        return $this;
    }

    /**
     * Gets maximum_recorded_value
     * @return double
     */
    public function getMaximumRecordedValue()
    {
        return $this->container['maximum_recorded_value'];
    }

    /**
     * Sets maximum_recorded_value
     * @param double $maximum_recorded_value Example: 104700
     * @return $this
     */
    public function setMaximumRecordedValue($maximum_recorded_value)
    {
        $this->container['maximum_recorded_value'] = $maximum_recorded_value;

        return $this;
    }

    /**
     * Gets mean
     * @return double
     */
    public function getMean()
    {
        return $this->container['mean'];
    }

    /**
     * Sets mean
     * @param double $mean Example: 2202.3886251393
     * @return $this
     */
    public function setMean($mean)
    {
        $this->container['mean'] = $mean;

        return $this;
    }

    /**
     * Gets measurements_at_last_analysis
     * @return int
     */
    public function getMeasurementsAtLastAnalysis()
    {
        return $this->container['measurements_at_last_analysis'];
    }

    /**
     * Sets measurements_at_last_analysis
     * @param int $measurements_at_last_analysis Example: 9795
     * @return $this
     */
    public function setMeasurementsAtLastAnalysis($measurements_at_last_analysis)
    {
        $this->container['measurements_at_last_analysis'] = $measurements_at_last_analysis;

        return $this;
    }

    /**
     * Gets median
     * @return double
     */
    public function getMedian()
    {
        return $this->container['median'];
    }

    /**
     * Sets median
     * @param double $median Example: 2255.9284755781
     * @return $this
     */
    public function setMedian($median)
    {
        $this->container['median'] = $median;

        return $this;
    }

    /**
     * Gets minimum_allowed_value
     * @return double
     */
    public function getMinimumAllowedValue()
    {
        return $this->container['minimum_allowed_value'];
    }

    /**
     * Sets minimum_allowed_value
     * @param double $minimum_allowed_value The minimum allowed value for measurements. While you can record a value below this minimum, it will be excluded from the correlation analysis.
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        $this->container['minimum_allowed_value'] = $minimum_allowed_value;

        return $this;
    }

    /**
     * Gets minimum_recorded_value
     * @return double
     */
    public function getMinimumRecordedValue()
    {
        return $this->container['minimum_recorded_value'];
    }

    /**
     * Sets minimum_recorded_value
     * @param double $minimum_recorded_value Example: 1008.74
     * @return $this
     */
    public function setMinimumRecordedValue($minimum_recorded_value)
    {
        $this->container['minimum_recorded_value'] = $minimum_recorded_value;

        return $this;
    }

    /**
     * Gets most_common_connector_id
     * @return int
     */
    public function getMostCommonConnectorId()
    {
        return $this->container['most_common_connector_id'];
    }

    /**
     * Sets most_common_connector_id
     * @param int $most_common_connector_id Example: 7
     * @return $this
     */
    public function setMostCommonConnectorId($most_common_connector_id)
    {
        $this->container['most_common_connector_id'] = $most_common_connector_id;

        return $this;
    }

    /**
     * Gets most_common_original_unit_id
     * @return int
     */
    public function getMostCommonOriginalUnitId()
    {
        return $this->container['most_common_original_unit_id'];
    }

    /**
     * Sets most_common_original_unit_id
     * @param int $most_common_original_unit_id Example: 2
     * @return $this
     */
    public function setMostCommonOriginalUnitId($most_common_original_unit_id)
    {
        $this->container['most_common_original_unit_id'] = $most_common_original_unit_id;

        return $this;
    }

    /**
     * Gets most_common_unit
     * @return string
     */
    public function getMostCommonUnit()
    {
        return $this->container['most_common_unit'];
    }

    /**
     * Sets most_common_unit
     * @param string $most_common_unit Most common unit
     * @return $this
     */
    public function setMostCommonUnit($most_common_unit)
    {
        $this->container['most_common_unit'] = $most_common_unit;

        return $this;
    }

    /**
     * Gets most_common_value
     * @return int
     */
    public function getMostCommonValue()
    {
        return $this->container['most_common_value'];
    }

    /**
     * Sets most_common_value
     * @param int $most_common_value Most common value
     * @return $this
     */
    public function setMostCommonValue($most_common_value)
    {
        $this->container['most_common_value'] = $most_common_value;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name User-defined variable display name.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number_of_aggregate_correlations_as_cause
     * @return int
     */
    public function getNumberOfAggregateCorrelationsAsCause()
    {
        return $this->container['number_of_aggregate_correlations_as_cause'];
    }

    /**
     * Sets number_of_aggregate_correlations_as_cause
     * @param int $number_of_aggregate_correlations_as_cause Example: 386
     * @return $this
     */
    public function setNumberOfAggregateCorrelationsAsCause($number_of_aggregate_correlations_as_cause)
    {
        $this->container['number_of_aggregate_correlations_as_cause'] = $number_of_aggregate_correlations_as_cause;

        return $this;
    }

    /**
     * Gets number_of_aggregate_correlations_as_effect
     * @return int
     */
    public function getNumberOfAggregateCorrelationsAsEffect()
    {
        return $this->container['number_of_aggregate_correlations_as_effect'];
    }

    /**
     * Sets number_of_aggregate_correlations_as_effect
     * @param int $number_of_aggregate_correlations_as_effect Example: 2074
     * @return $this
     */
    public function setNumberOfAggregateCorrelationsAsEffect($number_of_aggregate_correlations_as_effect)
    {
        $this->container['number_of_aggregate_correlations_as_effect'] = $number_of_aggregate_correlations_as_effect;

        return $this;
    }

    /**
     * Gets number_of_changes
     * @return int
     */
    public function getNumberOfChanges()
    {
        return $this->container['number_of_changes'];
    }

    /**
     * Sets number_of_changes
     * @param int $number_of_changes Example: 1317
     * @return $this
     */
    public function setNumberOfChanges($number_of_changes)
    {
        $this->container['number_of_changes'] = $number_of_changes;

        return $this;
    }

    /**
     * Gets number_of_correlations
     * @return int
     */
    public function getNumberOfCorrelations()
    {
        return $this->container['number_of_correlations'];
    }

    /**
     * Sets number_of_correlations
     * @param int $number_of_correlations Number of correlations
     * @return $this
     */
    public function setNumberOfCorrelations($number_of_correlations)
    {
        $this->container['number_of_correlations'] = $number_of_correlations;

        return $this;
    }

    /**
     * Gets number_of_measurements
     * @return int
     */
    public function getNumberOfMeasurements()
    {
        return $this->container['number_of_measurements'];
    }

    /**
     * Sets number_of_measurements
     * @param int $number_of_measurements Example: 308554
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        $this->container['number_of_measurements'] = $number_of_measurements;

        return $this;
    }

    /**
     * Gets number_of_processed_daily_measurements
     * @return int
     */
    public function getNumberOfProcessedDailyMeasurements()
    {
        return $this->container['number_of_processed_daily_measurements'];
    }

    /**
     * Sets number_of_processed_daily_measurements
     * @param int $number_of_processed_daily_measurements Example: 1364
     * @return $this
     */
    public function setNumberOfProcessedDailyMeasurements($number_of_processed_daily_measurements)
    {
        $this->container['number_of_processed_daily_measurements'] = $number_of_processed_daily_measurements;

        return $this;
    }

    /**
     * Gets number_of_raw_measurements
     * @return int
     */
    public function getNumberOfRawMeasurements()
    {
        return $this->container['number_of_raw_measurements'];
    }

    /**
     * Sets number_of_raw_measurements
     * @param int $number_of_raw_measurements Number of measurements
     * @return $this
     */
    public function setNumberOfRawMeasurements($number_of_raw_measurements)
    {
        $this->container['number_of_raw_measurements'] = $number_of_raw_measurements;

        return $this;
    }

    /**
     * Gets number_of_tracking_reminders
     * @return int
     */
    public function getNumberOfTrackingReminders()
    {
        return $this->container['number_of_tracking_reminders'];
    }

    /**
     * Sets number_of_tracking_reminders
     * @param int $number_of_tracking_reminders Example: 6
     * @return $this
     */
    public function setNumberOfTrackingReminders($number_of_tracking_reminders)
    {
        $this->container['number_of_tracking_reminders'] = $number_of_tracking_reminders;

        return $this;
    }

    /**
     * Gets number_of_unique_daily_values
     * @return int
     */
    public function getNumberOfUniqueDailyValues()
    {
        return $this->container['number_of_unique_daily_values'];
    }

    /**
     * Sets number_of_unique_daily_values
     * @param int $number_of_unique_daily_values Example: 283
     * @return $this
     */
    public function setNumberOfUniqueDailyValues($number_of_unique_daily_values)
    {
        $this->container['number_of_unique_daily_values'] = $number_of_unique_daily_values;

        return $this;
    }

    /**
     * Gets number_of_unique_values
     * @return int
     */
    public function getNumberOfUniqueValues()
    {
        return $this->container['number_of_unique_values'];
    }

    /**
     * Sets number_of_unique_values
     * @param int $number_of_unique_values Example: 74
     * @return $this
     */
    public function setNumberOfUniqueValues($number_of_unique_values)
    {
        $this->container['number_of_unique_values'] = $number_of_unique_values;

        return $this;
    }

    /**
     * Gets number_of_user_correlations_as_cause
     * @return int
     */
    public function getNumberOfUserCorrelationsAsCause()
    {
        return $this->container['number_of_user_correlations_as_cause'];
    }

    /**
     * Sets number_of_user_correlations_as_cause
     * @param int $number_of_user_correlations_as_cause Example: 155
     * @return $this
     */
    public function setNumberOfUserCorrelationsAsCause($number_of_user_correlations_as_cause)
    {
        $this->container['number_of_user_correlations_as_cause'] = $number_of_user_correlations_as_cause;

        return $this;
    }

    /**
     * Gets number_of_user_correlations_as_effect
     * @return int
     */
    public function getNumberOfUserCorrelationsAsEffect()
    {
        return $this->container['number_of_user_correlations_as_effect'];
    }

    /**
     * Sets number_of_user_correlations_as_effect
     * @param int $number_of_user_correlations_as_effect Example: 0
     * @return $this
     */
    public function setNumberOfUserCorrelationsAsEffect($number_of_user_correlations_as_effect)
    {
        $this->container['number_of_user_correlations_as_effect'] = $number_of_user_correlations_as_effect;

        return $this;
    }

    /**
     * Gets number_of_user_variables
     * @return int
     */
    public function getNumberOfUserVariables()
    {
        return $this->container['number_of_user_variables'];
    }

    /**
     * Sets number_of_user_variables
     * @param int $number_of_user_variables Example: 307
     * @return $this
     */
    public function setNumberOfUserVariables($number_of_user_variables)
    {
        $this->container['number_of_user_variables'] = $number_of_user_variables;

        return $this;
    }

    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->container['onset_delay'];
    }

    /**
     * Sets onset_delay
     * @param int $onset_delay The amount of time in seconds that elapses after the predictor/stimulus event before the outcome as perceived by a self-tracker is known as the onset delay. For example, the onset delay between the time a person takes an aspirin (predictor/stimulus event) and the time a person perceives a change in their headache severity (outcome) is approximately 30 minutes.
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        $this->container['onset_delay'] = $onset_delay;

        return $this;
    }

    /**
     * Gets onset_delay_in_hours
     * @return int
     */
    public function getOnsetDelayInHours()
    {
        return $this->container['onset_delay_in_hours'];
    }

    /**
     * Sets onset_delay_in_hours
     * @param int $onset_delay_in_hours Example: 0
     * @return $this
     */
    public function setOnsetDelayInHours($onset_delay_in_hours)
    {
        $this->container['onset_delay_in_hours'] = $onset_delay_in_hours;

        return $this;
    }

    /**
     * Gets outcome
     * @return int
     */
    public function getOutcome()
    {
        return $this->container['outcome'];
    }

    /**
     * Sets outcome
     * @param int $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors. These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
     * @return $this
     */
    public function setOutcome($outcome)
    {
        $this->container['outcome'] = $outcome;

        return $this;
    }

    /**
     * Gets outcome_of_interest
     * @return int
     */
    public function getOutcomeOfInterest()
    {
        return $this->container['outcome_of_interest'];
    }

    /**
     * Sets outcome_of_interest
     * @param int $outcome_of_interest Example: 0
     * @return $this
     */
    public function setOutcomeOfInterest($outcome_of_interest)
    {
        $this->container['outcome_of_interest'] = $outcome_of_interest;

        return $this;
    }

    /**
     * Gets parent
     * @return int
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     * @param int $parent Id of the parent variable if this variable has any parent
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets parent_id
     * @return string
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     * @param string $parent_id Example:
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_user_tag_variables
     * @return \QuantiModo\Client\Model\UserVariableArray
     */
    public function getParentUserTagVariables()
    {
        return $this->container['parent_user_tag_variables'];
    }

    /**
     * Sets parent_user_tag_variables
     * @param \QuantiModo\Client\Model\UserVariableArray $parent_user_tag_variables
     * @return $this
     */
    public function setParentUserTagVariables($parent_user_tag_variables)
    {
        $this->container['parent_user_tag_variables'] = $parent_user_tag_variables;

        return $this;
    }

    /**
     * Gets png_path
     * @return string
     */
    public function getPngPath()
    {
        return $this->container['png_path'];
    }

    /**
     * Sets png_path
     * @param string $png_path Example: img/variable_categories/sleep.png
     * @return $this
     */
    public function setPngPath($png_path)
    {
        $this->container['png_path'] = $png_path;

        return $this;
    }

    /**
     * Gets png_url
     * @return string
     */
    public function getPngUrl()
    {
        return $this->container['png_url'];
    }

    /**
     * Sets png_url
     * @param string $png_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/sleep.png
     * @return $this
     */
    public function setPngUrl($png_url)
    {
        $this->container['png_url'] = $png_url;

        return $this;
    }

    /**
     * Gets predictor_of_interest
     * @return int
     */
    public function getPredictorOfInterest()
    {
        return $this->container['predictor_of_interest'];
    }

    /**
     * Sets predictor_of_interest
     * @param int $predictor_of_interest Example: 0
     * @return $this
     */
    public function setPredictorOfInterest($predictor_of_interest)
    {
        $this->container['predictor_of_interest'] = $predictor_of_interest;

        return $this;
    }

    /**
     * Gets price
     * @return string
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param string $price Example:
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product_url
     * @return string
     */
    public function getProductUrl()
    {
        return $this->container['product_url'];
    }

    /**
     * Sets product_url
     * @param string $product_url Example:
     * @return $this
     */
    public function setProductUrl($product_url)
    {
        $this->container['product_url'] = $product_url;

        return $this;
    }

    /**
     * Gets public
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     * @param bool $public Example: 1
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets raw_measurements_at_last_analysis
     * @return int
     */
    public function getRawMeasurementsAtLastAnalysis()
    {
        return $this->container['raw_measurements_at_last_analysis'];
    }

    /**
     * Sets raw_measurements_at_last_analysis
     * @param int $raw_measurements_at_last_analysis The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the rawMeasurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.
     * @return $this
     */
    public function setRawMeasurementsAtLastAnalysis($raw_measurements_at_last_analysis)
    {
        $this->container['raw_measurements_at_last_analysis'] = $raw_measurements_at_last_analysis;

        return $this;
    }

    /**
     * Gets second_most_common_value
     * @return double
     */
    public function getSecondMostCommonValue()
    {
        return $this->container['second_most_common_value'];
    }

    /**
     * Sets second_most_common_value
     * @param double $second_most_common_value Example: 8
     * @return $this
     */
    public function setSecondMostCommonValue($second_most_common_value)
    {
        $this->container['second_most_common_value'] = $second_most_common_value;

        return $this;
    }

    /**
     * Gets second_to_last_value
     * @return double
     */
    public function getSecondToLastValue()
    {
        return $this->container['second_to_last_value'];
    }

    /**
     * Sets second_to_last_value
     * @param double $second_to_last_value Example: 101800
     * @return $this
     */
    public function setSecondToLastValue($second_to_last_value)
    {
        $this->container['second_to_last_value'] = $second_to_last_value;

        return $this;
    }

    /**
     * Gets share_user_measurements
     * @return bool
     */
    public function getShareUserMeasurements()
    {
        return $this->container['share_user_measurements'];
    }

    /**
     * Sets share_user_measurements
     * @param bool $share_user_measurements Example: false
     * @return $this
     */
    public function setShareUserMeasurements($share_user_measurements)
    {
        $this->container['share_user_measurements'] = $share_user_measurements;

        return $this;
    }

    /**
     * Gets skewness
     * @return double
     */
    public function getSkewness()
    {
        return $this->container['skewness'];
    }

    /**
     * Sets skewness
     * @param double $skewness Example: 0.2461351905455
     * @return $this
     */
    public function setSkewness($skewness)
    {
        $this->container['skewness'] = $skewness;

        return $this;
    }

    /**
     * Gets sources
     * @return string
     */
    public function getSources()
    {
        return $this->container['sources'];
    }

    /**
     * Sets sources
     * @param string $sources Comma-separated list of source names to limit variables to those sources
     * @return $this
     */
    public function setSources($sources)
    {
        $this->container['sources'] = $sources;

        return $this;
    }

    /**
     * Gets standard_deviation
     * @return double
     */
    public function getStandardDeviation()
    {
        return $this->container['standard_deviation'];
    }

    /**
     * Sets standard_deviation
     * @param double $standard_deviation Example: 1840.535129803
     * @return $this
     */
    public function setStandardDeviation($standard_deviation)
    {
        $this->container['standard_deviation'] = $standard_deviation;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Example: UPDATED
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subtitle
     * @return string
     */
    public function getSubtitle()
    {
        return $this->container['subtitle'];
    }

    /**
     * Sets subtitle
     * @param string $subtitle Based on sort filter and can be shown beneath variable name on search list
     * @return $this
     */
    public function setSubtitle($subtitle)
    {
        $this->container['subtitle'] = $subtitle;

        return $this;
    }

    /**
     * Gets sub_variables
     * @return \QuantiModo\Client\Model\CommonVariable[]
     */
    public function getSubVariables()
    {
        return $this->container['sub_variables'];
    }

    /**
     * Sets sub_variables
     * @param \QuantiModo\Client\Model\CommonVariable[] $sub_variables Array of Variables that are sub variables to this Variable
     * @return $this
     */
    public function setSubVariables($sub_variables)
    {
        $this->container['sub_variables'] = $sub_variables;

        return $this;
    }

    /**
     * Gets svg_url
     * @return string
     */
    public function getSvgUrl()
    {
        return $this->container['svg_url'];
    }

    /**
     * Sets svg_url
     * @param string $svg_url Example: https://app.quantimo.do/ionic/Modo/www/img/variable_categories/sleep.svg
     * @return $this
     */
    public function setSvgUrl($svg_url)
    {
        $this->container['svg_url'] = $svg_url;

        return $this;
    }

    /**
     * Gets third_most_common_value
     * @return double
     */
    public function getThirdMostCommonValue()
    {
        return $this->container['third_most_common_value'];
    }

    /**
     * Sets third_most_common_value
     * @param double $third_most_common_value Example: 7
     * @return $this
     */
    public function setThirdMostCommonValue($third_most_common_value)
    {
        $this->container['third_most_common_value'] = $third_most_common_value;

        return $this;
    }

    /**
     * Gets third_to_last_value
     * @return double
     */
    public function getThirdToLastValue()
    {
        return $this->container['third_to_last_value'];
    }

    /**
     * Sets third_to_last_value
     * @param double $third_to_last_value Example: 102000
     * @return $this
     */
    public function setThirdToLastValue($third_to_last_value)
    {
        $this->container['third_to_last_value'] = $third_to_last_value;

        return $this;
    }

    /**
     * Gets upc
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     * @param string $upc Universal product code or similar
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets updated
     * @return int
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     * @param int $updated When this variable or its settings were last updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at Example: 2017-07-31 03:57:06
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Example: 230
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets valence
     * @return string
     */
    public function getValence()
    {
        return $this->container['valence'];
    }

    /**
     * Sets valence
     * @param string $valence Example: positive
     * @return $this
     */
    public function setValence($valence)
    {
        $this->container['valence'] = $valence;

        return $this;
    }

    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->container['variable_category_id'];
    }

    /**
     * Sets variable_category_id
     * @param int $variable_category_id Example: 6
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        $this->container['variable_category_id'] = $variable_category_id;

        return $this;
    }

    /**
     * Gets variable_category_image_url
     * @return string
     */
    public function getVariableCategoryImageUrl()
    {
        return $this->container['variable_category_image_url'];
    }

    /**
     * Sets variable_category_image_url
     * @param string $variable_category_image_url Example: https://maxcdn.icons8.com/Color/PNG/96/Household/sleeping_in_bed-96.png
     * @return $this
     */
    public function setVariableCategoryImageUrl($variable_category_image_url)
    {
        $this->container['variable_category_image_url'] = $variable_category_image_url;

        return $this;
    }

    /**
     * Gets variable_category_name
     * @return string
     */
    public function getVariableCategoryName()
    {
        return $this->container['variable_category_name'];
    }

    /**
     * Sets variable_category_name
     * @param string $variable_category_name Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
     * @return $this
     */
    public function setVariableCategoryName($variable_category_name)
    {
        $this->container['variable_category_name'] = $variable_category_name;

        return $this;
    }

    /**
     * Gets variable_filling_value
     * @return double
     */
    public function getVariableFillingValue()
    {
        return $this->container['variable_filling_value'];
    }

    /**
     * Sets variable_filling_value
     * @param double $variable_filling_value Example: -1
     * @return $this
     */
    public function setVariableFillingValue($variable_filling_value)
    {
        $this->container['variable_filling_value'] = $variable_filling_value;

        return $this;
    }

    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     * @param int $variable_id Example: 96380
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        $this->container['variable_id'] = $variable_id;

        return $this;
    }

    /**
     * Gets variable_name
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     * @param string $variable_name Example: Sleep Duration
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variance
     * @return double
     */
    public function getVariance()
    {
        return $this->container['variance'];
    }

    /**
     * Sets variance
     * @param double $variance Example: 115947037.40816
     * @return $this
     */
    public function setVariance($variance)
    {
        $this->container['variance'] = $variance;

        return $this;
    }

    /**
     * Gets wikipedia_title
     * @return string
     */
    public function getWikipediaTitle()
    {
        return $this->container['wikipedia_title'];
    }

    /**
     * Sets wikipedia_title
     * @param string $wikipedia_title Example:
     * @return $this
     */
    public function setWikipediaTitle($wikipedia_title)
    {
        $this->container['wikipedia_title'] = $wikipedia_title;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


