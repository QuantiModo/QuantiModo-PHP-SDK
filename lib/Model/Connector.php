<?php
/**
 * Connector
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Connector Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Connector implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'display_name' => 'string',
        'image' => 'string',
        'get_it_url' => 'string',
        'connected' => 'string',
        'connect_instructions' => 'string',
        'last_update' => 'int',
        'total_measurements_in_last_update' => 'int',
        'no_data_yet' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'display_name' => 'displayName',
        'image' => 'image',
        'get_it_url' => 'getItUrl',
        'connected' => 'connected',
        'connect_instructions' => 'connectInstructions',
        'last_update' => 'lastUpdate',
        'total_measurements_in_last_update' => 'totalMeasurementsInLastUpdate',
        'no_data_yet' => 'noDataYet'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'image' => 'setImage',
        'get_it_url' => 'setGetItUrl',
        'connected' => 'setConnected',
        'connect_instructions' => 'setConnectInstructions',
        'last_update' => 'setLastUpdate',
        'total_measurements_in_last_update' => 'setTotalMeasurementsInLastUpdate',
        'no_data_yet' => 'setNoDataYet'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'image' => 'getImage',
        'get_it_url' => 'getGetItUrl',
        'connected' => 'getConnected',
        'connect_instructions' => 'getConnectInstructions',
        'last_update' => 'getLastUpdate',
        'total_measurements_in_last_update' => 'getTotalMeasurementsInLastUpdate',
        'no_data_yet' => 'getNoDataYet'
    );
  
    
    /**
      * $id Connector ID number
      * @var int
      */
    protected $id;
    
    /**
      * $name Connector lowercase system name
      * @var string
      */
    protected $name;
    
    /**
      * $display_name Connector pretty display name
      * @var string
      */
    protected $display_name;
    
    /**
      * $image URL to the image of the connector logo
      * @var string
      */
    protected $image;
    
    /**
      * $get_it_url URL to a site where one can get this device or application
      * @var string
      */
    protected $get_it_url;
    
    /**
      * $connected True if the authenticated user has this connector enabled
      * @var string
      */
    protected $connected;
    
    /**
      * $connect_instructions URL and parameters used when connecting to a service
      * @var string
      */
    protected $connect_instructions;
    
    /**
      * $last_update Epoch timestamp of last sync
      * @var int
      */
    protected $last_update;
    
    /**
      * $total_measurements_in_last_update Number of measurements obtained during latest update
      * @var int
      */
    protected $total_measurements_in_last_update;
    
    /**
      * $no_data_yet True if user has no measurements for this connector
      * @var bool
      */
    protected $no_data_yet;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->display_name = $data["display_name"];
            $this->image = $data["image"];
            $this->get_it_url = $data["get_it_url"];
            $this->connected = $data["connected"];
            $this->connect_instructions = $data["connect_instructions"];
            $this->last_update = $data["last_update"];
            $this->total_measurements_in_last_update = $data["total_measurements_in_last_update"];
            $this->no_data_yet = $data["no_data_yet"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Connector ID number
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Connector lowercase system name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }
  
    /**
     * Sets display_name
     * @param string $display_name Connector pretty display name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        
        $this->display_name = $display_name;
        return $this;
    }
    
    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
  
    /**
     * Sets image
     * @param string $image URL to the image of the connector logo
     * @return $this
     */
    public function setImage($image)
    {
        
        $this->image = $image;
        return $this;
    }
    
    /**
     * Gets get_it_url
     * @return string
     */
    public function getGetItUrl()
    {
        return $this->get_it_url;
    }
  
    /**
     * Sets get_it_url
     * @param string $get_it_url URL to a site where one can get this device or application
     * @return $this
     */
    public function setGetItUrl($get_it_url)
    {
        
        $this->get_it_url = $get_it_url;
        return $this;
    }
    
    /**
     * Gets connected
     * @return string
     */
    public function getConnected()
    {
        return $this->connected;
    }
  
    /**
     * Sets connected
     * @param string $connected True if the authenticated user has this connector enabled
     * @return $this
     */
    public function setConnected($connected)
    {
        
        $this->connected = $connected;
        return $this;
    }
    
    /**
     * Gets connect_instructions
     * @return string
     */
    public function getConnectInstructions()
    {
        return $this->connect_instructions;
    }
  
    /**
     * Sets connect_instructions
     * @param string $connect_instructions URL and parameters used when connecting to a service
     * @return $this
     */
    public function setConnectInstructions($connect_instructions)
    {
        
        $this->connect_instructions = $connect_instructions;
        return $this;
    }
    
    /**
     * Gets last_update
     * @return int
     */
    public function getLastUpdate()
    {
        return $this->last_update;
    }
  
    /**
     * Sets last_update
     * @param int $last_update Epoch timestamp of last sync
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        
        $this->last_update = $last_update;
        return $this;
    }
    
    /**
     * Gets total_measurements_in_last_update
     * @return int
     */
    public function getTotalMeasurementsInLastUpdate()
    {
        return $this->total_measurements_in_last_update;
    }
  
    /**
     * Sets total_measurements_in_last_update
     * @param int $total_measurements_in_last_update Number of measurements obtained during latest update
     * @return $this
     */
    public function setTotalMeasurementsInLastUpdate($total_measurements_in_last_update)
    {
        
        $this->total_measurements_in_last_update = $total_measurements_in_last_update;
        return $this;
    }
    
    /**
     * Gets no_data_yet
     * @return bool
     */
    public function getNoDataYet()
    {
        return $this->no_data_yet;
    }
  
    /**
     * Sets no_data_yet
     * @param bool $no_data_yet True if user has no measurements for this connector
     * @return $this
     */
    public function setNoDataYet($no_data_yet)
    {
        
        $this->no_data_yet = $no_data_yet;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
