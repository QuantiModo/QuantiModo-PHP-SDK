<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class CorrelationsApi {

  function __construct($apiClient = null) {
    if (null === $apiClient) {
      if (Configuration::$apiClient === null) {
        Configuration::$apiClient = new APIClient(); // create a new API client if not present
        $this->apiClient = Configuration::$apiClient;
      }
      else
        $this->apiClient = Configuration::$apiClient; // use the default one
    } else {
      $this->apiClient = $apiClient; // use the one provided by the user
    }
  }

  private $apiClient; // instance of the APIClient

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * correlationsGet
   *
   * Get correlations
   *
   * @param string $effect ORIGINAL variable name of the effect variable for which the user desires correlations (required)
   * @param string $cause ORIGINAL variable name of the cause variable for which the user desires correlations (required)
   * @return array[Correlation]
   */
   public function correlationsGet($effect, $cause) {
      

      // parse inputs
      $resourcePath = "/correlations";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($effect !== null) {
        $queryParams['effect'] = $this->apiClient->toQueryValue($effect);
      }// query params
      if($cause !== null) {
        $queryParams['cause'] = $this->apiClient->toQueryValue($cause);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * publicCorrelationsSearchSearchGet
   *
   * Get average correlations for variables containing search term
   *
   * @param string $search Name of the variable that you want to know the causes or effects of. (required)
   * @param string $effect_or_cause Specifies whether to return the effects or causes of the searched variable. (required)
   * @return array[Correlation]
   */
   public function publicCorrelationsSearchSearchGet($search, $effect_or_cause) {
      
      // verify the required parameter 'search' is set
      if ($search === null) {
        throw new \InvalidArgumentException('Missing the required parameter $search when calling publicCorrelationsSearchSearchGet');
      }
      
      // verify the required parameter 'effect_or_cause' is set
      if ($effect_or_cause === null) {
        throw new \InvalidArgumentException('Missing the required parameter $effect_or_cause when calling publicCorrelationsSearchSearchGet');
      }
      

      // parse inputs
      $resourcePath = "/public/correlations/search/{search}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($effect_or_cause !== null) {
        $queryParams['effectOrCause'] = $this->apiClient->toQueryValue($effect_or_cause);
      }
      
      // path params
      if($search !== null) {
        $resourcePath = str_replace("{" . "search" . "}",
                                    $this->apiClient->toPathValue($search), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1CorrelationsPost
   *
   * Add correlation or/and vote for it
   *
   * @param PostCorrelation $body Provides correlation data (required)
   * @return void
   */
   public function v1CorrelationsPost($body) {
      
      // verify the required parameter 'body' is set
      if ($body === null) {
        throw new \InvalidArgumentException('Missing the required parameter $body when calling v1CorrelationsPost');
      }
      

      // parse inputs
      $resourcePath = "/v1/correlations";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      
      
      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      
  }
  
  /**
   * v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet
   *
   * Search user correlations for a given effect
   *
   * @param int $organization_id Organization ID (required)
   * @param int $user_id User id (required)
   * @param string $variable_name Effect variable name (required)
   * @param string $organization_token Organization access token (required)
   * @param string $include_public Include bublic correlations, Can be \&quot;1\&quot; or empty. (required)
   * @return array[Correlation]
   */
   public function v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet($organization_id, $user_id, $variable_name, $organization_token, $include_public) {
      
      // verify the required parameter 'organization_id' is set
      if ($organization_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
      }
      
      // verify the required parameter 'user_id' is set
      if ($user_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $user_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
      }
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
      }
      
      // verify the required parameter 'organization_token' is set
      if ($organization_token === null) {
        throw new \InvalidArgumentException('Missing the required parameter $organization_token when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($organization_token !== null) {
        $queryParams['organization_token'] = $this->apiClient->toQueryValue($organization_token);
      }// query params
      if($include_public !== null) {
        $queryParams['include_public'] = $this->apiClient->toQueryValue($include_public);
      }
      
      // path params
      if($organization_id !== null) {
        $resourcePath = str_replace("{" . "organizationId" . "}",
                                    $this->apiClient->toPathValue($organization_id), $resourcePath);
      }// path params
      if($user_id !== null) {
        $resourcePath = str_replace("{" . "userId" . "}",
                                    $this->apiClient->toPathValue($user_id), $resourcePath);
      }// path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet
   *
   * Search user correlations for a given cause
   *
   * @param int $organization_id Organization ID (required)
   * @param int $user_id User id (required)
   * @param string $variable_name Cause variable name (required)
   * @param string $organization_token Organization access token (required)
   * @param string $include_public Include bublic correlations, Can be \&quot;1\&quot; or empty. (required)
   * @return array[Correlation]
   */
   public function v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet($organization_id, $user_id, $variable_name, $organization_token, $include_public) {
      
      // verify the required parameter 'organization_id' is set
      if ($organization_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
      }
      
      // verify the required parameter 'user_id' is set
      if ($user_id === null) {
        throw new \InvalidArgumentException('Missing the required parameter $user_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
      }
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
      }
      
      // verify the required parameter 'organization_token' is set
      if ($organization_token === null) {
        throw new \InvalidArgumentException('Missing the required parameter $organization_token when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($organization_token !== null) {
        $queryParams['organization_token'] = $this->apiClient->toQueryValue($organization_token);
      }// query params
      if($include_public !== null) {
        $queryParams['include_public'] = $this->apiClient->toQueryValue($include_public);
      }
      
      // path params
      if($organization_id !== null) {
        $resourcePath = str_replace("{" . "organizationId" . "}",
                                    $this->apiClient->toPathValue($organization_id), $resourcePath);
      }// path params
      if($user_id !== null) {
        $resourcePath = str_replace("{" . "userId" . "}",
                                    $this->apiClient->toPathValue($user_id), $resourcePath);
      }// path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1VariablesVariableNameCausesGet
   *
   * Search user correlations for a given effect
   *
   * @param string $variable_name Effect variable name (required)
   * @return array[Correlation]
   */
   public function v1VariablesVariableNameCausesGet($variable_name) {
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNameCausesGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/variables/{variableName}/causes";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1VariablesVariableNameEffectsGet
   *
   * Search user correlations for a given cause
   *
   * @param string $variable_name Cause variable name (required)
   * @return array[Correlation]
   */
   public function v1VariablesVariableNameEffectsGet($variable_name) {
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNameEffectsGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/variables/{variableName}/effects";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1VariablesVariableNamePublicCausesGet
   *
   * Search public correlations for a given effect
   *
   * @param string $variable_name Effect variable name (required)
   * @return array[Correlation]
   */
   public function v1VariablesVariableNamePublicCausesGet($variable_name) {
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNamePublicCausesGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/variables/{variableName}/public/causes";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  
  /**
   * v1VariablesVariableNamePublicEffectsGet
   *
   * Search public correlations for a given cause
   *
   * @param string $variable_name Cause variable name (required)
   * @return array[Correlation]
   */
   public function v1VariablesVariableNamePublicEffectsGet($variable_name) {
      
      // verify the required parameter 'variable_name' is set
      if ($variable_name === null) {
        throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNamePublicEffectsGet');
      }
      

      // parse inputs
      $resourcePath = "/v1/variables/{variableName}/public/effects";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      
      
      // path params
      if($variable_name !== null) {
        $resourcePath = str_replace("{" . "variableName" . "}",
                                    $this->apiClient->toPathValue($variable_name), $resourcePath);
      }
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array('oauth2');

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Correlation]');
      return $responseObject;
  }
  

}
