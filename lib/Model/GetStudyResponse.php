<?php
/**
 * GetStudyResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * GetStudyResponse Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetStudyResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GetStudyResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cause_processed_daily_measurements' => '\QuantiModo\Client\Model\ProcessedDailyMeasurement[]',
        'cause_variable' => '\QuantiModo\Client\Model\UserVariable',
        'charts' => '\QuantiModo\Client\Model\Chart[]',
        'data' => '\QuantiModo\Client\Model\GetStudyDataResponse',
        'effect_processed_daily_measurements' => '\QuantiModo\Client\Model\ProcessedDailyMeasurement[]',
        'effect_variable' => '\QuantiModo\Client\Model\UserVariable',
        'message' => 'string',
        'pairs' => '\QuantiModo\Client\Model\Pair[]',
        'pairs_of_averages_for_all_users' => '\QuantiModo\Client\Model\PairsOfAveragesForAllUser[]',
        'participant_instructions' => '\QuantiModo\Client\Model\ParticipantInstruction',
        'statistics' => '\QuantiModo\Client\Model\Correlation',
        'status' => 'int',
        'success' => 'bool',
        'text' => '\QuantiModo\Client\Model\Text',
        'type' => 'string',
        'user_correlations' => '\QuantiModo\Client\Model\Correlation[]',
        'user_id' => 'int',
        'user_study' => '\QuantiModo\Client\Model\UserStudy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cause_processed_daily_measurements' => null,
        'cause_variable' => null,
        'charts' => null,
        'data' => null,
        'effect_processed_daily_measurements' => null,
        'effect_variable' => null,
        'message' => null,
        'pairs' => null,
        'pairs_of_averages_for_all_users' => null,
        'participant_instructions' => null,
        'statistics' => null,
        'status' => null,
        'success' => null,
        'text' => null,
        'type' => null,
        'user_correlations' => null,
        'user_id' => null,
        'user_study' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cause_processed_daily_measurements' => 'causeProcessedDailyMeasurements',
        'cause_variable' => 'causeVariable',
        'charts' => 'charts',
        'data' => 'data',
        'effect_processed_daily_measurements' => 'effectProcessedDailyMeasurements',
        'effect_variable' => 'effectVariable',
        'message' => 'message',
        'pairs' => 'pairs',
        'pairs_of_averages_for_all_users' => 'pairsOfAveragesForAllUsers',
        'participant_instructions' => 'participantInstructions',
        'statistics' => 'statistics',
        'status' => 'status',
        'success' => 'success',
        'text' => 'text',
        'type' => 'type',
        'user_correlations' => 'userCorrelations',
        'user_id' => 'userId',
        'user_study' => 'userStudy'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cause_processed_daily_measurements' => 'setCauseProcessedDailyMeasurements',
        'cause_variable' => 'setCauseVariable',
        'charts' => 'setCharts',
        'data' => 'setData',
        'effect_processed_daily_measurements' => 'setEffectProcessedDailyMeasurements',
        'effect_variable' => 'setEffectVariable',
        'message' => 'setMessage',
        'pairs' => 'setPairs',
        'pairs_of_averages_for_all_users' => 'setPairsOfAveragesForAllUsers',
        'participant_instructions' => 'setParticipantInstructions',
        'statistics' => 'setStatistics',
        'status' => 'setStatus',
        'success' => 'setSuccess',
        'text' => 'setText',
        'type' => 'setType',
        'user_correlations' => 'setUserCorrelations',
        'user_id' => 'setUserId',
        'user_study' => 'setUserStudy'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cause_processed_daily_measurements' => 'getCauseProcessedDailyMeasurements',
        'cause_variable' => 'getCauseVariable',
        'charts' => 'getCharts',
        'data' => 'getData',
        'effect_processed_daily_measurements' => 'getEffectProcessedDailyMeasurements',
        'effect_variable' => 'getEffectVariable',
        'message' => 'getMessage',
        'pairs' => 'getPairs',
        'pairs_of_averages_for_all_users' => 'getPairsOfAveragesForAllUsers',
        'participant_instructions' => 'getParticipantInstructions',
        'statistics' => 'getStatistics',
        'status' => 'getStatus',
        'success' => 'getSuccess',
        'text' => 'getText',
        'type' => 'getType',
        'user_correlations' => 'getUserCorrelations',
        'user_id' => 'getUserId',
        'user_study' => 'getUserStudy'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cause_processed_daily_measurements'] = isset($data['cause_processed_daily_measurements']) ? $data['cause_processed_daily_measurements'] : null;
        $this->container['cause_variable'] = isset($data['cause_variable']) ? $data['cause_variable'] : null;
        $this->container['charts'] = isset($data['charts']) ? $data['charts'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['effect_processed_daily_measurements'] = isset($data['effect_processed_daily_measurements']) ? $data['effect_processed_daily_measurements'] : null;
        $this->container['effect_variable'] = isset($data['effect_variable']) ? $data['effect_variable'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['pairs'] = isset($data['pairs']) ? $data['pairs'] : null;
        $this->container['pairs_of_averages_for_all_users'] = isset($data['pairs_of_averages_for_all_users']) ? $data['pairs_of_averages_for_all_users'] : null;
        $this->container['participant_instructions'] = isset($data['participant_instructions']) ? $data['participant_instructions'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user_correlations'] = isset($data['user_correlations']) ? $data['user_correlations'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['user_study'] = isset($data['user_study']) ? $data['user_study'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['success'] === null) {
            $invalid_properties[] = "'success' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['success'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cause_processed_daily_measurements
     * @return \QuantiModo\Client\Model\ProcessedDailyMeasurement[]
     */
    public function getCauseProcessedDailyMeasurements()
    {
        return $this->container['cause_processed_daily_measurements'];
    }

    /**
     * Sets cause_processed_daily_measurements
     * @param \QuantiModo\Client\Model\ProcessedDailyMeasurement[] $cause_processed_daily_measurements
     * @return $this
     */
    public function setCauseProcessedDailyMeasurements($cause_processed_daily_measurements)
    {
        $this->container['cause_processed_daily_measurements'] = $cause_processed_daily_measurements;

        return $this;
    }

    /**
     * Gets cause_variable
     * @return \QuantiModo\Client\Model\UserVariable
     */
    public function getCauseVariable()
    {
        return $this->container['cause_variable'];
    }

    /**
     * Sets cause_variable
     * @param \QuantiModo\Client\Model\UserVariable $cause_variable
     * @return $this
     */
    public function setCauseVariable($cause_variable)
    {
        $this->container['cause_variable'] = $cause_variable;

        return $this;
    }

    /**
     * Gets charts
     * @return \QuantiModo\Client\Model\Chart[]
     */
    public function getCharts()
    {
        return $this->container['charts'];
    }

    /**
     * Sets charts
     * @param \QuantiModo\Client\Model\Chart[] $charts
     * @return $this
     */
    public function setCharts($charts)
    {
        $this->container['charts'] = $charts;

        return $this;
    }

    /**
     * Gets data
     * @return \QuantiModo\Client\Model\GetStudyDataResponse
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     * @param \QuantiModo\Client\Model\GetStudyDataResponse $data
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets effect_processed_daily_measurements
     * @return \QuantiModo\Client\Model\ProcessedDailyMeasurement[]
     */
    public function getEffectProcessedDailyMeasurements()
    {
        return $this->container['effect_processed_daily_measurements'];
    }

    /**
     * Sets effect_processed_daily_measurements
     * @param \QuantiModo\Client\Model\ProcessedDailyMeasurement[] $effect_processed_daily_measurements
     * @return $this
     */
    public function setEffectProcessedDailyMeasurements($effect_processed_daily_measurements)
    {
        $this->container['effect_processed_daily_measurements'] = $effect_processed_daily_measurements;

        return $this;
    }

    /**
     * Gets effect_variable
     * @return \QuantiModo\Client\Model\UserVariable
     */
    public function getEffectVariable()
    {
        return $this->container['effect_variable'];
    }

    /**
     * Sets effect_variable
     * @param \QuantiModo\Client\Model\UserVariable $effect_variable
     * @return $this
     */
    public function setEffectVariable($effect_variable)
    {
        $this->container['effect_variable'] = $effect_variable;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message Message
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets pairs
     * @return \QuantiModo\Client\Model\Pair[]
     */
    public function getPairs()
    {
        return $this->container['pairs'];
    }

    /**
     * Sets pairs
     * @param \QuantiModo\Client\Model\Pair[] $pairs
     * @return $this
     */
    public function setPairs($pairs)
    {
        $this->container['pairs'] = $pairs;

        return $this;
    }

    /**
     * Gets pairs_of_averages_for_all_users
     * @return \QuantiModo\Client\Model\PairsOfAveragesForAllUser[]
     */
    public function getPairsOfAveragesForAllUsers()
    {
        return $this->container['pairs_of_averages_for_all_users'];
    }

    /**
     * Sets pairs_of_averages_for_all_users
     * @param \QuantiModo\Client\Model\PairsOfAveragesForAllUser[] $pairs_of_averages_for_all_users
     * @return $this
     */
    public function setPairsOfAveragesForAllUsers($pairs_of_averages_for_all_users)
    {
        $this->container['pairs_of_averages_for_all_users'] = $pairs_of_averages_for_all_users;

        return $this;
    }

    /**
     * Gets participant_instructions
     * @return \QuantiModo\Client\Model\ParticipantInstruction
     */
    public function getParticipantInstructions()
    {
        return $this->container['participant_instructions'];
    }

    /**
     * Sets participant_instructions
     * @param \QuantiModo\Client\Model\ParticipantInstruction $participant_instructions
     * @return $this
     */
    public function setParticipantInstructions($participant_instructions)
    {
        $this->container['participant_instructions'] = $participant_instructions;

        return $this;
    }

    /**
     * Gets statistics
     * @return \QuantiModo\Client\Model\Correlation
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     * @param \QuantiModo\Client\Model\Correlation $statistics
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets status
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param int $status Status code
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets success
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     * @param bool $success
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets text
     * @return \QuantiModo\Client\Model\Text
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     * @param \QuantiModo\Client\Model\Text $text
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Example: population
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_correlations
     * @return \QuantiModo\Client\Model\Correlation[]
     */
    public function getUserCorrelations()
    {
        return $this->container['user_correlations'];
    }

    /**
     * Sets user_correlations
     * @param \QuantiModo\Client\Model\Correlation[] $user_correlations
     * @return $this
     */
    public function setUserCorrelations($user_correlations)
    {
        $this->container['user_correlations'] = $user_correlations;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Example: 230
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_study
     * @return \QuantiModo\Client\Model\UserStudy
     */
    public function getUserStudy()
    {
        return $this->container['user_study'];
    }

    /**
     * Sets user_study
     * @param \QuantiModo\Client\Model\UserStudy $user_study
     * @return $this
     */
    public function setUserStudy($user_study)
    {
        $this->container['user_study'] = $user_study;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


