<?php
/**
 * UserVariable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * UserVariable Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UserVariable implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'parent_id' => 'int',
        'user_id' => 'int',
        'client_id' => 'string',
        'variable_id' => 'int',
        'default_unit_id' => 'int',
        'minimum_allowed_value' => 'float',
        'maximum_allowed_value' => 'float',
        'filling_value' => 'float',
        'join_with' => 'int',
        'onset_delay' => 'int',
        'duration_of_action' => 'int',
        'variable_category_id' => 'int',
        'updated' => 'int',
        'public' => 'int',
        'cause_only' => 'bool',
        'filling_type' => 'string',
        'number_of_measurements' => 'int',
        'number_of_processed_measurements' => 'int',
        'measurements_at_last_analysis' => 'int',
        'last_unit_id' => 'int',
        'last_original_unit_id' => 'int',
        'last_value' => 'float',
        'last_original_value' => 'int',
        'last_source_id' => 'int',
        'number_of_correlations' => 'int',
        'status' => 'string',
        'error_message' => 'string',
        'last_successful_update_time' => '\DateTime',
        'standard_deviation' => 'float',
        'variance' => 'float',
        'minimum_recorded_value' => 'float',
        'maximum_recorded_daily_value' => 'float',
        'mean' => 'float',
        'median' => 'float',
        'most_common_unit_id' => 'int',
        'most_common_value' => 'float',
        'number_of_unique_daily_values' => 'float',
        'number_of_changes' => 'int',
        'skewness' => 'float',
        'kurtosis' => 'float',
        'latitude' => 'float',
        'longitude' => 'float',
        'location' => 'string',
        'experiment_start_time' => '\DateTime',
        'experiment_end_time' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'outcome' => 'bool',
        'sources' => 'string',
        'earliest_source_time' => 'int',
        'latest_source_time' => 'int',
        'earliest_measurement_time' => 'int',
        'latest_measurement_time' => 'int',
        'earliest_filling_time' => 'int',
        'latest_filling_time' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'parent_id' => 'parent_id',
        'user_id' => 'user_id',
        'client_id' => 'client_id',
        'variable_id' => 'variable_id',
        'default_unit_id' => 'default_unit_id',
        'minimum_allowed_value' => 'minimum_allowed_value',
        'maximum_allowed_value' => 'maximum_allowed_value',
        'filling_value' => 'filling_value',
        'join_with' => 'join_with',
        'onset_delay' => 'onset_delay',
        'duration_of_action' => 'duration_of_action',
        'variable_category_id' => 'variable_category_id',
        'updated' => 'updated',
        'public' => 'public',
        'cause_only' => 'cause_only',
        'filling_type' => 'filling_type',
        'number_of_measurements' => 'number_of_measurements',
        'number_of_processed_measurements' => 'number_of_processed_measurements',
        'measurements_at_last_analysis' => 'measurements_at_last_analysis',
        'last_unit_id' => 'last_unit_id',
        'last_original_unit_id' => 'last_original_unit_id',
        'last_value' => 'last_value',
        'last_original_value' => 'last_original_value',
        'last_source_id' => 'last_source_id',
        'number_of_correlations' => 'number_of_correlations',
        'status' => 'status',
        'error_message' => 'error_message',
        'last_successful_update_time' => 'last_successful_update_time',
        'standard_deviation' => 'standard_deviation',
        'variance' => 'variance',
        'minimum_recorded_value' => 'minimum_recorded_value',
        'maximum_recorded_daily_value' => 'maximum_recorded_daily_value',
        'mean' => 'mean',
        'median' => 'median',
        'most_common_unit_id' => 'most_common_unit_id',
        'most_common_value' => 'most_common_value',
        'number_of_unique_daily_values' => 'number_of_unique_daily_values',
        'number_of_changes' => 'number_of_changes',
        'skewness' => 'skewness',
        'kurtosis' => 'kurtosis',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'location' => 'location',
        'experiment_start_time' => 'experiment_start_time',
        'experiment_end_time' => 'experiment_end_time',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'outcome' => 'outcome',
        'sources' => 'sources',
        'earliest_source_time' => 'earliest_source_time',
        'latest_source_time' => 'latest_source_time',
        'earliest_measurement_time' => 'earliest_measurement_time',
        'latest_measurement_time' => 'latest_measurement_time',
        'earliest_filling_time' => 'earliest_filling_time',
        'latest_filling_time' => 'latest_filling_time'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'parent_id' => 'setParentId',
        'user_id' => 'setUserId',
        'client_id' => 'setClientId',
        'variable_id' => 'setVariableId',
        'default_unit_id' => 'setDefaultUnitId',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'maximum_allowed_value' => 'setMaximumAllowedValue',
        'filling_value' => 'setFillingValue',
        'join_with' => 'setJoinWith',
        'onset_delay' => 'setOnsetDelay',
        'duration_of_action' => 'setDurationOfAction',
        'variable_category_id' => 'setVariableCategoryId',
        'updated' => 'setUpdated',
        'public' => 'setPublic',
        'cause_only' => 'setCauseOnly',
        'filling_type' => 'setFillingType',
        'number_of_measurements' => 'setNumberOfMeasurements',
        'number_of_processed_measurements' => 'setNumberOfProcessedMeasurements',
        'measurements_at_last_analysis' => 'setMeasurementsAtLastAnalysis',
        'last_unit_id' => 'setLastUnitId',
        'last_original_unit_id' => 'setLastOriginalUnitId',
        'last_value' => 'setLastValue',
        'last_original_value' => 'setLastOriginalValue',
        'last_source_id' => 'setLastSourceId',
        'number_of_correlations' => 'setNumberOfCorrelations',
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'last_successful_update_time' => 'setLastSuccessfulUpdateTime',
        'standard_deviation' => 'setStandardDeviation',
        'variance' => 'setVariance',
        'minimum_recorded_value' => 'setMinimumRecordedValue',
        'maximum_recorded_daily_value' => 'setMaximumRecordedDailyValue',
        'mean' => 'setMean',
        'median' => 'setMedian',
        'most_common_unit_id' => 'setMostCommonUnitId',
        'most_common_value' => 'setMostCommonValue',
        'number_of_unique_daily_values' => 'setNumberOfUniqueDailyValues',
        'number_of_changes' => 'setNumberOfChanges',
        'skewness' => 'setSkewness',
        'kurtosis' => 'setKurtosis',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'location' => 'setLocation',
        'experiment_start_time' => 'setExperimentStartTime',
        'experiment_end_time' => 'setExperimentEndTime',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'outcome' => 'setOutcome',
        'sources' => 'setSources',
        'earliest_source_time' => 'setEarliestSourceTime',
        'latest_source_time' => 'setLatestSourceTime',
        'earliest_measurement_time' => 'setEarliestMeasurementTime',
        'latest_measurement_time' => 'setLatestMeasurementTime',
        'earliest_filling_time' => 'setEarliestFillingTime',
        'latest_filling_time' => 'setLatestFillingTime'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'parent_id' => 'getParentId',
        'user_id' => 'getUserId',
        'client_id' => 'getClientId',
        'variable_id' => 'getVariableId',
        'default_unit_id' => 'getDefaultUnitId',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'maximum_allowed_value' => 'getMaximumAllowedValue',
        'filling_value' => 'getFillingValue',
        'join_with' => 'getJoinWith',
        'onset_delay' => 'getOnsetDelay',
        'duration_of_action' => 'getDurationOfAction',
        'variable_category_id' => 'getVariableCategoryId',
        'updated' => 'getUpdated',
        'public' => 'getPublic',
        'cause_only' => 'getCauseOnly',
        'filling_type' => 'getFillingType',
        'number_of_measurements' => 'getNumberOfMeasurements',
        'number_of_processed_measurements' => 'getNumberOfProcessedMeasurements',
        'measurements_at_last_analysis' => 'getMeasurementsAtLastAnalysis',
        'last_unit_id' => 'getLastUnitId',
        'last_original_unit_id' => 'getLastOriginalUnitId',
        'last_value' => 'getLastValue',
        'last_original_value' => 'getLastOriginalValue',
        'last_source_id' => 'getLastSourceId',
        'number_of_correlations' => 'getNumberOfCorrelations',
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'last_successful_update_time' => 'getLastSuccessfulUpdateTime',
        'standard_deviation' => 'getStandardDeviation',
        'variance' => 'getVariance',
        'minimum_recorded_value' => 'getMinimumRecordedValue',
        'maximum_recorded_daily_value' => 'getMaximumRecordedDailyValue',
        'mean' => 'getMean',
        'median' => 'getMedian',
        'most_common_unit_id' => 'getMostCommonUnitId',
        'most_common_value' => 'getMostCommonValue',
        'number_of_unique_daily_values' => 'getNumberOfUniqueDailyValues',
        'number_of_changes' => 'getNumberOfChanges',
        'skewness' => 'getSkewness',
        'kurtosis' => 'getKurtosis',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'location' => 'getLocation',
        'experiment_start_time' => 'getExperimentStartTime',
        'experiment_end_time' => 'getExperimentEndTime',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'outcome' => 'getOutcome',
        'sources' => 'getSources',
        'earliest_source_time' => 'getEarliestSourceTime',
        'latest_source_time' => 'getLatestSourceTime',
        'earliest_measurement_time' => 'getEarliestMeasurementTime',
        'latest_measurement_time' => 'getLatestMeasurementTime',
        'earliest_filling_time' => 'getEarliestFillingTime',
        'latest_filling_time' => 'getLatestFillingTime'
    );
  
    
    /**
      * $parent_id ID of the parent variable if this variable has any parent
      * @var int
      */
    protected $parent_id;
    
    /**
      * $user_id User ID
      * @var int
      */
    protected $user_id;
    
    /**
      * $client_id client_id
      * @var string
      */
    protected $client_id;
    
    /**
      * $variable_id ID of variable
      * @var int
      */
    protected $variable_id;
    
    /**
      * $default_unit_id ID of unit to use for this variable
      * @var int
      */
    protected $default_unit_id;
    
    /**
      * $minimum_allowed_value Minimum reasonable value for this variable (uses default unit)
      * @var float
      */
    protected $minimum_allowed_value;
    
    /**
      * $maximum_allowed_value Maximum reasonable value for this variable (uses default unit)
      * @var float
      */
    protected $maximum_allowed_value;
    
    /**
      * $filling_value Value for replacing null measurements
      * @var float
      */
    protected $filling_value;
    
    /**
      * $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
      * @var int
      */
    protected $join_with;
    
    /**
      * $onset_delay How long it takes for a measurement in this variable to take effect
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $variable_category_id ID of variable category
      * @var int
      */
    protected $variable_category_id;
    
    /**
      * $updated updated
      * @var int
      */
    protected $updated;
    
    /**
      * $public Is variable public
      * @var int
      */
    protected $public;
    
    /**
      * $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
      * @var bool
      */
    protected $cause_only;
    
    /**
      * $filling_type 0 -> No filling, 1 -> Use filling-value
      * @var string
      */
    protected $filling_type;
    
    /**
      * $number_of_measurements Number of measurements
      * @var int
      */
    protected $number_of_measurements;
    
    /**
      * $number_of_processed_measurements Number of processed measurements
      * @var int
      */
    protected $number_of_processed_measurements;
    
    /**
      * $measurements_at_last_analysis Number of measurements at last analysis
      * @var int
      */
    protected $measurements_at_last_analysis;
    
    /**
      * $last_unit_id ID of last Unit
      * @var int
      */
    protected $last_unit_id;
    
    /**
      * $last_original_unit_id ID of last original Unit
      * @var int
      */
    protected $last_original_unit_id;
    
    /**
      * $last_value Last Value
      * @var float
      */
    protected $last_value;
    
    /**
      * $last_original_value Last original value which is stored
      * @var int
      */
    protected $last_original_value;
    
    /**
      * $last_source_id ID of last source
      * @var int
      */
    protected $last_source_id;
    
    /**
      * $number_of_correlations Number of correlations for this variable
      * @var int
      */
    protected $number_of_correlations;
    
    /**
      * $status status
      * @var string
      */
    protected $status;
    
    /**
      * $error_message error_message
      * @var string
      */
    protected $error_message;
    
    /**
      * $last_successful_update_time When this variable or its settings were last updated
      * @var \DateTime
      */
    protected $last_successful_update_time;
    
    /**
      * $standard_deviation Standard deviation
      * @var float
      */
    protected $standard_deviation;
    
    /**
      * $variance Variance
      * @var float
      */
    protected $variance;
    
    /**
      * $minimum_recorded_value Minimum recorded value of this variable
      * @var float
      */
    protected $minimum_recorded_value;
    
    /**
      * $maximum_recorded_daily_value Maximum recorded daily value of this variable
      * @var float
      */
    protected $maximum_recorded_daily_value;
    
    /**
      * $mean Mean
      * @var float
      */
    protected $mean;
    
    /**
      * $median Median
      * @var float
      */
    protected $median;
    
    /**
      * $most_common_unit_id Most common Unit ID
      * @var int
      */
    protected $most_common_unit_id;
    
    /**
      * $most_common_value Most common value
      * @var float
      */
    protected $most_common_value;
    
    /**
      * $number_of_unique_daily_values Number of unique daily values
      * @var float
      */
    protected $number_of_unique_daily_values;
    
    /**
      * $number_of_changes Number of changes
      * @var int
      */
    protected $number_of_changes;
    
    /**
      * $skewness Skewness
      * @var float
      */
    protected $skewness;
    
    /**
      * $kurtosis Kurtosis
      * @var float
      */
    protected $kurtosis;
    
    /**
      * $latitude Latitude
      * @var float
      */
    protected $latitude;
    
    /**
      * $longitude Longitude
      * @var float
      */
    protected $longitude;
    
    /**
      * $location Location
      * @var string
      */
    protected $location;
    
    /**
      * $experiment_start_time Earliest measurement start_time to be used in analysis. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $experiment_start_time;
    
    /**
      * $experiment_end_time Latest measurement start_time to be used in analysis. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $experiment_end_time;
    
    /**
      * $created_at When the record was first created. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $updated_at;
    
    /**
      * $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
      * @var bool
      */
    protected $outcome;
    
    /**
      * $sources Comma-separated list of source names to limit variables to those sources
      * @var string
      */
    protected $sources;
    
    /**
      * $earliest_source_time Earliest source time
      * @var int
      */
    protected $earliest_source_time;
    
    /**
      * $latest_source_time Latest source time
      * @var int
      */
    protected $latest_source_time;
    
    /**
      * $earliest_measurement_time Earliest measurement time
      * @var int
      */
    protected $earliest_measurement_time;
    
    /**
      * $latest_measurement_time Latest measurement time
      * @var int
      */
    protected $latest_measurement_time;
    
    /**
      * $earliest_filling_time Earliest filling time
      * @var int
      */
    protected $earliest_filling_time;
    
    /**
      * $latest_filling_time Latest filling time
      * @var int
      */
    protected $latest_filling_time;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->parent_id = $data["parent_id"];
            $this->user_id = $data["user_id"];
            $this->client_id = $data["client_id"];
            $this->variable_id = $data["variable_id"];
            $this->default_unit_id = $data["default_unit_id"];
            $this->minimum_allowed_value = $data["minimum_allowed_value"];
            $this->maximum_allowed_value = $data["maximum_allowed_value"];
            $this->filling_value = $data["filling_value"];
            $this->join_with = $data["join_with"];
            $this->onset_delay = $data["onset_delay"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->variable_category_id = $data["variable_category_id"];
            $this->updated = $data["updated"];
            $this->public = $data["public"];
            $this->cause_only = $data["cause_only"];
            $this->filling_type = $data["filling_type"];
            $this->number_of_measurements = $data["number_of_measurements"];
            $this->number_of_processed_measurements = $data["number_of_processed_measurements"];
            $this->measurements_at_last_analysis = $data["measurements_at_last_analysis"];
            $this->last_unit_id = $data["last_unit_id"];
            $this->last_original_unit_id = $data["last_original_unit_id"];
            $this->last_value = $data["last_value"];
            $this->last_original_value = $data["last_original_value"];
            $this->last_source_id = $data["last_source_id"];
            $this->number_of_correlations = $data["number_of_correlations"];
            $this->status = $data["status"];
            $this->error_message = $data["error_message"];
            $this->last_successful_update_time = $data["last_successful_update_time"];
            $this->standard_deviation = $data["standard_deviation"];
            $this->variance = $data["variance"];
            $this->minimum_recorded_value = $data["minimum_recorded_value"];
            $this->maximum_recorded_daily_value = $data["maximum_recorded_daily_value"];
            $this->mean = $data["mean"];
            $this->median = $data["median"];
            $this->most_common_unit_id = $data["most_common_unit_id"];
            $this->most_common_value = $data["most_common_value"];
            $this->number_of_unique_daily_values = $data["number_of_unique_daily_values"];
            $this->number_of_changes = $data["number_of_changes"];
            $this->skewness = $data["skewness"];
            $this->kurtosis = $data["kurtosis"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->location = $data["location"];
            $this->experiment_start_time = $data["experiment_start_time"];
            $this->experiment_end_time = $data["experiment_end_time"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
            $this->outcome = $data["outcome"];
            $this->sources = $data["sources"];
            $this->earliest_source_time = $data["earliest_source_time"];
            $this->latest_source_time = $data["latest_source_time"];
            $this->earliest_measurement_time = $data["earliest_measurement_time"];
            $this->latest_measurement_time = $data["latest_measurement_time"];
            $this->earliest_filling_time = $data["earliest_filling_time"];
            $this->latest_filling_time = $data["latest_filling_time"];
        }
    }
    
    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->parent_id;
    }
  
    /**
     * Sets parent_id
     * @param int $parent_id ID of the parent variable if this variable has any parent
     * @return $this
     */
    public function setParentId($parent_id)
    {
        
        $this->parent_id = $parent_id;
        return $this;
    }
    
    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param int $user_id User ID
     * @return $this
     */
    public function setUserId($user_id)
    {
        
        $this->user_id = $user_id;
        return $this;
    }
    
    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }
  
    /**
     * Sets client_id
     * @param string $client_id client_id
     * @return $this
     */
    public function setClientId($client_id)
    {
        
        $this->client_id = $client_id;
        return $this;
    }
    
    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->variable_id;
    }
  
    /**
     * Sets variable_id
     * @param int $variable_id ID of variable
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        
        $this->variable_id = $variable_id;
        return $this;
    }
    
    /**
     * Gets default_unit_id
     * @return int
     */
    public function getDefaultUnitId()
    {
        return $this->default_unit_id;
    }
  
    /**
     * Sets default_unit_id
     * @param int $default_unit_id ID of unit to use for this variable
     * @return $this
     */
    public function setDefaultUnitId($default_unit_id)
    {
        
        $this->default_unit_id = $default_unit_id;
        return $this;
    }
    
    /**
     * Gets minimum_allowed_value
     * @return float
     */
    public function getMinimumAllowedValue()
    {
        return $this->minimum_allowed_value;
    }
  
    /**
     * Sets minimum_allowed_value
     * @param float $minimum_allowed_value Minimum reasonable value for this variable (uses default unit)
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        
        $this->minimum_allowed_value = $minimum_allowed_value;
        return $this;
    }
    
    /**
     * Gets maximum_allowed_value
     * @return float
     */
    public function getMaximumAllowedValue()
    {
        return $this->maximum_allowed_value;
    }
  
    /**
     * Sets maximum_allowed_value
     * @param float $maximum_allowed_value Maximum reasonable value for this variable (uses default unit)
     * @return $this
     */
    public function setMaximumAllowedValue($maximum_allowed_value)
    {
        
        $this->maximum_allowed_value = $maximum_allowed_value;
        return $this;
    }
    
    /**
     * Gets filling_value
     * @return float
     */
    public function getFillingValue()
    {
        return $this->filling_value;
    }
  
    /**
     * Sets filling_value
     * @param float $filling_value Value for replacing null measurements
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        
        $this->filling_value = $filling_value;
        return $this;
    }
    
    /**
     * Gets join_with
     * @return int
     */
    public function getJoinWith()
    {
        return $this->join_with;
    }
  
    /**
     * Sets join_with
     * @param int $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables
     * @return $this
     */
    public function setJoinWith($join_with)
    {
        
        $this->join_with = $join_with;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay How long it takes for a measurement in this variable to take effect
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->variable_category_id;
    }
  
    /**
     * Sets variable_category_id
     * @param int $variable_category_id ID of variable category
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        
        $this->variable_category_id = $variable_category_id;
        return $this;
    }
    
    /**
     * Gets updated
     * @return int
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param int $updated updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Gets public
     * @return int
     */
    public function getPublic()
    {
        return $this->public;
    }
  
    /**
     * Sets public
     * @param int $public Is variable public
     * @return $this
     */
    public function setPublic($public)
    {
        
        $this->public = $public;
        return $this;
    }
    
    /**
     * Gets cause_only
     * @return bool
     */
    public function getCauseOnly()
    {
        return $this->cause_only;
    }
  
    /**
     * Sets cause_only
     * @param bool $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user
     * @return $this
     */
    public function setCauseOnly($cause_only)
    {
        
        $this->cause_only = $cause_only;
        return $this;
    }
    
    /**
     * Gets filling_type
     * @return string
     */
    public function getFillingType()
    {
        return $this->filling_type;
    }
  
    /**
     * Sets filling_type
     * @param string $filling_type 0 -> No filling, 1 -> Use filling-value
     * @return $this
     */
    public function setFillingType($filling_type)
    {
        
        $this->filling_type = $filling_type;
        return $this;
    }
    
    /**
     * Gets number_of_measurements
     * @return int
     */
    public function getNumberOfMeasurements()
    {
        return $this->number_of_measurements;
    }
  
    /**
     * Sets number_of_measurements
     * @param int $number_of_measurements Number of measurements
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        
        $this->number_of_measurements = $number_of_measurements;
        return $this;
    }
    
    /**
     * Gets number_of_processed_measurements
     * @return int
     */
    public function getNumberOfProcessedMeasurements()
    {
        return $this->number_of_processed_measurements;
    }
  
    /**
     * Sets number_of_processed_measurements
     * @param int $number_of_processed_measurements Number of processed measurements
     * @return $this
     */
    public function setNumberOfProcessedMeasurements($number_of_processed_measurements)
    {
        
        $this->number_of_processed_measurements = $number_of_processed_measurements;
        return $this;
    }
    
    /**
     * Gets measurements_at_last_analysis
     * @return int
     */
    public function getMeasurementsAtLastAnalysis()
    {
        return $this->measurements_at_last_analysis;
    }
  
    /**
     * Sets measurements_at_last_analysis
     * @param int $measurements_at_last_analysis Number of measurements at last analysis
     * @return $this
     */
    public function setMeasurementsAtLastAnalysis($measurements_at_last_analysis)
    {
        
        $this->measurements_at_last_analysis = $measurements_at_last_analysis;
        return $this;
    }
    
    /**
     * Gets last_unit_id
     * @return int
     */
    public function getLastUnitId()
    {
        return $this->last_unit_id;
    }
  
    /**
     * Sets last_unit_id
     * @param int $last_unit_id ID of last Unit
     * @return $this
     */
    public function setLastUnitId($last_unit_id)
    {
        
        $this->last_unit_id = $last_unit_id;
        return $this;
    }
    
    /**
     * Gets last_original_unit_id
     * @return int
     */
    public function getLastOriginalUnitId()
    {
        return $this->last_original_unit_id;
    }
  
    /**
     * Sets last_original_unit_id
     * @param int $last_original_unit_id ID of last original Unit
     * @return $this
     */
    public function setLastOriginalUnitId($last_original_unit_id)
    {
        
        $this->last_original_unit_id = $last_original_unit_id;
        return $this;
    }
    
    /**
     * Gets last_value
     * @return float
     */
    public function getLastValue()
    {
        return $this->last_value;
    }
  
    /**
     * Sets last_value
     * @param float $last_value Last Value
     * @return $this
     */
    public function setLastValue($last_value)
    {
        
        $this->last_value = $last_value;
        return $this;
    }
    
    /**
     * Gets last_original_value
     * @return int
     */
    public function getLastOriginalValue()
    {
        return $this->last_original_value;
    }
  
    /**
     * Sets last_original_value
     * @param int $last_original_value Last original value which is stored
     * @return $this
     */
    public function setLastOriginalValue($last_original_value)
    {
        
        $this->last_original_value = $last_original_value;
        return $this;
    }
    
    /**
     * Gets last_source_id
     * @return int
     */
    public function getLastSourceId()
    {
        return $this->last_source_id;
    }
  
    /**
     * Sets last_source_id
     * @param int $last_source_id ID of last source
     * @return $this
     */
    public function setLastSourceId($last_source_id)
    {
        
        $this->last_source_id = $last_source_id;
        return $this;
    }
    
    /**
     * Gets number_of_correlations
     * @return int
     */
    public function getNumberOfCorrelations()
    {
        return $this->number_of_correlations;
    }
  
    /**
     * Sets number_of_correlations
     * @param int $number_of_correlations Number of correlations for this variable
     * @return $this
     */
    public function setNumberOfCorrelations($number_of_correlations)
    {
        
        $this->number_of_correlations = $number_of_correlations;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status status
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }
  
    /**
     * Sets error_message
     * @param string $error_message error_message
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        
        $this->error_message = $error_message;
        return $this;
    }
    
    /**
     * Gets last_successful_update_time
     * @return \DateTime
     */
    public function getLastSuccessfulUpdateTime()
    {
        return $this->last_successful_update_time;
    }
  
    /**
     * Sets last_successful_update_time
     * @param \DateTime $last_successful_update_time When this variable or its settings were last updated
     * @return $this
     */
    public function setLastSuccessfulUpdateTime($last_successful_update_time)
    {
        
        $this->last_successful_update_time = $last_successful_update_time;
        return $this;
    }
    
    /**
     * Gets standard_deviation
     * @return float
     */
    public function getStandardDeviation()
    {
        return $this->standard_deviation;
    }
  
    /**
     * Sets standard_deviation
     * @param float $standard_deviation Standard deviation
     * @return $this
     */
    public function setStandardDeviation($standard_deviation)
    {
        
        $this->standard_deviation = $standard_deviation;
        return $this;
    }
    
    /**
     * Gets variance
     * @return float
     */
    public function getVariance()
    {
        return $this->variance;
    }
  
    /**
     * Sets variance
     * @param float $variance Variance
     * @return $this
     */
    public function setVariance($variance)
    {
        
        $this->variance = $variance;
        return $this;
    }
    
    /**
     * Gets minimum_recorded_value
     * @return float
     */
    public function getMinimumRecordedValue()
    {
        return $this->minimum_recorded_value;
    }
  
    /**
     * Sets minimum_recorded_value
     * @param float $minimum_recorded_value Minimum recorded value of this variable
     * @return $this
     */
    public function setMinimumRecordedValue($minimum_recorded_value)
    {
        
        $this->minimum_recorded_value = $minimum_recorded_value;
        return $this;
    }
    
    /**
     * Gets maximum_recorded_daily_value
     * @return float
     */
    public function getMaximumRecordedDailyValue()
    {
        return $this->maximum_recorded_daily_value;
    }
  
    /**
     * Sets maximum_recorded_daily_value
     * @param float $maximum_recorded_daily_value Maximum recorded daily value of this variable
     * @return $this
     */
    public function setMaximumRecordedDailyValue($maximum_recorded_daily_value)
    {
        
        $this->maximum_recorded_daily_value = $maximum_recorded_daily_value;
        return $this;
    }
    
    /**
     * Gets mean
     * @return float
     */
    public function getMean()
    {
        return $this->mean;
    }
  
    /**
     * Sets mean
     * @param float $mean Mean
     * @return $this
     */
    public function setMean($mean)
    {
        
        $this->mean = $mean;
        return $this;
    }
    
    /**
     * Gets median
     * @return float
     */
    public function getMedian()
    {
        return $this->median;
    }
  
    /**
     * Sets median
     * @param float $median Median
     * @return $this
     */
    public function setMedian($median)
    {
        
        $this->median = $median;
        return $this;
    }
    
    /**
     * Gets most_common_unit_id
     * @return int
     */
    public function getMostCommonUnitId()
    {
        return $this->most_common_unit_id;
    }
  
    /**
     * Sets most_common_unit_id
     * @param int $most_common_unit_id Most common Unit ID
     * @return $this
     */
    public function setMostCommonUnitId($most_common_unit_id)
    {
        
        $this->most_common_unit_id = $most_common_unit_id;
        return $this;
    }
    
    /**
     * Gets most_common_value
     * @return float
     */
    public function getMostCommonValue()
    {
        return $this->most_common_value;
    }
  
    /**
     * Sets most_common_value
     * @param float $most_common_value Most common value
     * @return $this
     */
    public function setMostCommonValue($most_common_value)
    {
        
        $this->most_common_value = $most_common_value;
        return $this;
    }
    
    /**
     * Gets number_of_unique_daily_values
     * @return float
     */
    public function getNumberOfUniqueDailyValues()
    {
        return $this->number_of_unique_daily_values;
    }
  
    /**
     * Sets number_of_unique_daily_values
     * @param float $number_of_unique_daily_values Number of unique daily values
     * @return $this
     */
    public function setNumberOfUniqueDailyValues($number_of_unique_daily_values)
    {
        
        $this->number_of_unique_daily_values = $number_of_unique_daily_values;
        return $this;
    }
    
    /**
     * Gets number_of_changes
     * @return int
     */
    public function getNumberOfChanges()
    {
        return $this->number_of_changes;
    }
  
    /**
     * Sets number_of_changes
     * @param int $number_of_changes Number of changes
     * @return $this
     */
    public function setNumberOfChanges($number_of_changes)
    {
        
        $this->number_of_changes = $number_of_changes;
        return $this;
    }
    
    /**
     * Gets skewness
     * @return float
     */
    public function getSkewness()
    {
        return $this->skewness;
    }
  
    /**
     * Sets skewness
     * @param float $skewness Skewness
     * @return $this
     */
    public function setSkewness($skewness)
    {
        
        $this->skewness = $skewness;
        return $this;
    }
    
    /**
     * Gets kurtosis
     * @return float
     */
    public function getKurtosis()
    {
        return $this->kurtosis;
    }
  
    /**
     * Sets kurtosis
     * @param float $kurtosis Kurtosis
     * @return $this
     */
    public function setKurtosis($kurtosis)
    {
        
        $this->kurtosis = $kurtosis;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param float $latitude Latitude
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param float $longitude Longitude
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->location;
    }
  
    /**
     * Sets location
     * @param string $location Location
     * @return $this
     */
    public function setLocation($location)
    {
        
        $this->location = $location;
        return $this;
    }
    
    /**
     * Gets experiment_start_time
     * @return \DateTime
     */
    public function getExperimentStartTime()
    {
        return $this->experiment_start_time;
    }
  
    /**
     * Sets experiment_start_time
     * @param \DateTime $experiment_start_time Earliest measurement start_time to be used in analysis. Use ISO 8601 datetime format
     * @return $this
     */
    public function setExperimentStartTime($experiment_start_time)
    {
        
        $this->experiment_start_time = $experiment_start_time;
        return $this;
    }
    
    /**
     * Gets experiment_end_time
     * @return \DateTime
     */
    public function getExperimentEndTime()
    {
        return $this->experiment_end_time;
    }
  
    /**
     * Sets experiment_end_time
     * @param \DateTime $experiment_end_time Latest measurement start_time to be used in analysis. Use ISO 8601 datetime format
     * @return $this
     */
    public function setExperimentEndTime($experiment_end_time)
    {
        
        $this->experiment_end_time = $experiment_end_time;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at When the record was first created. Use ISO 8601 datetime format
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Gets outcome
     * @return bool
     */
    public function getOutcome()
    {
        return $this->outcome;
    }
  
    /**
     * Sets outcome
     * @param bool $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables
     * @return $this
     */
    public function setOutcome($outcome)
    {
        
        $this->outcome = $outcome;
        return $this;
    }
    
    /**
     * Gets sources
     * @return string
     */
    public function getSources()
    {
        return $this->sources;
    }
  
    /**
     * Sets sources
     * @param string $sources Comma-separated list of source names to limit variables to those sources
     * @return $this
     */
    public function setSources($sources)
    {
        
        $this->sources = $sources;
        return $this;
    }
    
    /**
     * Gets earliest_source_time
     * @return int
     */
    public function getEarliestSourceTime()
    {
        return $this->earliest_source_time;
    }
  
    /**
     * Sets earliest_source_time
     * @param int $earliest_source_time Earliest source time
     * @return $this
     */
    public function setEarliestSourceTime($earliest_source_time)
    {
        
        $this->earliest_source_time = $earliest_source_time;
        return $this;
    }
    
    /**
     * Gets latest_source_time
     * @return int
     */
    public function getLatestSourceTime()
    {
        return $this->latest_source_time;
    }
  
    /**
     * Sets latest_source_time
     * @param int $latest_source_time Latest source time
     * @return $this
     */
    public function setLatestSourceTime($latest_source_time)
    {
        
        $this->latest_source_time = $latest_source_time;
        return $this;
    }
    
    /**
     * Gets earliest_measurement_time
     * @return int
     */
    public function getEarliestMeasurementTime()
    {
        return $this->earliest_measurement_time;
    }
  
    /**
     * Sets earliest_measurement_time
     * @param int $earliest_measurement_time Earliest measurement time
     * @return $this
     */
    public function setEarliestMeasurementTime($earliest_measurement_time)
    {
        
        $this->earliest_measurement_time = $earliest_measurement_time;
        return $this;
    }
    
    /**
     * Gets latest_measurement_time
     * @return int
     */
    public function getLatestMeasurementTime()
    {
        return $this->latest_measurement_time;
    }
  
    /**
     * Sets latest_measurement_time
     * @param int $latest_measurement_time Latest measurement time
     * @return $this
     */
    public function setLatestMeasurementTime($latest_measurement_time)
    {
        
        $this->latest_measurement_time = $latest_measurement_time;
        return $this;
    }
    
    /**
     * Gets earliest_filling_time
     * @return int
     */
    public function getEarliestFillingTime()
    {
        return $this->earliest_filling_time;
    }
  
    /**
     * Sets earliest_filling_time
     * @param int $earliest_filling_time Earliest filling time
     * @return $this
     */
    public function setEarliestFillingTime($earliest_filling_time)
    {
        
        $this->earliest_filling_time = $earliest_filling_time;
        return $this;
    }
    
    /**
     * Gets latest_filling_time
     * @return int
     */
    public function getLatestFillingTime()
    {
        return $this->latest_filling_time;
    }
  
    /**
     * Sets latest_filling_time
     * @param int $latest_filling_time Latest filling time
     * @return $this
     */
    public function setLatestFillingTime($latest_filling_time)
    {
        
        $this->latest_filling_time = $latest_filling_time;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
