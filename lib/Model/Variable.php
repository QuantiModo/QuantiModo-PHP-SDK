<?php
/**
 * Variable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Variable Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Variable implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'client_id' => 'string',
        'parent_id' => 'int',
        'name' => 'string',
        'variable_category_id' => 'int',
        'default_unit_id' => 'int',
        'combination_operation' => 'string',
        'filling_value' => 'float',
        'maximum_allowed_value' => 'float',
        'minimum_allowed_value' => 'float',
        'onset_delay' => 'int',
        'duration_of_action' => 'int',
        'public' => 'int',
        'cause_only' => 'bool',
        'most_common_value' => 'float',
        'most_common_unit_id' => 'int',
        'standard_deviation' => 'float',
        'variance' => 'float',
        'mean' => 'float',
        'median' => 'float',
        'number_of_measurements' => 'float',
        'number_of_unique_values' => 'float',
        'skewness' => 'float',
        'kurtosis' => 'float',
        'status' => 'string',
        'error_message' => 'string',
        'last_successful_update_time' => '\DateTime',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'product_url' => 'string',
        'image_url' => 'string',
        'price' => 'float',
        'number_of_user_variables' => 'int',
        'outcome' => 'bool',
        'minimum_recorded_value' => 'float',
        'maximum_recorded_value' => 'float'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'client_id' => 'client_id',
        'parent_id' => 'parent_id',
        'name' => 'name',
        'variable_category_id' => 'variable_category_id',
        'default_unit_id' => 'default_unit_id',
        'combination_operation' => 'combination_operation',
        'filling_value' => 'filling_value',
        'maximum_allowed_value' => 'maximum_allowed_value',
        'minimum_allowed_value' => 'minimum_allowed_value',
        'onset_delay' => 'onset_delay',
        'duration_of_action' => 'duration_of_action',
        'public' => 'public',
        'cause_only' => 'cause_only',
        'most_common_value' => 'most_common_value',
        'most_common_unit_id' => 'most_common_unit_id',
        'standard_deviation' => 'standard_deviation',
        'variance' => 'variance',
        'mean' => 'mean',
        'median' => 'median',
        'number_of_measurements' => 'number_of_measurements',
        'number_of_unique_values' => 'number_of_unique_values',
        'skewness' => 'skewness',
        'kurtosis' => 'kurtosis',
        'status' => 'status',
        'error_message' => 'error_message',
        'last_successful_update_time' => 'last_successful_update_time',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'product_url' => 'product_url',
        'image_url' => 'image_url',
        'price' => 'price',
        'number_of_user_variables' => 'number_of_user_variables',
        'outcome' => 'outcome',
        'minimum_recorded_value' => 'minimum_recorded_value',
        'maximum_recorded_value' => 'maximum_recorded_value'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'client_id' => 'setClientId',
        'parent_id' => 'setParentId',
        'name' => 'setName',
        'variable_category_id' => 'setVariableCategoryId',
        'default_unit_id' => 'setDefaultUnitId',
        'combination_operation' => 'setCombinationOperation',
        'filling_value' => 'setFillingValue',
        'maximum_allowed_value' => 'setMaximumAllowedValue',
        'minimum_allowed_value' => 'setMinimumAllowedValue',
        'onset_delay' => 'setOnsetDelay',
        'duration_of_action' => 'setDurationOfAction',
        'public' => 'setPublic',
        'cause_only' => 'setCauseOnly',
        'most_common_value' => 'setMostCommonValue',
        'most_common_unit_id' => 'setMostCommonUnitId',
        'standard_deviation' => 'setStandardDeviation',
        'variance' => 'setVariance',
        'mean' => 'setMean',
        'median' => 'setMedian',
        'number_of_measurements' => 'setNumberOfMeasurements',
        'number_of_unique_values' => 'setNumberOfUniqueValues',
        'skewness' => 'setSkewness',
        'kurtosis' => 'setKurtosis',
        'status' => 'setStatus',
        'error_message' => 'setErrorMessage',
        'last_successful_update_time' => 'setLastSuccessfulUpdateTime',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'product_url' => 'setProductUrl',
        'image_url' => 'setImageUrl',
        'price' => 'setPrice',
        'number_of_user_variables' => 'setNumberOfUserVariables',
        'outcome' => 'setOutcome',
        'minimum_recorded_value' => 'setMinimumRecordedValue',
        'maximum_recorded_value' => 'setMaximumRecordedValue'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'client_id' => 'getClientId',
        'parent_id' => 'getParentId',
        'name' => 'getName',
        'variable_category_id' => 'getVariableCategoryId',
        'default_unit_id' => 'getDefaultUnitId',
        'combination_operation' => 'getCombinationOperation',
        'filling_value' => 'getFillingValue',
        'maximum_allowed_value' => 'getMaximumAllowedValue',
        'minimum_allowed_value' => 'getMinimumAllowedValue',
        'onset_delay' => 'getOnsetDelay',
        'duration_of_action' => 'getDurationOfAction',
        'public' => 'getPublic',
        'cause_only' => 'getCauseOnly',
        'most_common_value' => 'getMostCommonValue',
        'most_common_unit_id' => 'getMostCommonUnitId',
        'standard_deviation' => 'getStandardDeviation',
        'variance' => 'getVariance',
        'mean' => 'getMean',
        'median' => 'getMedian',
        'number_of_measurements' => 'getNumberOfMeasurements',
        'number_of_unique_values' => 'getNumberOfUniqueValues',
        'skewness' => 'getSkewness',
        'kurtosis' => 'getKurtosis',
        'status' => 'getStatus',
        'error_message' => 'getErrorMessage',
        'last_successful_update_time' => 'getLastSuccessfulUpdateTime',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'product_url' => 'getProductUrl',
        'image_url' => 'getImageUrl',
        'price' => 'getPrice',
        'number_of_user_variables' => 'getNumberOfUserVariables',
        'outcome' => 'getOutcome',
        'minimum_recorded_value' => 'getMinimumRecordedValue',
        'maximum_recorded_value' => 'getMaximumRecordedValue'
    );
  
    
    /**
      * $id id
      * @var int
      */
    protected $id;
    
    /**
      * $client_id client_id
      * @var string
      */
    protected $client_id;
    
    /**
      * $parent_id parent_id
      * @var int
      */
    protected $parent_id;
    
    /**
      * $name Name of the variable
      * @var string
      */
    protected $name;
    
    /**
      * $variable_category_id Category of the variable
      * @var int
      */
    protected $variable_category_id;
    
    /**
      * $default_unit_id ID of the default unit of measurement to use for this variable
      * @var int
      */
    protected $default_unit_id;
    
    /**
      * $combination_operation How to combine values of this variable (for instance, to see a summary of the values over a month) 0 for sum OR 1 for mean
      * @var string
      */
    protected $combination_operation;
    
    /**
      * $filling_value filling_value
      * @var float
      */
    protected $filling_value;
    
    /**
      * $maximum_allowed_value maximum_allowed_value
      * @var float
      */
    protected $maximum_allowed_value;
    
    /**
      * $minimum_allowed_value minimum_allowed_value
      * @var float
      */
    protected $minimum_allowed_value;
    
    /**
      * $onset_delay onset_delay
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $duration_of_action duration_of_action
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $public public
      * @var int
      */
    protected $public;
    
    /**
      * $cause_only cause_only
      * @var bool
      */
    protected $cause_only;
    
    /**
      * $most_common_value most_common_value
      * @var float
      */
    protected $most_common_value;
    
    /**
      * $most_common_unit_id most_common_unit_id
      * @var int
      */
    protected $most_common_unit_id;
    
    /**
      * $standard_deviation standard_deviation
      * @var float
      */
    protected $standard_deviation;
    
    /**
      * $variance variance
      * @var float
      */
    protected $variance;
    
    /**
      * $mean mean
      * @var float
      */
    protected $mean;
    
    /**
      * $median median
      * @var float
      */
    protected $median;
    
    /**
      * $number_of_measurements number_of_measurements
      * @var float
      */
    protected $number_of_measurements;
    
    /**
      * $number_of_unique_values number_of_unique_values
      * @var float
      */
    protected $number_of_unique_values;
    
    /**
      * $skewness skewness
      * @var float
      */
    protected $skewness;
    
    /**
      * $kurtosis kurtosis
      * @var float
      */
    protected $kurtosis;
    
    /**
      * $status status
      * @var string
      */
    protected $status;
    
    /**
      * $error_message error_message
      * @var string
      */
    protected $error_message;
    
    /**
      * $last_successful_update_time last_successful_update_time
      * @var \DateTime
      */
    protected $last_successful_update_time;
    
    /**
      * $created_at created_at
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at updated_at
      * @var \DateTime
      */
    protected $updated_at;
    
    /**
      * $product_url product_url
      * @var string
      */
    protected $product_url;
    
    /**
      * $image_url image_url
      * @var string
      */
    protected $image_url;
    
    /**
      * $price price
      * @var float
      */
    protected $price;
    
    /**
      * $number_of_user_variables number_of_user_variables
      * @var int
      */
    protected $number_of_user_variables;
    
    /**
      * $outcome outcome
      * @var bool
      */
    protected $outcome;
    
    /**
      * $minimum_recorded_value minimum_recorded_value
      * @var float
      */
    protected $minimum_recorded_value;
    
    /**
      * $maximum_recorded_value maximum_recorded_value
      * @var float
      */
    protected $maximum_recorded_value;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->client_id = $data["client_id"];
            $this->parent_id = $data["parent_id"];
            $this->name = $data["name"];
            $this->variable_category_id = $data["variable_category_id"];
            $this->default_unit_id = $data["default_unit_id"];
            $this->combination_operation = $data["combination_operation"];
            $this->filling_value = $data["filling_value"];
            $this->maximum_allowed_value = $data["maximum_allowed_value"];
            $this->minimum_allowed_value = $data["minimum_allowed_value"];
            $this->onset_delay = $data["onset_delay"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->public = $data["public"];
            $this->cause_only = $data["cause_only"];
            $this->most_common_value = $data["most_common_value"];
            $this->most_common_unit_id = $data["most_common_unit_id"];
            $this->standard_deviation = $data["standard_deviation"];
            $this->variance = $data["variance"];
            $this->mean = $data["mean"];
            $this->median = $data["median"];
            $this->number_of_measurements = $data["number_of_measurements"];
            $this->number_of_unique_values = $data["number_of_unique_values"];
            $this->skewness = $data["skewness"];
            $this->kurtosis = $data["kurtosis"];
            $this->status = $data["status"];
            $this->error_message = $data["error_message"];
            $this->last_successful_update_time = $data["last_successful_update_time"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
            $this->product_url = $data["product_url"];
            $this->image_url = $data["image_url"];
            $this->price = $data["price"];
            $this->number_of_user_variables = $data["number_of_user_variables"];
            $this->outcome = $data["outcome"];
            $this->minimum_recorded_value = $data["minimum_recorded_value"];
            $this->maximum_recorded_value = $data["maximum_recorded_value"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }
  
    /**
     * Sets client_id
     * @param string $client_id client_id
     * @return $this
     */
    public function setClientId($client_id)
    {
        
        $this->client_id = $client_id;
        return $this;
    }
    
    /**
     * Gets parent_id
     * @return int
     */
    public function getParentId()
    {
        return $this->parent_id;
    }
  
    /**
     * Sets parent_id
     * @param int $parent_id parent_id
     * @return $this
     */
    public function setParentId($parent_id)
    {
        
        $this->parent_id = $parent_id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Name of the variable
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets variable_category_id
     * @return int
     */
    public function getVariableCategoryId()
    {
        return $this->variable_category_id;
    }
  
    /**
     * Sets variable_category_id
     * @param int $variable_category_id Category of the variable
     * @return $this
     */
    public function setVariableCategoryId($variable_category_id)
    {
        
        $this->variable_category_id = $variable_category_id;
        return $this;
    }
    
    /**
     * Gets default_unit_id
     * @return int
     */
    public function getDefaultUnitId()
    {
        return $this->default_unit_id;
    }
  
    /**
     * Sets default_unit_id
     * @param int $default_unit_id ID of the default unit of measurement to use for this variable
     * @return $this
     */
    public function setDefaultUnitId($default_unit_id)
    {
        
        $this->default_unit_id = $default_unit_id;
        return $this;
    }
    
    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->combination_operation;
    }
  
    /**
     * Sets combination_operation
     * @param string $combination_operation How to combine values of this variable (for instance, to see a summary of the values over a month) 0 for sum OR 1 for mean
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        
        $this->combination_operation = $combination_operation;
        return $this;
    }
    
    /**
     * Gets filling_value
     * @return float
     */
    public function getFillingValue()
    {
        return $this->filling_value;
    }
  
    /**
     * Sets filling_value
     * @param float $filling_value filling_value
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        
        $this->filling_value = $filling_value;
        return $this;
    }
    
    /**
     * Gets maximum_allowed_value
     * @return float
     */
    public function getMaximumAllowedValue()
    {
        return $this->maximum_allowed_value;
    }
  
    /**
     * Sets maximum_allowed_value
     * @param float $maximum_allowed_value maximum_allowed_value
     * @return $this
     */
    public function setMaximumAllowedValue($maximum_allowed_value)
    {
        
        $this->maximum_allowed_value = $maximum_allowed_value;
        return $this;
    }
    
    /**
     * Gets minimum_allowed_value
     * @return float
     */
    public function getMinimumAllowedValue()
    {
        return $this->minimum_allowed_value;
    }
  
    /**
     * Sets minimum_allowed_value
     * @param float $minimum_allowed_value minimum_allowed_value
     * @return $this
     */
    public function setMinimumAllowedValue($minimum_allowed_value)
    {
        
        $this->minimum_allowed_value = $minimum_allowed_value;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay onset_delay
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action duration_of_action
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets public
     * @return int
     */
    public function getPublic()
    {
        return $this->public;
    }
  
    /**
     * Sets public
     * @param int $public public
     * @return $this
     */
    public function setPublic($public)
    {
        
        $this->public = $public;
        return $this;
    }
    
    /**
     * Gets cause_only
     * @return bool
     */
    public function getCauseOnly()
    {
        return $this->cause_only;
    }
  
    /**
     * Sets cause_only
     * @param bool $cause_only cause_only
     * @return $this
     */
    public function setCauseOnly($cause_only)
    {
        
        $this->cause_only = $cause_only;
        return $this;
    }
    
    /**
     * Gets most_common_value
     * @return float
     */
    public function getMostCommonValue()
    {
        return $this->most_common_value;
    }
  
    /**
     * Sets most_common_value
     * @param float $most_common_value most_common_value
     * @return $this
     */
    public function setMostCommonValue($most_common_value)
    {
        
        $this->most_common_value = $most_common_value;
        return $this;
    }
    
    /**
     * Gets most_common_unit_id
     * @return int
     */
    public function getMostCommonUnitId()
    {
        return $this->most_common_unit_id;
    }
  
    /**
     * Sets most_common_unit_id
     * @param int $most_common_unit_id most_common_unit_id
     * @return $this
     */
    public function setMostCommonUnitId($most_common_unit_id)
    {
        
        $this->most_common_unit_id = $most_common_unit_id;
        return $this;
    }
    
    /**
     * Gets standard_deviation
     * @return float
     */
    public function getStandardDeviation()
    {
        return $this->standard_deviation;
    }
  
    /**
     * Sets standard_deviation
     * @param float $standard_deviation standard_deviation
     * @return $this
     */
    public function setStandardDeviation($standard_deviation)
    {
        
        $this->standard_deviation = $standard_deviation;
        return $this;
    }
    
    /**
     * Gets variance
     * @return float
     */
    public function getVariance()
    {
        return $this->variance;
    }
  
    /**
     * Sets variance
     * @param float $variance variance
     * @return $this
     */
    public function setVariance($variance)
    {
        
        $this->variance = $variance;
        return $this;
    }
    
    /**
     * Gets mean
     * @return float
     */
    public function getMean()
    {
        return $this->mean;
    }
  
    /**
     * Sets mean
     * @param float $mean mean
     * @return $this
     */
    public function setMean($mean)
    {
        
        $this->mean = $mean;
        return $this;
    }
    
    /**
     * Gets median
     * @return float
     */
    public function getMedian()
    {
        return $this->median;
    }
  
    /**
     * Sets median
     * @param float $median median
     * @return $this
     */
    public function setMedian($median)
    {
        
        $this->median = $median;
        return $this;
    }
    
    /**
     * Gets number_of_measurements
     * @return float
     */
    public function getNumberOfMeasurements()
    {
        return $this->number_of_measurements;
    }
  
    /**
     * Sets number_of_measurements
     * @param float $number_of_measurements number_of_measurements
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        
        $this->number_of_measurements = $number_of_measurements;
        return $this;
    }
    
    /**
     * Gets number_of_unique_values
     * @return float
     */
    public function getNumberOfUniqueValues()
    {
        return $this->number_of_unique_values;
    }
  
    /**
     * Sets number_of_unique_values
     * @param float $number_of_unique_values number_of_unique_values
     * @return $this
     */
    public function setNumberOfUniqueValues($number_of_unique_values)
    {
        
        $this->number_of_unique_values = $number_of_unique_values;
        return $this;
    }
    
    /**
     * Gets skewness
     * @return float
     */
    public function getSkewness()
    {
        return $this->skewness;
    }
  
    /**
     * Sets skewness
     * @param float $skewness skewness
     * @return $this
     */
    public function setSkewness($skewness)
    {
        
        $this->skewness = $skewness;
        return $this;
    }
    
    /**
     * Gets kurtosis
     * @return float
     */
    public function getKurtosis()
    {
        return $this->kurtosis;
    }
  
    /**
     * Sets kurtosis
     * @param float $kurtosis kurtosis
     * @return $this
     */
    public function setKurtosis($kurtosis)
    {
        
        $this->kurtosis = $kurtosis;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status status
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets error_message
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->error_message;
    }
  
    /**
     * Sets error_message
     * @param string $error_message error_message
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        
        $this->error_message = $error_message;
        return $this;
    }
    
    /**
     * Gets last_successful_update_time
     * @return \DateTime
     */
    public function getLastSuccessfulUpdateTime()
    {
        return $this->last_successful_update_time;
    }
  
    /**
     * Sets last_successful_update_time
     * @param \DateTime $last_successful_update_time last_successful_update_time
     * @return $this
     */
    public function setLastSuccessfulUpdateTime($last_successful_update_time)
    {
        
        $this->last_successful_update_time = $last_successful_update_time;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at updated_at
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Gets product_url
     * @return string
     */
    public function getProductUrl()
    {
        return $this->product_url;
    }
  
    /**
     * Sets product_url
     * @param string $product_url product_url
     * @return $this
     */
    public function setProductUrl($product_url)
    {
        
        $this->product_url = $product_url;
        return $this;
    }
    
    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->image_url;
    }
  
    /**
     * Sets image_url
     * @param string $image_url image_url
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        
        $this->image_url = $image_url;
        return $this;
    }
    
    /**
     * Gets price
     * @return float
     */
    public function getPrice()
    {
        return $this->price;
    }
  
    /**
     * Sets price
     * @param float $price price
     * @return $this
     */
    public function setPrice($price)
    {
        
        $this->price = $price;
        return $this;
    }
    
    /**
     * Gets number_of_user_variables
     * @return int
     */
    public function getNumberOfUserVariables()
    {
        return $this->number_of_user_variables;
    }
  
    /**
     * Sets number_of_user_variables
     * @param int $number_of_user_variables number_of_user_variables
     * @return $this
     */
    public function setNumberOfUserVariables($number_of_user_variables)
    {
        
        $this->number_of_user_variables = $number_of_user_variables;
        return $this;
    }
    
    /**
     * Gets outcome
     * @return bool
     */
    public function getOutcome()
    {
        return $this->outcome;
    }
  
    /**
     * Sets outcome
     * @param bool $outcome outcome
     * @return $this
     */
    public function setOutcome($outcome)
    {
        
        $this->outcome = $outcome;
        return $this;
    }
    
    /**
     * Gets minimum_recorded_value
     * @return float
     */
    public function getMinimumRecordedValue()
    {
        return $this->minimum_recorded_value;
    }
  
    /**
     * Sets minimum_recorded_value
     * @param float $minimum_recorded_value minimum_recorded_value
     * @return $this
     */
    public function setMinimumRecordedValue($minimum_recorded_value)
    {
        
        $this->minimum_recorded_value = $minimum_recorded_value;
        return $this;
    }
    
    /**
     * Gets maximum_recorded_value
     * @return float
     */
    public function getMaximumRecordedValue()
    {
        return $this->maximum_recorded_value;
    }
  
    /**
     * Sets maximum_recorded_value
     * @param float $maximum_recorded_value maximum_recorded_value
     * @return $this
     */
    public function setMaximumRecordedValue($maximum_recorded_value)
    {
        
        $this->maximum_recorded_value = $maximum_recorded_value;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
