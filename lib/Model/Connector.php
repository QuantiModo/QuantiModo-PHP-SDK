<?php
/**
 * Connector
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Connector Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Connector implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'display_name' => 'string',
        'image' => 'string',
        'get_it_url' => 'string',
        'short_description' => 'string',
        'long_description' => 'string',
        'enabled' => 'bool',
        'oauth' => 'bool'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'display_name' => 'display_name',
        'image' => 'image',
        'get_it_url' => 'get_it_url',
        'short_description' => 'short_description',
        'long_description' => 'long_description',
        'enabled' => 'enabled',
        'oauth' => 'oauth'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'image' => 'setImage',
        'get_it_url' => 'setGetItUrl',
        'short_description' => 'setShortDescription',
        'long_description' => 'setLongDescription',
        'enabled' => 'setEnabled',
        'oauth' => 'setOauth'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'image' => 'getImage',
        'get_it_url' => 'getGetItUrl',
        'short_description' => 'getShortDescription',
        'long_description' => 'getLongDescription',
        'enabled' => 'getEnabled',
        'oauth' => 'getOauth'
    );
  
    
    /**
      * $id Connector ID number
      * @var int
      */
    protected $id;
    
    /**
      * $name Connector lowercase system name
      * @var string
      */
    protected $name;
    
    /**
      * $display_name Connector pretty display name
      * @var string
      */
    protected $display_name;
    
    /**
      * $image URL to the image of the connector logo
      * @var string
      */
    protected $image;
    
    /**
      * $get_it_url URL to a site where one can get this device or application
      * @var string
      */
    protected $get_it_url;
    
    /**
      * $short_description Short description
      * @var string
      */
    protected $short_description;
    
    /**
      * $long_description Long description
      * @var string
      */
    protected $long_description;
    
    /**
      * $enabled enabled
      * @var bool
      */
    protected $enabled;
    
    /**
      * $oauth oauth
      * @var bool
      */
    protected $oauth;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->display_name = $data["display_name"];
            $this->image = $data["image"];
            $this->get_it_url = $data["get_it_url"];
            $this->short_description = $data["short_description"];
            $this->long_description = $data["long_description"];
            $this->enabled = $data["enabled"];
            $this->oauth = $data["oauth"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Connector ID number
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name Connector lowercase system name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }
  
    /**
     * Sets display_name
     * @param string $display_name Connector pretty display name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        
        $this->display_name = $display_name;
        return $this;
    }
    
    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
  
    /**
     * Sets image
     * @param string $image URL to the image of the connector logo
     * @return $this
     */
    public function setImage($image)
    {
        
        $this->image = $image;
        return $this;
    }
    
    /**
     * Gets get_it_url
     * @return string
     */
    public function getGetItUrl()
    {
        return $this->get_it_url;
    }
  
    /**
     * Sets get_it_url
     * @param string $get_it_url URL to a site where one can get this device or application
     * @return $this
     */
    public function setGetItUrl($get_it_url)
    {
        
        $this->get_it_url = $get_it_url;
        return $this;
    }
    
    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->short_description;
    }
  
    /**
     * Sets short_description
     * @param string $short_description Short description
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        
        $this->short_description = $short_description;
        return $this;
    }
    
    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->long_description;
    }
  
    /**
     * Sets long_description
     * @param string $long_description Long description
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        
        $this->long_description = $long_description;
        return $this;
    }
    
    /**
     * Gets enabled
     * @return bool
     */
    public function getEnabled()
    {
        return $this->enabled;
    }
  
    /**
     * Sets enabled
     * @param bool $enabled enabled
     * @return $this
     */
    public function setEnabled($enabled)
    {
        
        $this->enabled = $enabled;
        return $this;
    }
    
    /**
     * Gets oauth
     * @return bool
     */
    public function getOauth()
    {
        return $this->oauth;
    }
  
    /**
     * Sets oauth
     * @param bool $oauth oauth
     * @return $this
     */
    public function setOauth($oauth)
    {
        
        $this->oauth = $oauth;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
