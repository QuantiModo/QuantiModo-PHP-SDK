<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class ConnectorsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  
	/**
	 * connectorsListGet
   *
	 * List of Connectors
   
	 * @return array[Connector]
	 */

   public function connectorsListGet() {

  		// parse inputs
  		$resourcePath = "/connectors/list";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      if(! $response) {
        return null;
      }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Connector]');
  		return $responseObject;
  }
  
	/**
	 * connectorsConnectorConnectGet
   *
	 * Obtain a token from 3rd party data source
   * connector, string: Lowercase system name of the source application or device (required)
   * 
	 * @return 
	 */

   public function connectorsConnectorConnectGet($connector) {

  		// parse inputs
  		$resourcePath = "/connectors/{connector}/connect";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      // path params
      if($connector !== null) {
  			$resourcePath = str_replace("{" . "connector" . "}",
  			                            $this->apiClient->toPathValue($connector), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * connectorsConnectorConnectInstructionsGet
   *
	 * Get connection parameters
   * connector, string: Lowercase system name of the source application or device (required)
   * 
	 * @return 
	 */

   public function connectorsConnectorConnectInstructionsGet($connector) {

  		// parse inputs
  		$resourcePath = "/connectors/{connector}/connectInstructions";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      // path params
      if($connector !== null) {
  			$resourcePath = str_replace("{" . "connector" . "}",
  			                            $this->apiClient->toPathValue($connector), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * connectorsConnectorDisconnectGet
   *
	 * Delete stored connection info
   * connector, string: Lowercase system name of the source application or device (required)
   * 
	 * @return 
	 */

   public function connectorsConnectorDisconnectGet($connector) {

  		// parse inputs
  		$resourcePath = "/connectors/{connector}/disconnect";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      // path params
      if($connector !== null) {
  			$resourcePath = str_replace("{" . "connector" . "}",
  			                            $this->apiClient->toPathValue($connector), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * connectorsConnectorInfoGet
   *
	 * Get connector info for user
   * connector, string: Lowercase system name of the source application or device (required)
   * 
	 * @return 
	 */

   public function connectorsConnectorInfoGet($connector) {

  		// parse inputs
  		$resourcePath = "/connectors/{connector}/info";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      // path params
      if($connector !== null) {
  			$resourcePath = str_replace("{" . "connector" . "}",
  			                            $this->apiClient->toPathValue($connector), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  
	/**
	 * connectorsConnectorUpdateGet
   *
	 * Sync with data source
   * connector, string: Lowercase system name of the source application or device (required)
   * 
	 * @return 
	 */

   public function connectorsConnectorUpdateGet($connector) {

  		// parse inputs
  		$resourcePath = "/connectors/{connector}/update";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $headerParams['Accept'] = 'application/json';
      $headerParams['Content-Type'] = '';

      
      
      // path params
      if($connector !== null) {
  			$resourcePath = str_replace("{" . "connector" . "}",
  			                            $this->apiClient->toPathValue($connector), $resourcePath);
  		}
      
      

      $body = $body ?: $formParams;

      if (strpos($headerParams['Content-Type'], "application/x-www-form-urlencoded") > -1) {
        $body = http_build_query($body);
      }

  		// make the API Call
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);

      
  }
  

}
