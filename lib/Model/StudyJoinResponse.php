<?php
/**
 * StudyJoinResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.4
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;
use \QuantiModo\Client\ObjectSerializer;

/**
 * StudyJoinResponse Class Doc Comment
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StudyJoinResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StudyJoinResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'study' => '\QuantiModo\Client\Model\Study',
        'tracking_reminders' => '\QuantiModo\Client\Model\TrackingReminder[]',
        'tracking_reminder_notifications' => '\QuantiModo\Client\Model\TrackingReminderNotification[]',
        'status' => 'string',
        'success' => 'bool',
        'description' => 'string',
        'summary' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'study' => null,
        'tracking_reminders' => null,
        'tracking_reminder_notifications' => null,
        'status' => null,
        'success' => null,
        'description' => null,
        'summary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'study' => 'study',
        'tracking_reminders' => 'trackingReminders',
        'tracking_reminder_notifications' => 'trackingReminderNotifications',
        'status' => 'status',
        'success' => 'success',
        'description' => 'description',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'study' => 'setStudy',
        'tracking_reminders' => 'setTrackingReminders',
        'tracking_reminder_notifications' => 'setTrackingReminderNotifications',
        'status' => 'setStatus',
        'success' => 'setSuccess',
        'description' => 'setDescription',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'study' => 'getStudy',
        'tracking_reminders' => 'getTrackingReminders',
        'tracking_reminder_notifications' => 'getTrackingReminderNotifications',
        'status' => 'getStatus',
        'success' => 'getSuccess',
        'description' => 'getDescription',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['study'] = isset($data['study']) ? $data['study'] : null;
        $this->container['tracking_reminders'] = isset($data['tracking_reminders']) ? $data['tracking_reminders'] : null;
        $this->container['tracking_reminder_notifications'] = isset($data['tracking_reminder_notifications']) ? $data['tracking_reminder_notifications'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study
     *
     * @return \QuantiModo\Client\Model\Study
     */
    public function getStudy()
    {
        return $this->container['study'];
    }

    /**
     * Sets study
     *
     * @param \QuantiModo\Client\Model\Study $study study
     *
     * @return $this
     */
    public function setStudy($study)
    {
        $this->container['study'] = $study;

        return $this;
    }

    /**
     * Gets tracking_reminders
     *
     * @return \QuantiModo\Client\Model\TrackingReminder[]
     */
    public function getTrackingReminders()
    {
        return $this->container['tracking_reminders'];
    }

    /**
     * Sets tracking_reminders
     *
     * @param \QuantiModo\Client\Model\TrackingReminder[] $tracking_reminders tracking_reminders
     *
     * @return $this
     */
    public function setTrackingReminders($tracking_reminders)
    {
        $this->container['tracking_reminders'] = $tracking_reminders;

        return $this;
    }

    /**
     * Gets tracking_reminder_notifications
     *
     * @return \QuantiModo\Client\Model\TrackingReminderNotification[]
     */
    public function getTrackingReminderNotifications()
    {
        return $this->container['tracking_reminder_notifications'];
    }

    /**
     * Sets tracking_reminder_notifications
     *
     * @param \QuantiModo\Client\Model\TrackingReminderNotification[] $tracking_reminder_notifications tracking_reminder_notifications
     *
     * @return $this
     */
    public function setTrackingReminderNotifications($tracking_reminder_notifications)
    {
        $this->container['tracking_reminder_notifications'] = $tracking_reminder_notifications;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Ex: ok
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success Ex: true
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Can be used as body of help info popup
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary Can be used as title in help info popup
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


