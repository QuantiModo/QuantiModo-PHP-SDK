<?php
/**
 *  Copyright 2015 Reverb Technologies, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace SwaggerClient\models;

use \ArrayAccess;

class Measurement implements ArrayAccess {
  static $swaggerTypes = array(
      'variable' => 'string',
      'source' => 'string',
      'timestamp' => 'int',
      'value' => 'double',
      'unit' => 'string',
      'note' => 'string'
  );

  static $attributeMap = array(
      'variable' => 'variable',
      'source' => 'source',
      'timestamp' => 'timestamp',
      'value' => 'value',
      'unit' => 'unit',
      'note' => 'note'
  );

  
  /**
  * ORIGINAL Name of the variable for which we are creating the measurement records
  */
  public $variable; /* string */
  /**
  * Application or device used to record the measurement values
  */
  public $source; /* string */
  /**
  * Timestamp for the measurement event in epoch time
  */
  public $timestamp; /* int */
  /**
  * Measurement value
  */
  public $value; /* double */
  /**
  * Unit of Measurement
  */
  public $unit; /* string */
  /**
  * Optional note supplied with the measurement. Can be up to 255 characters in length.
  */
  public $note; /* string */

  public function __construct(array $data = null) {
    $this->variable = $data["variable"];
    $this->source = $data["source"];
    $this->timestamp = $data["timestamp"];
    $this->value = $data["value"];
    $this->unit = $data["unit"];
    $this->note = $data["note"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
