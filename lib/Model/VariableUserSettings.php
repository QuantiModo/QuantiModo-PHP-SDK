<?php
/**
 * VariableUserSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * VariableUserSettings Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VariableUserSettings implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'user' => 'int',
        'variable' => 'string',
        'duration_of_action' => 'int',
        'filling_value' => 'int',
        'join_with' => 'string',
        'maximum_value' => 'float',
        'minimum_value' => 'float',
        'name' => 'string',
        'onset_delay' => 'int',
        'unit' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'user' => 'user',
        'variable' => 'variable',
        'duration_of_action' => 'durationOfAction',
        'filling_value' => 'fillingValue',
        'join_with' => 'joinWith',
        'maximum_value' => 'maximumValue',
        'minimum_value' => 'minimumValue',
        'name' => 'name',
        'onset_delay' => 'onsetDelay',
        'unit' => 'unit'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'user' => 'setUser',
        'variable' => 'setVariable',
        'duration_of_action' => 'setDurationOfAction',
        'filling_value' => 'setFillingValue',
        'join_with' => 'setJoinWith',
        'maximum_value' => 'setMaximumValue',
        'minimum_value' => 'setMinimumValue',
        'name' => 'setName',
        'onset_delay' => 'setOnsetDelay',
        'unit' => 'setUnit'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'user' => 'getUser',
        'variable' => 'getVariable',
        'duration_of_action' => 'getDurationOfAction',
        'filling_value' => 'getFillingValue',
        'join_with' => 'getJoinWith',
        'maximum_value' => 'getMaximumValue',
        'minimum_value' => 'getMinimumValue',
        'name' => 'getName',
        'onset_delay' => 'getOnsetDelay',
        'unit' => 'getUnit'
    );
  
    
    /**
      * $user User ID
      * @var int
      */
    protected $user;
    
    /**
      * $variable Variable DISPLAY name
      * @var string
      */
    protected $variable;
    
    /**
      * $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $filling_value fillingValue
      * @var int
      */
    protected $filling_value;
    
    /**
      * $join_with joinWith
      * @var string
      */
    protected $join_with;
    
    /**
      * $maximum_value maximumValue
      * @var float
      */
    protected $maximum_value;
    
    /**
      * $minimum_value minimumValue
      * @var float
      */
    protected $minimum_value;
    
    /**
      * $name name
      * @var string
      */
    protected $name;
    
    /**
      * $onset_delay onsetDelay
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $unit unit
      * @var string
      */
    protected $unit;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->user = $data["user"];
            $this->variable = $data["variable"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->filling_value = $data["filling_value"];
            $this->join_with = $data["join_with"];
            $this->maximum_value = $data["maximum_value"];
            $this->minimum_value = $data["minimum_value"];
            $this->name = $data["name"];
            $this->onset_delay = $data["onset_delay"];
            $this->unit = $data["unit"];
        }
    }
    
    /**
     * Gets user
     * @return int
     */
    public function getUser()
    {
        return $this->user;
    }
  
    /**
     * Sets user
     * @param int $user User ID
     * @return $this
     */
    public function setUser($user)
    {
        
        $this->user = $user;
        return $this;
    }
    
    /**
     * Gets variable
     * @return string
     */
    public function getVariable()
    {
        return $this->variable;
    }
  
    /**
     * Sets variable
     * @param string $variable Variable DISPLAY name
     * @return $this
     */
    public function setVariable($variable)
    {
        
        $this->variable = $variable;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action Estimated duration of time following the onset delay in which a stimulus produces a perceivable effect
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets filling_value
     * @return int
     */
    public function getFillingValue()
    {
        return $this->filling_value;
    }
  
    /**
     * Sets filling_value
     * @param int $filling_value fillingValue
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        
        $this->filling_value = $filling_value;
        return $this;
    }
    
    /**
     * Gets join_with
     * @return string
     */
    public function getJoinWith()
    {
        return $this->join_with;
    }
  
    /**
     * Sets join_with
     * @param string $join_with joinWith
     * @return $this
     */
    public function setJoinWith($join_with)
    {
        
        $this->join_with = $join_with;
        return $this;
    }
    
    /**
     * Gets maximum_value
     * @return float
     */
    public function getMaximumValue()
    {
        return $this->maximum_value;
    }
  
    /**
     * Sets maximum_value
     * @param float $maximum_value maximumValue
     * @return $this
     */
    public function setMaximumValue($maximum_value)
    {
        
        $this->maximum_value = $maximum_value;
        return $this;
    }
    
    /**
     * Gets minimum_value
     * @return float
     */
    public function getMinimumValue()
    {
        return $this->minimum_value;
    }
  
    /**
     * Sets minimum_value
     * @param float $minimum_value minimumValue
     * @return $this
     */
    public function setMinimumValue($minimum_value)
    {
        
        $this->minimum_value = $minimum_value;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name name
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay onsetDelay
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets unit
     * @return string
     */
    public function getUnit()
    {
        return $this->unit;
    }
  
    /**
     * Sets unit
     * @param string $unit unit
     * @return $this
     */
    public function setUnit($unit)
    {
        
        $this->unit = $unit;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
