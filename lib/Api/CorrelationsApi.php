<?php
/**
 * CorrelationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * CorrelationsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CorrelationsApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://localhost/api');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return CorrelationsApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * v1CorrelationsGet
     *
     * Get correlations
     *
     * @param string $effect ORIGINAL variable name of the effect variable for which the user desires correlations (optional)
     * @param string $cause ORIGINAL variable name of the cause variable for which the user desires correlations (optional)
     * @param int $limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0. (optional)
     * @param int $offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10. (optional)
     * @param int $sort Sort by given field. If the field is prefixed with `-, it will sort in descending order. (optional)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1CorrelationsGet($effect=null, $cause=null, $limit=null, $offset=null, $sort=null)
    {
        
  
        // parse inputs
        $resourcePath = "/v1/correlations";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($effect !== null) {
            $queryParams['effect'] = $this->apiClient->getSerializer()->toQueryValue($effect);
        }// query params
        if ($cause !== null) {
            $queryParams['cause'] = $this->apiClient->getSerializer()->toQueryValue($cause);
        }// query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1CorrelationsPost
     *
     * Store or Update a Correlation
     *
     * @param \Swagger\Client\Model\PostCorrelation $body Provides correlation data (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1CorrelationsPost($body)
    {
        
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling v1CorrelationsPost');
        }
  
        // parse inputs
        $resourcePath = "/v1/correlations";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 400:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\JsonErrorResponse', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
    }
    
    /**
     * v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet
     *
     * Search user correlations for a given cause
     *
     * @param int $organization_id Organization ID (required)
     * @param int $user_id User id (required)
     * @param string $variable_name Effect variable name (required)
     * @param string $organization_token Organization access token (required)
     * @param string $include_public Include bublic correlations, Can be \&quot;1\&quot; or empty. (optional)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet($organization_id, $user_id, $variable_name, $organization_token, $include_public=null)
    {
        
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
        }
        // verify the required parameter 'organization_token' is set
        if ($organization_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_token when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/causes";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($organization_token !== null) {
            $queryParams['organization_token'] = $this->apiClient->getSerializer()->toQueryValue($organization_token);
        }// query params
        if ($include_public !== null) {
            $queryParams['include_public'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                "{" . "organizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($organization_id),
                $resourcePath
            );
        }// path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }// path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet
     *
     * Search user correlations for a given cause
     *
     * @param int $organization_id Organization ID (required)
     * @param int $user_id User id (required)
     * @param string $variable_name Cause variable name (required)
     * @param string $organization_token Organization access token (required)
     * @param string $include_public Include bublic correlations, Can be \&quot;1\&quot; or empty. (optional)
     * @return \Swagger\Client\Model\CommonResponse[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet($organization_id, $user_id, $variable_name, $organization_token, $include_public=null)
    {
        
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
        }
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
        }
        // verify the required parameter 'organization_token' is set
        if ($organization_token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_token when calling v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/users/{userId}/variables/{variableName}/effects";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($organization_token !== null) {
            $queryParams['organization_token'] = $this->apiClient->getSerializer()->toQueryValue($organization_token);
        }// query params
        if ($include_public !== null) {
            $queryParams['include_public'] = $this->apiClient->getSerializer()->toQueryValue($include_public);
        }
        
        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                "{" . "organizationId" . "}",
                $this->apiClient->getSerializer()->toPathValue($organization_id),
                $resourcePath
            );
        }// path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                "{" . "userId" . "}",
                $this->apiClient->getSerializer()->toPathValue($user_id),
                $resourcePath
            );
        }// path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\CommonResponse[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommonResponse[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CommonResponse[]');
        
    }
    
    /**
     * v1PublicCorrelationsSearchSearchGet
     *
     * Get average correlations for variables containing search term
     *
     * @param string $search Name of the variable that you want to know the causes or effects of. (required)
     * @param string $effect_or_cause Specifies whether to return the effects or causes of the searched variable. (required)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1PublicCorrelationsSearchSearchGet($search, $effect_or_cause)
    {
        
        // verify the required parameter 'search' is set
        if ($search === null) {
            throw new \InvalidArgumentException('Missing the required parameter $search when calling v1PublicCorrelationsSearchSearchGet');
        }
        // verify the required parameter 'effect_or_cause' is set
        if ($effect_or_cause === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect_or_cause when calling v1PublicCorrelationsSearchSearchGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/public/correlations/search/{search}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($effect_or_cause !== null) {
            $queryParams['effectOrCause'] = $this->apiClient->getSerializer()->toQueryValue($effect_or_cause);
        }
        
        // path params
        if ($search !== null) {
            $resourcePath = str_replace(
                "{" . "search" . "}",
                $this->apiClient->getSerializer()->toPathValue($search),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1VariablesVariableNameCausesGet
     *
     * Search user correlations for a given effect
     *
     * @param string $variable_name Effect variable name (required)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VariablesVariableNameCausesGet($variable_name)
    {
        
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNameCausesGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/variables/{variableName}/causes";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1VariablesVariableNameEffectsGet
     *
     * Search user correlations for a given cause
     *
     * @param string $variable_name Cause variable name (required)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VariablesVariableNameEffectsGet($variable_name)
    {
        
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNameEffectsGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/variables/{variableName}/effects";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1VariablesVariableNamePublicCausesGet
     *
     * Search public correlations for a given effect
     *
     * @param string $variable_name Effect variable name (required)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VariablesVariableNamePublicCausesGet($variable_name)
    {
        
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNamePublicCausesGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/variables/{variableName}/public/causes";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1VariablesVariableNamePublicEffectsGet
     *
     * Search public correlations for a given cause
     *
     * @param string $variable_name Cause variable name (required)
     * @return \Swagger\Client\Model\Correlation[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VariablesVariableNamePublicEffectsGet($variable_name)
    {
        
        // verify the required parameter 'variable_name' is set
        if ($variable_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $variable_name when calling v1VariablesVariableNamePublicEffectsGet');
        }
  
        // parse inputs
        $resourcePath = "/v1/variables/{variableName}/public/effects";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        
        
        // path params
        if ($variable_name !== null) {
            $resourcePath = str_replace(
                "{" . "variableName" . "}",
                $this->apiClient->getSerializer()->toPathValue($variable_name),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\Correlation[]'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Correlation[]', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Correlation[]');
        
    }
    
    /**
     * v1VotesPost
     *
     * Post or update vote
     *
     * @param string $cause Cause variable name (required)
     * @param string $effect Effect variable name (required)
     * @param Number $correlation Correlation value (required)
     * @param bool $vote Vote: 0 (for implausible) or 1 (for plausible) (optional)
     * @return \Swagger\Client\Model\CommonResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VotesPost($cause, $effect, $correlation, $vote=null)
    {
        
        // verify the required parameter 'cause' is set
        if ($cause === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cause when calling v1VotesPost');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling v1VotesPost');
        }
        // verify the required parameter 'correlation' is set
        if ($correlation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $correlation when calling v1VotesPost');
        }
  
        // parse inputs
        $resourcePath = "/v1/votes";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($cause !== null) {
            $queryParams['cause'] = $this->apiClient->getSerializer()->toQueryValue($cause);
        }// query params
        if ($effect !== null) {
            $queryParams['effect'] = $this->apiClient->getSerializer()->toQueryValue($effect);
        }// query params
        if ($correlation !== null) {
            $queryParams['correlation'] = $this->apiClient->getSerializer()->toQueryValue($correlation);
        }// query params
        if ($vote !== null) {
            $queryParams['vote'] = $this->apiClient->getSerializer()->toQueryValue($vote);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\CommonResponse'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommonResponse', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CommonResponse');
        
    }
    
    /**
     * v1VotesDeletePost
     *
     * Delete vote
     *
     * @param string $cause Cause variable name (required)
     * @param string $effect Effect variable name (required)
     * @return \Swagger\Client\Model\CommonResponse
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function v1VotesDeletePost($cause, $effect)
    {
        
        // verify the required parameter 'cause' is set
        if ($cause === null) {
            throw new \InvalidArgumentException('Missing the required parameter $cause when calling v1VotesDeletePost');
        }
        // verify the required parameter 'effect' is set
        if ($effect === null) {
            throw new \InvalidArgumentException('Missing the required parameter $effect when calling v1VotesDeletePost');
        }
  
        // parse inputs
        $resourcePath = "/v1/votes/delete";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array());
  
        // query params
        if ($cause !== null) {
            $queryParams['cause'] = $this->apiClient->getSerializer()->toQueryValue($cause);
        }// query params
        if ($effect !== null) {
            $queryParams['effect'] = $this->apiClient->getSerializer()->toQueryValue($effect);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        
        //TODO support oauth
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\CommonResponse'
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CommonResponse', $httpHeader);
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        if (!$response) {
            return null;
        }
  
        return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CommonResponse');
        
    }
    
}
