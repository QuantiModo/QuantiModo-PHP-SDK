<?php
/**
 * Measurement
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Measurement Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Measurement implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'user_id' => 'int',
        'client_id' => 'string',
        'connector_id' => 'int',
        'variable_id' => 'int',
        'source_id' => 'int',
        'start_time' => 'string',
        'value' => 'float',
        'unit_id' => 'int',
        'original_value' => 'float',
        'original_unit_id' => 'int',
        'duration' => 'int',
        'note' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'location' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'error' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'user_id' => 'user_id',
        'client_id' => 'client_id',
        'connector_id' => 'connector_id',
        'variable_id' => 'variable_id',
        'source_id' => 'source_id',
        'start_time' => 'start_time',
        'value' => 'value',
        'unit_id' => 'unit_id',
        'original_value' => 'original_value',
        'original_unit_id' => 'original_unit_id',
        'duration' => 'duration',
        'note' => 'note',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'location' => 'location',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'error' => 'error'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'user_id' => 'setUserId',
        'client_id' => 'setClientId',
        'connector_id' => 'setConnectorId',
        'variable_id' => 'setVariableId',
        'source_id' => 'setSourceId',
        'start_time' => 'setStartTime',
        'value' => 'setValue',
        'unit_id' => 'setUnitId',
        'original_value' => 'setOriginalValue',
        'original_unit_id' => 'setOriginalUnitId',
        'duration' => 'setDuration',
        'note' => 'setNote',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'location' => 'setLocation',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'error' => 'setError'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'user_id' => 'getUserId',
        'client_id' => 'getClientId',
        'connector_id' => 'getConnectorId',
        'variable_id' => 'getVariableId',
        'source_id' => 'getSourceId',
        'start_time' => 'getStartTime',
        'value' => 'getValue',
        'unit_id' => 'getUnitId',
        'original_value' => 'getOriginalValue',
        'original_unit_id' => 'getOriginalUnitId',
        'duration' => 'getDuration',
        'note' => 'getNote',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'location' => 'getLocation',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'error' => 'getError'
    );
  
    
    /**
      * $id id
      * @var int
      */
    protected $id;
    
    /**
      * $user_id ID of user that owns this measurement
      * @var int
      */
    protected $user_id;
    
    /**
      * $client_id client_id
      * @var string
      */
    protected $client_id;
    
    /**
      * $connector_id The id for the connector data source from which the measurement was obtained
      * @var int
      */
    protected $connector_id;
    
    /**
      * $variable_id ID of the variable for which we are creating the measurement records
      * @var int
      */
    protected $variable_id;
    
    /**
      * $source_id Application or device used to record the measurement values
      * @var int
      */
    protected $source_id;
    
    /**
      * $start_time Start Time for the measurement event. Use ISO 8601
      * @var string
      */
    protected $start_time;
    
    /**
      * $value The value of the measurement after conversion to the default unit for that variable
      * @var float
      */
    protected $value;
    
    /**
      * $unit_id The default unit for the variable
      * @var int
      */
    protected $unit_id;
    
    /**
      * $original_value Value of measurement as originally posted (before conversion to default unit)
      * @var float
      */
    protected $original_value;
    
    /**
      * $original_unit_id Unit ID of measurement as originally submitted
      * @var int
      */
    protected $original_unit_id;
    
    /**
      * $duration Duration of the event being measurement in seconds
      * @var int
      */
    protected $duration;
    
    /**
      * $note An optional note the user may include with their measurement
      * @var string
      */
    protected $note;
    
    /**
      * $latitude Latitude at which the measurement was taken
      * @var float
      */
    protected $latitude;
    
    /**
      * $longitude Longitude at which the measurement was taken
      * @var float
      */
    protected $longitude;
    
    /**
      * $location location
      * @var string
      */
    protected $location;
    
    /**
      * $created_at When the record was first created. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $created_at;
    
    /**
      * $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
      * @var \DateTime
      */
    protected $updated_at;
    
    /**
      * $error error
      * @var string
      */
    protected $error;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->user_id = $data["user_id"];
            $this->client_id = $data["client_id"];
            $this->connector_id = $data["connector_id"];
            $this->variable_id = $data["variable_id"];
            $this->source_id = $data["source_id"];
            $this->start_time = $data["start_time"];
            $this->value = $data["value"];
            $this->unit_id = $data["unit_id"];
            $this->original_value = $data["original_value"];
            $this->original_unit_id = $data["original_unit_id"];
            $this->duration = $data["duration"];
            $this->note = $data["note"];
            $this->latitude = $data["latitude"];
            $this->longitude = $data["longitude"];
            $this->location = $data["location"];
            $this->created_at = $data["created_at"];
            $this->updated_at = $data["updated_at"];
            $this->error = $data["error"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id id
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }
  
    /**
     * Sets user_id
     * @param int $user_id ID of user that owns this measurement
     * @return $this
     */
    public function setUserId($user_id)
    {
        
        $this->user_id = $user_id;
        return $this;
    }
    
    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->client_id;
    }
  
    /**
     * Sets client_id
     * @param string $client_id client_id
     * @return $this
     */
    public function setClientId($client_id)
    {
        
        $this->client_id = $client_id;
        return $this;
    }
    
    /**
     * Gets connector_id
     * @return int
     */
    public function getConnectorId()
    {
        return $this->connector_id;
    }
  
    /**
     * Sets connector_id
     * @param int $connector_id The id for the connector data source from which the measurement was obtained
     * @return $this
     */
    public function setConnectorId($connector_id)
    {
        
        $this->connector_id = $connector_id;
        return $this;
    }
    
    /**
     * Gets variable_id
     * @return int
     */
    public function getVariableId()
    {
        return $this->variable_id;
    }
  
    /**
     * Sets variable_id
     * @param int $variable_id ID of the variable for which we are creating the measurement records
     * @return $this
     */
    public function setVariableId($variable_id)
    {
        
        $this->variable_id = $variable_id;
        return $this;
    }
    
    /**
     * Gets source_id
     * @return int
     */
    public function getSourceId()
    {
        return $this->source_id;
    }
  
    /**
     * Sets source_id
     * @param int $source_id Application or device used to record the measurement values
     * @return $this
     */
    public function setSourceId($source_id)
    {
        
        $this->source_id = $source_id;
        return $this;
    }
    
    /**
     * Gets start_time
     * @return string
     */
    public function getStartTime()
    {
        return $this->start_time;
    }
  
    /**
     * Sets start_time
     * @param string $start_time Start Time for the measurement event. Use ISO 8601
     * @return $this
     */
    public function setStartTime($start_time)
    {
        
        $this->start_time = $start_time;
        return $this;
    }
    
    /**
     * Gets value
     * @return float
     */
    public function getValue()
    {
        return $this->value;
    }
  
    /**
     * Sets value
     * @param float $value The value of the measurement after conversion to the default unit for that variable
     * @return $this
     */
    public function setValue($value)
    {
        
        $this->value = $value;
        return $this;
    }
    
    /**
     * Gets unit_id
     * @return int
     */
    public function getUnitId()
    {
        return $this->unit_id;
    }
  
    /**
     * Sets unit_id
     * @param int $unit_id The default unit for the variable
     * @return $this
     */
    public function setUnitId($unit_id)
    {
        
        $this->unit_id = $unit_id;
        return $this;
    }
    
    /**
     * Gets original_value
     * @return float
     */
    public function getOriginalValue()
    {
        return $this->original_value;
    }
  
    /**
     * Sets original_value
     * @param float $original_value Value of measurement as originally posted (before conversion to default unit)
     * @return $this
     */
    public function setOriginalValue($original_value)
    {
        
        $this->original_value = $original_value;
        return $this;
    }
    
    /**
     * Gets original_unit_id
     * @return int
     */
    public function getOriginalUnitId()
    {
        return $this->original_unit_id;
    }
  
    /**
     * Sets original_unit_id
     * @param int $original_unit_id Unit ID of measurement as originally submitted
     * @return $this
     */
    public function setOriginalUnitId($original_unit_id)
    {
        
        $this->original_unit_id = $original_unit_id;
        return $this;
    }
    
    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->duration;
    }
  
    /**
     * Sets duration
     * @param int $duration Duration of the event being measurement in seconds
     * @return $this
     */
    public function setDuration($duration)
    {
        
        $this->duration = $duration;
        return $this;
    }
    
    /**
     * Gets note
     * @return string
     */
    public function getNote()
    {
        return $this->note;
    }
  
    /**
     * Sets note
     * @param string $note An optional note the user may include with their measurement
     * @return $this
     */
    public function setNote($note)
    {
        
        $this->note = $note;
        return $this;
    }
    
    /**
     * Gets latitude
     * @return float
     */
    public function getLatitude()
    {
        return $this->latitude;
    }
  
    /**
     * Sets latitude
     * @param float $latitude Latitude at which the measurement was taken
     * @return $this
     */
    public function setLatitude($latitude)
    {
        
        $this->latitude = $latitude;
        return $this;
    }
    
    /**
     * Gets longitude
     * @return float
     */
    public function getLongitude()
    {
        return $this->longitude;
    }
  
    /**
     * Sets longitude
     * @param float $longitude Longitude at which the measurement was taken
     * @return $this
     */
    public function setLongitude($longitude)
    {
        
        $this->longitude = $longitude;
        return $this;
    }
    
    /**
     * Gets location
     * @return string
     */
    public function getLocation()
    {
        return $this->location;
    }
  
    /**
     * Sets location
     * @param string $location location
     * @return $this
     */
    public function setLocation($location)
    {
        
        $this->location = $location;
        return $this;
    }
    
    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param \DateTime $created_at When the record was first created. Use ISO 8601 datetime format
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        
        $this->created_at = $created_at;
        return $this;
    }
    
    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updated_at;
    }
  
    /**
     * Sets updated_at
     * @param \DateTime $updated_at When the record in the database was last updated. Use ISO 8601 datetime format
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        
        $this->updated_at = $updated_at;
        return $this;
    }
    
    /**
     * Gets error
     * @return string
     */
    public function getError()
    {
        return $this->error;
    }
  
    /**
     * Sets error
     * @param string $error error
     * @return $this
     */
    public function setError($error)
    {
        
        $this->error = $error;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
