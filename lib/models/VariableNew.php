<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

namespace SwaggerClient\models;

use \ArrayAccess;

class VariableNew implements ArrayAccess {
  static $swaggerTypes = array(
      'name' => 'string',
      'category' => 'string',
      'unit' => 'string',
      'combination_operation' => 'string',
      'parent' => 'string'
  );

  static $attributeMap = array(
      'name' => 'name',
      'category' => 'category',
      'unit' => 'unit',
      'combination_operation' => 'combinationOperation',
      'parent' => 'parent'
  );

  
  /**
  * User-defined variable display name.
  */
  public $name; /* string */
  /**
  * Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
  */
  public $category; /* string */
  /**
  * Abbreviated name of the default unit for the variable
  */
  public $unit; /* string */
  /**
  * How to aggregate measurements over time.
  */
  public $combination_operation; /* string */
  /**
  * Parent
  */
  public $parent; /* string */

  public function __construct(array $data = null) {
    $this->name = $data["name"];
    $this->category = $data["category"];
    $this->unit = $data["unit"];
    $this->combination_operation = $data["combination_operation"];
    $this->parent = $data["parent"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
