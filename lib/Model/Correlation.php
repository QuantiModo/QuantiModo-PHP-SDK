<?php
/**
 * Correlation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Correlation Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Correlation implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'correlation_coefficient' => 'Number',
        'cause' => 'string',
        'original_cause' => 'string',
        'effect' => 'string',
        'original_effect' => 'string',
        'onset_delay' => 'double',
        'duration_of_action' => 'Number',
        'number_of_pairs' => 'Number',
        'effect_size' => 'string',
        'statistical_significance' => 'string',
        'timestamp' => 'Number',
        'reverse_correlation' => 'Number',
        'causality_factor' => 'Number',
        'cause_category' => 'string',
        'effect_category' => 'string',
        'value_predicting_high_outcome' => 'Number',
        'value_predicting_low_outcome' => 'Number',
        'optimal_pearson_product' => 'Number',
        'average_vote' => 'Number',
        'user_vote' => 'Number',
        'cause_unit' => 'string',
        'cause_unit_id' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'correlation_coefficient' => 'correlationCoefficient',
        'cause' => 'cause',
        'original_cause' => 'originalCause',
        'effect' => 'effect',
        'original_effect' => 'originalEffect',
        'onset_delay' => 'onsetDelay',
        'duration_of_action' => 'durationOfAction',
        'number_of_pairs' => 'numberOfPairs',
        'effect_size' => 'effectSize',
        'statistical_significance' => 'statisticalSignificance',
        'timestamp' => 'timestamp',
        'reverse_correlation' => 'reverseCorrelation',
        'causality_factor' => 'causalityFactor',
        'cause_category' => 'causeCategory',
        'effect_category' => 'effectCategory',
        'value_predicting_high_outcome' => 'valuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'valuePredictingLowOutcome',
        'optimal_pearson_product' => 'optimalPearsonProduct',
        'average_vote' => 'averageVote',
        'user_vote' => 'userVote',
        'cause_unit' => 'causeUnit',
        'cause_unit_id' => 'causeUnitId'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'correlation_coefficient' => 'setCorrelationCoefficient',
        'cause' => 'setCause',
        'original_cause' => 'setOriginalCause',
        'effect' => 'setEffect',
        'original_effect' => 'setOriginalEffect',
        'onset_delay' => 'setOnsetDelay',
        'duration_of_action' => 'setDurationOfAction',
        'number_of_pairs' => 'setNumberOfPairs',
        'effect_size' => 'setEffectSize',
        'statistical_significance' => 'setStatisticalSignificance',
        'timestamp' => 'setTimestamp',
        'reverse_correlation' => 'setReverseCorrelation',
        'causality_factor' => 'setCausalityFactor',
        'cause_category' => 'setCauseCategory',
        'effect_category' => 'setEffectCategory',
        'value_predicting_high_outcome' => 'setValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'setValuePredictingLowOutcome',
        'optimal_pearson_product' => 'setOptimalPearsonProduct',
        'average_vote' => 'setAverageVote',
        'user_vote' => 'setUserVote',
        'cause_unit' => 'setCauseUnit',
        'cause_unit_id' => 'setCauseUnitId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'correlation_coefficient' => 'getCorrelationCoefficient',
        'cause' => 'getCause',
        'original_cause' => 'getOriginalCause',
        'effect' => 'getEffect',
        'original_effect' => 'getOriginalEffect',
        'onset_delay' => 'getOnsetDelay',
        'duration_of_action' => 'getDurationOfAction',
        'number_of_pairs' => 'getNumberOfPairs',
        'effect_size' => 'getEffectSize',
        'statistical_significance' => 'getStatisticalSignificance',
        'timestamp' => 'getTimestamp',
        'reverse_correlation' => 'getReverseCorrelation',
        'causality_factor' => 'getCausalityFactor',
        'cause_category' => 'getCauseCategory',
        'effect_category' => 'getEffectCategory',
        'value_predicting_high_outcome' => 'getValuePredictingHighOutcome',
        'value_predicting_low_outcome' => 'getValuePredictingLowOutcome',
        'optimal_pearson_product' => 'getOptimalPearsonProduct',
        'average_vote' => 'getAverageVote',
        'user_vote' => 'getUserVote',
        'cause_unit' => 'getCauseUnit',
        'cause_unit_id' => 'getCauseUnitId'
    );
  
    
    /**
      * $correlation_coefficient Pearson correlation coefficient between cause and effect measurements
      * @var Number
      */
    protected $correlation_coefficient;
    
    /**
      * $cause ORIGINAL variable name of the cause variable for which the user desires correlations.
      * @var string
      */
    protected $cause;
    
    /**
      * $original_cause original name of the cause.
      * @var string
      */
    protected $original_cause;
    
    /**
      * $effect ORIGINAL variable name of the effect variable for which the user desires correlations.
      * @var string
      */
    protected $effect;
    
    /**
      * $original_effect effect variable original name.
      * @var string
      */
    protected $original_effect;
    
    /**
      * $onset_delay User estimated or default time after cause measurement before a perceivable effect is observed
      * @var double
      */
    protected $onset_delay;
    
    /**
      * $duration_of_action Time over which the cause is expected to produce a perceivable effect following the onset delay
      * @var Number
      */
    protected $duration_of_action;
    
    /**
      * $number_of_pairs Number of points that went into the correlation calculation
      * @var Number
      */
    protected $number_of_pairs;
    
    /**
      * $effect_size Magnitude of the effects of a cause indicating whether it's practically meaningful.
      * @var string
      */
    protected $effect_size;
    
    /**
      * $statistical_significance A function of the effect size and sample size
      * @var string
      */
    protected $statistical_significance;
    
    /**
      * $timestamp Time at which correlation was calculated
      * @var Number
      */
    protected $timestamp;
    
    /**
      * $reverse_correlation Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
      * @var Number
      */
    protected $reverse_correlation;
    
    /**
      * $causality_factor 
      * @var Number
      */
    protected $causality_factor;
    
    /**
      * $cause_category Variable category of the cause variable.
      * @var string
      */
    protected $cause_category;
    
    /**
      * $effect_category Variable category of the effect variable.
      * @var string
      */
    protected $effect_category;
    
    /**
      * $value_predicting_high_outcome cause value that predicts an above average effect value (in default unit for cause variable)
      * @var Number
      */
    protected $value_predicting_high_outcome;
    
    /**
      * $value_predicting_low_outcome cause value that predicts a below average effect value (in default unit for cause variable)
      * @var Number
      */
    protected $value_predicting_low_outcome;
    
    /**
      * $optimal_pearson_product Optimal Pearson Product
      * @var Number
      */
    protected $optimal_pearson_product;
    
    /**
      * $average_vote Average Vote
      * @var Number
      */
    protected $average_vote;
    
    /**
      * $user_vote User Vote
      * @var Number
      */
    protected $user_vote;
    
    /**
      * $cause_unit Unit of the predictor variable
      * @var string
      */
    protected $cause_unit;
    
    /**
      * $cause_unit_id Unit Id of the predictor variable
      * @var int
      */
    protected $cause_unit_id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->correlation_coefficient = $data["correlation_coefficient"];
            $this->cause = $data["cause"];
            $this->original_cause = $data["original_cause"];
            $this->effect = $data["effect"];
            $this->original_effect = $data["original_effect"];
            $this->onset_delay = $data["onset_delay"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->number_of_pairs = $data["number_of_pairs"];
            $this->effect_size = $data["effect_size"];
            $this->statistical_significance = $data["statistical_significance"];
            $this->timestamp = $data["timestamp"];
            $this->reverse_correlation = $data["reverse_correlation"];
            $this->causality_factor = $data["causality_factor"];
            $this->cause_category = $data["cause_category"];
            $this->effect_category = $data["effect_category"];
            $this->value_predicting_high_outcome = $data["value_predicting_high_outcome"];
            $this->value_predicting_low_outcome = $data["value_predicting_low_outcome"];
            $this->optimal_pearson_product = $data["optimal_pearson_product"];
            $this->average_vote = $data["average_vote"];
            $this->user_vote = $data["user_vote"];
            $this->cause_unit = $data["cause_unit"];
            $this->cause_unit_id = $data["cause_unit_id"];
        }
    }
    
    /**
     * Gets correlation_coefficient
     * @return Number
     */
    public function getCorrelationCoefficient()
    {
        return $this->correlation_coefficient;
    }
  
    /**
     * Sets correlation_coefficient
     * @param Number $correlation_coefficient Pearson correlation coefficient between cause and effect measurements
     * @return $this
     */
    public function setCorrelationCoefficient($correlation_coefficient)
    {
        
        $this->correlation_coefficient = $correlation_coefficient;
        return $this;
    }
    
    /**
     * Gets cause
     * @return string
     */
    public function getCause()
    {
        return $this->cause;
    }
  
    /**
     * Sets cause
     * @param string $cause ORIGINAL variable name of the cause variable for which the user desires correlations.
     * @return $this
     */
    public function setCause($cause)
    {
        
        $this->cause = $cause;
        return $this;
    }
    
    /**
     * Gets original_cause
     * @return string
     */
    public function getOriginalCause()
    {
        return $this->original_cause;
    }
  
    /**
     * Sets original_cause
     * @param string $original_cause original name of the cause.
     * @return $this
     */
    public function setOriginalCause($original_cause)
    {
        
        $this->original_cause = $original_cause;
        return $this;
    }
    
    /**
     * Gets effect
     * @return string
     */
    public function getEffect()
    {
        return $this->effect;
    }
  
    /**
     * Sets effect
     * @param string $effect ORIGINAL variable name of the effect variable for which the user desires correlations.
     * @return $this
     */
    public function setEffect($effect)
    {
        
        $this->effect = $effect;
        return $this;
    }
    
    /**
     * Gets original_effect
     * @return string
     */
    public function getOriginalEffect()
    {
        return $this->original_effect;
    }
  
    /**
     * Sets original_effect
     * @param string $original_effect effect variable original name.
     * @return $this
     */
    public function setOriginalEffect($original_effect)
    {
        
        $this->original_effect = $original_effect;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return double
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param double $onset_delay User estimated or default time after cause measurement before a perceivable effect is observed
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return Number
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param Number $duration_of_action Time over which the cause is expected to produce a perceivable effect following the onset delay
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets number_of_pairs
     * @return Number
     */
    public function getNumberOfPairs()
    {
        return $this->number_of_pairs;
    }
  
    /**
     * Sets number_of_pairs
     * @param Number $number_of_pairs Number of points that went into the correlation calculation
     * @return $this
     */
    public function setNumberOfPairs($number_of_pairs)
    {
        
        $this->number_of_pairs = $number_of_pairs;
        return $this;
    }
    
    /**
     * Gets effect_size
     * @return string
     */
    public function getEffectSize()
    {
        return $this->effect_size;
    }
  
    /**
     * Sets effect_size
     * @param string $effect_size Magnitude of the effects of a cause indicating whether it's practically meaningful.
     * @return $this
     */
    public function setEffectSize($effect_size)
    {
        
        $this->effect_size = $effect_size;
        return $this;
    }
    
    /**
     * Gets statistical_significance
     * @return string
     */
    public function getStatisticalSignificance()
    {
        return $this->statistical_significance;
    }
  
    /**
     * Sets statistical_significance
     * @param string $statistical_significance A function of the effect size and sample size
     * @return $this
     */
    public function setStatisticalSignificance($statistical_significance)
    {
        
        $this->statistical_significance = $statistical_significance;
        return $this;
    }
    
    /**
     * Gets timestamp
     * @return Number
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }
  
    /**
     * Sets timestamp
     * @param Number $timestamp Time at which correlation was calculated
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        
        $this->timestamp = $timestamp;
        return $this;
    }
    
    /**
     * Gets reverse_correlation
     * @return Number
     */
    public function getReverseCorrelation()
    {
        return $this->reverse_correlation;
    }
  
    /**
     * Sets reverse_correlation
     * @param Number $reverse_correlation Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation.
     * @return $this
     */
    public function setReverseCorrelation($reverse_correlation)
    {
        
        $this->reverse_correlation = $reverse_correlation;
        return $this;
    }
    
    /**
     * Gets causality_factor
     * @return Number
     */
    public function getCausalityFactor()
    {
        return $this->causality_factor;
    }
  
    /**
     * Sets causality_factor
     * @param Number $causality_factor 
     * @return $this
     */
    public function setCausalityFactor($causality_factor)
    {
        
        $this->causality_factor = $causality_factor;
        return $this;
    }
    
    /**
     * Gets cause_category
     * @return string
     */
    public function getCauseCategory()
    {
        return $this->cause_category;
    }
  
    /**
     * Sets cause_category
     * @param string $cause_category Variable category of the cause variable.
     * @return $this
     */
    public function setCauseCategory($cause_category)
    {
        
        $this->cause_category = $cause_category;
        return $this;
    }
    
    /**
     * Gets effect_category
     * @return string
     */
    public function getEffectCategory()
    {
        return $this->effect_category;
    }
  
    /**
     * Sets effect_category
     * @param string $effect_category Variable category of the effect variable.
     * @return $this
     */
    public function setEffectCategory($effect_category)
    {
        
        $this->effect_category = $effect_category;
        return $this;
    }
    
    /**
     * Gets value_predicting_high_outcome
     * @return Number
     */
    public function getValuePredictingHighOutcome()
    {
        return $this->value_predicting_high_outcome;
    }
  
    /**
     * Sets value_predicting_high_outcome
     * @param Number $value_predicting_high_outcome cause value that predicts an above average effect value (in default unit for cause variable)
     * @return $this
     */
    public function setValuePredictingHighOutcome($value_predicting_high_outcome)
    {
        
        $this->value_predicting_high_outcome = $value_predicting_high_outcome;
        return $this;
    }
    
    /**
     * Gets value_predicting_low_outcome
     * @return Number
     */
    public function getValuePredictingLowOutcome()
    {
        return $this->value_predicting_low_outcome;
    }
  
    /**
     * Sets value_predicting_low_outcome
     * @param Number $value_predicting_low_outcome cause value that predicts a below average effect value (in default unit for cause variable)
     * @return $this
     */
    public function setValuePredictingLowOutcome($value_predicting_low_outcome)
    {
        
        $this->value_predicting_low_outcome = $value_predicting_low_outcome;
        return $this;
    }
    
    /**
     * Gets optimal_pearson_product
     * @return Number
     */
    public function getOptimalPearsonProduct()
    {
        return $this->optimal_pearson_product;
    }
  
    /**
     * Sets optimal_pearson_product
     * @param Number $optimal_pearson_product Optimal Pearson Product
     * @return $this
     */
    public function setOptimalPearsonProduct($optimal_pearson_product)
    {
        
        $this->optimal_pearson_product = $optimal_pearson_product;
        return $this;
    }
    
    /**
     * Gets average_vote
     * @return Number
     */
    public function getAverageVote()
    {
        return $this->average_vote;
    }
  
    /**
     * Sets average_vote
     * @param Number $average_vote Average Vote
     * @return $this
     */
    public function setAverageVote($average_vote)
    {
        
        $this->average_vote = $average_vote;
        return $this;
    }
    
    /**
     * Gets user_vote
     * @return Number
     */
    public function getUserVote()
    {
        return $this->user_vote;
    }
  
    /**
     * Sets user_vote
     * @param Number $user_vote User Vote
     * @return $this
     */
    public function setUserVote($user_vote)
    {
        
        $this->user_vote = $user_vote;
        return $this;
    }
    
    /**
     * Gets cause_unit
     * @return string
     */
    public function getCauseUnit()
    {
        return $this->cause_unit;
    }
  
    /**
     * Sets cause_unit
     * @param string $cause_unit Unit of the predictor variable
     * @return $this
     */
    public function setCauseUnit($cause_unit)
    {
        
        $this->cause_unit = $cause_unit;
        return $this;
    }
    
    /**
     * Gets cause_unit_id
     * @return int
     */
    public function getCauseUnitId()
    {
        return $this->cause_unit_id;
    }
  
    /**
     * Sets cause_unit_id
     * @param int $cause_unit_id Unit Id of the predictor variable
     * @return $this
     */
    public function setCauseUnitId($cause_unit_id)
    {
        
        $this->cause_unit_id = $cause_unit_id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
