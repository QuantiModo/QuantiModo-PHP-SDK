<?php
/**
 * PostCorrelation
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.112511
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * PostCorrelation Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PostCorrelation implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PostCorrelation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cause_variable_name' => 'string',
        'correlation' => 'double',
        'effect_variable_name' => 'string',
        'vote' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cause_variable_name' => null,
        'correlation' => 'double',
        'effect_variable_name' => null,
        'vote' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cause_variable_name' => 'causeVariableName',
        'correlation' => 'correlation',
        'effect_variable_name' => 'effectVariableName',
        'vote' => 'vote'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cause_variable_name' => 'setCauseVariableName',
        'correlation' => 'setCorrelation',
        'effect_variable_name' => 'setEffectVariableName',
        'vote' => 'setVote'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cause_variable_name' => 'getCauseVariableName',
        'correlation' => 'getCorrelation',
        'effect_variable_name' => 'getEffectVariableName',
        'vote' => 'getVote'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cause_variable_name'] = isset($data['cause_variable_name']) ? $data['cause_variable_name'] : null;
        $this->container['correlation'] = isset($data['correlation']) ? $data['correlation'] : null;
        $this->container['effect_variable_name'] = isset($data['effect_variable_name']) ? $data['effect_variable_name'] : null;
        $this->container['vote'] = isset($data['vote']) ? $data['vote'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cause_variable_name'] === null) {
            $invalid_properties[] = "'cause_variable_name' can't be null";
        }
        if ($this->container['correlation'] === null) {
            $invalid_properties[] = "'correlation' can't be null";
        }
        if ($this->container['effect_variable_name'] === null) {
            $invalid_properties[] = "'effect_variable_name' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cause_variable_name'] === null) {
            return false;
        }
        if ($this->container['correlation'] === null) {
            return false;
        }
        if ($this->container['effect_variable_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cause_variable_name
     * @return string
     */
    public function getCauseVariableName()
    {
        return $this->container['cause_variable_name'];
    }

    /**
     * Sets cause_variable_name
     * @param string $cause_variable_name Cause variable name
     * @return $this
     */
    public function setCauseVariableName($cause_variable_name)
    {
        $this->container['cause_variable_name'] = $cause_variable_name;

        return $this;
    }

    /**
     * Gets correlation
     * @return double
     */
    public function getCorrelation()
    {
        return $this->container['correlation'];
    }

    /**
     * Sets correlation
     * @param double $correlation Correlation value
     * @return $this
     */
    public function setCorrelation($correlation)
    {
        $this->container['correlation'] = $correlation;

        return $this;
    }

    /**
     * Gets effect_variable_name
     * @return string
     */
    public function getEffectVariableName()
    {
        return $this->container['effect_variable_name'];
    }

    /**
     * Sets effect_variable_name
     * @param string $effect_variable_name Effect variable name
     * @return $this
     */
    public function setEffectVariableName($effect_variable_name)
    {
        $this->container['effect_variable_name'] = $effect_variable_name;

        return $this;
    }

    /**
     * Gets vote
     * @return int
     */
    public function getVote()
    {
        return $this->container['vote'];
    }

    /**
     * Sets vote
     * @param int $vote Vote: 0 or 1
     * @return $this
     */
    public function setVote($vote)
    {
        $this->container['vote'] = $vote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


