<?php
/**
 * AggregatedCorrelationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AggregatedCorrelationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregatedCorrelationApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.quantimo.do/api/v2');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return AggregatedCorrelationApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * aggregatedCorrelationsGet
     *
     * Get all AggregatedCorrelations
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param Number $correlation Pearson correlation coefficient between cause and effect measurements (optional)
     * @param int $cause_id Variable ID of the predictor variable for which the user desires correlations (optional)
     * @param int $effect_id Variable ID of the outcome variable for which the user desires correlations (optional)
     * @param int $onset_delay User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed (optional)
     * @param int $duration_of_action Number of seconds over which the predictor variable event is expected to produce a perceivable effect following the onset delay (optional)
     * @param int $number_of_pairs Number of predictor/outcome data points used in the analysis (optional)
     * @param Number $value_predicting_high_outcome Predictor daily aggregated measurement value that predicts an above average effect measurement value (in default unit for predictor variable) (optional)
     * @param Number $value_predicting_low_outcome Predictor daily aggregated measurement value that predicts a below average effect measurement value (in default unit for outcome variable) (optional)
     * @param Number $optimal_pearson_product Optimal Pearson Product (optional)
     * @param int $number_of_users Number of users whose data was used in this aggregation (optional)
     * @param int $number_of_correlations Number of correlational analyses used in this aggregation (optional)
     * @param Number $statistical_significance A function of the effect size and sample size (optional)
     * @param string $cause_unit Abbreviated unit name for the predictor variable (optional)
     * @param int $cause_unit_id Unit ID for the predictor variable (optional)
     * @param int $cause_changes Number of times that the predictor time series changes (optional)
     * @param int $effect_changes Number of times that the predictor time series changes (optional)
     * @param Number $aggregate_qm_score Aggregated QM Score which is directly proportional with the relevance of each predictor or outcome (optional)
     * @param string $created_at Date at which the analysis was first performed (optional)
     * @param string $updated_at Date at which the analysis was last updated (optional)
     * @param string $status Indicates whether an analysis is up to date (UPDATED), needs to be updated (WAITING), or had an error (ERROR) (optional)
     * @param string $error_message Message describing any problems encountered during the analysis (optional)
     * @param string $last_successful_update_time Last Successful update time (optional)
     * @param Number $reverse_pearson_correlation_coefficient Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation (optional)
     * @param Number $predictive_pearson_correlation_coefficient Predictive Pearson Correlation Coefficient (optional)
     * @param int $limit Limit the number of results returned (optional)
     * @param int $offset Records from give Offset (optional)
     * @param string $sort Sort records by given field (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsGet($access_token = null, $correlation = null, $cause_id = null, $effect_id = null, $onset_delay = null, $duration_of_action = null, $number_of_pairs = null, $value_predicting_high_outcome = null, $value_predicting_low_outcome = null, $optimal_pearson_product = null, $number_of_users = null, $number_of_correlations = null, $statistical_significance = null, $cause_unit = null, $cause_unit_id = null, $cause_changes = null, $effect_changes = null, $aggregate_qm_score = null, $created_at = null, $updated_at = null, $status = null, $error_message = null, $last_successful_update_time = null, $reverse_pearson_correlation_coefficient = null, $predictive_pearson_correlation_coefficient = null, $limit = null, $offset = null, $sort = null)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregatedCorrelationsGetWithHttpInfo ($access_token, $correlation, $cause_id, $effect_id, $onset_delay, $duration_of_action, $number_of_pairs, $value_predicting_high_outcome, $value_predicting_low_outcome, $optimal_pearson_product, $number_of_users, $number_of_correlations, $statistical_significance, $cause_unit, $cause_unit_id, $cause_changes, $effect_changes, $aggregate_qm_score, $created_at, $updated_at, $status, $error_message, $last_successful_update_time, $reverse_pearson_correlation_coefficient, $predictive_pearson_correlation_coefficient, $limit, $offset, $sort);
        return $response; 
    }


    /**
     * aggregatedCorrelationsGetWithHttpInfo
     *
     * Get all AggregatedCorrelations
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param Number $correlation Pearson correlation coefficient between cause and effect measurements (optional)
     * @param int $cause_id Variable ID of the predictor variable for which the user desires correlations (optional)
     * @param int $effect_id Variable ID of the outcome variable for which the user desires correlations (optional)
     * @param int $onset_delay User estimated (or default number of seconds) after cause measurement before a perceivable effect is observed (optional)
     * @param int $duration_of_action Number of seconds over which the predictor variable event is expected to produce a perceivable effect following the onset delay (optional)
     * @param int $number_of_pairs Number of predictor/outcome data points used in the analysis (optional)
     * @param Number $value_predicting_high_outcome Predictor daily aggregated measurement value that predicts an above average effect measurement value (in default unit for predictor variable) (optional)
     * @param Number $value_predicting_low_outcome Predictor daily aggregated measurement value that predicts a below average effect measurement value (in default unit for outcome variable) (optional)
     * @param Number $optimal_pearson_product Optimal Pearson Product (optional)
     * @param int $number_of_users Number of users whose data was used in this aggregation (optional)
     * @param int $number_of_correlations Number of correlational analyses used in this aggregation (optional)
     * @param Number $statistical_significance A function of the effect size and sample size (optional)
     * @param string $cause_unit Abbreviated unit name for the predictor variable (optional)
     * @param int $cause_unit_id Unit ID for the predictor variable (optional)
     * @param int $cause_changes Number of times that the predictor time series changes (optional)
     * @param int $effect_changes Number of times that the predictor time series changes (optional)
     * @param Number $aggregate_qm_score Aggregated QM Score which is directly proportional with the relevance of each predictor or outcome (optional)
     * @param string $created_at Date at which the analysis was first performed (optional)
     * @param string $updated_at Date at which the analysis was last updated (optional)
     * @param string $status Indicates whether an analysis is up to date (UPDATED), needs to be updated (WAITING), or had an error (ERROR) (optional)
     * @param string $error_message Message describing any problems encountered during the analysis (optional)
     * @param string $last_successful_update_time Last Successful update time (optional)
     * @param Number $reverse_pearson_correlation_coefficient Correlation when cause and effect are reversed. For any causal relationship, the forward correlation should exceed the reverse correlation (optional)
     * @param Number $predictive_pearson_correlation_coefficient Predictive Pearson Correlation Coefficient (optional)
     * @param int $limit Limit the number of results returned (optional)
     * @param int $offset Records from give Offset (optional)
     * @param string $sort Sort records by given field (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsGetWithHttpInfo($access_token = null, $correlation = null, $cause_id = null, $effect_id = null, $onset_delay = null, $duration_of_action = null, $number_of_pairs = null, $value_predicting_high_outcome = null, $value_predicting_low_outcome = null, $optimal_pearson_product = null, $number_of_users = null, $number_of_correlations = null, $statistical_significance = null, $cause_unit = null, $cause_unit_id = null, $cause_changes = null, $effect_changes = null, $aggregate_qm_score = null, $created_at = null, $updated_at = null, $status = null, $error_message = null, $last_successful_update_time = null, $reverse_pearson_correlation_coefficient = null, $predictive_pearson_correlation_coefficient = null, $limit = null, $offset = null, $sort = null)
    {
        
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }// query params
        
        if ($correlation !== null) {
            $queryParams['correlation'] = $this->apiClient->getSerializer()->toQueryValue($correlation);
        }// query params
        
        if ($cause_id !== null) {
            $queryParams['cause_id'] = $this->apiClient->getSerializer()->toQueryValue($cause_id);
        }// query params
        
        if ($effect_id !== null) {
            $queryParams['effect_id'] = $this->apiClient->getSerializer()->toQueryValue($effect_id);
        }// query params
        
        if ($onset_delay !== null) {
            $queryParams['onset_delay'] = $this->apiClient->getSerializer()->toQueryValue($onset_delay);
        }// query params
        
        if ($duration_of_action !== null) {
            $queryParams['duration_of_action'] = $this->apiClient->getSerializer()->toQueryValue($duration_of_action);
        }// query params
        
        if ($number_of_pairs !== null) {
            $queryParams['number_of_pairs'] = $this->apiClient->getSerializer()->toQueryValue($number_of_pairs);
        }// query params
        
        if ($value_predicting_high_outcome !== null) {
            $queryParams['value_predicting_high_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_high_outcome);
        }// query params
        
        if ($value_predicting_low_outcome !== null) {
            $queryParams['value_predicting_low_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_low_outcome);
        }// query params
        
        if ($optimal_pearson_product !== null) {
            $queryParams['optimal_pearson_product'] = $this->apiClient->getSerializer()->toQueryValue($optimal_pearson_product);
        }// query params
        
        if ($number_of_users !== null) {
            $queryParams['number_of_users'] = $this->apiClient->getSerializer()->toQueryValue($number_of_users);
        }// query params
        
        if ($number_of_correlations !== null) {
            $queryParams['number_of_correlations'] = $this->apiClient->getSerializer()->toQueryValue($number_of_correlations);
        }// query params
        
        if ($statistical_significance !== null) {
            $queryParams['statistical_significance'] = $this->apiClient->getSerializer()->toQueryValue($statistical_significance);
        }// query params
        
        if ($cause_unit !== null) {
            $queryParams['cause_unit'] = $this->apiClient->getSerializer()->toQueryValue($cause_unit);
        }// query params
        
        if ($cause_unit_id !== null) {
            $queryParams['cause_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($cause_unit_id);
        }// query params
        
        if ($cause_changes !== null) {
            $queryParams['cause_changes'] = $this->apiClient->getSerializer()->toQueryValue($cause_changes);
        }// query params
        
        if ($effect_changes !== null) {
            $queryParams['effect_changes'] = $this->apiClient->getSerializer()->toQueryValue($effect_changes);
        }// query params
        
        if ($aggregate_qm_score !== null) {
            $queryParams['aggregate_qm_score'] = $this->apiClient->getSerializer()->toQueryValue($aggregate_qm_score);
        }// query params
        
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        
        if ($error_message !== null) {
            $queryParams['error_message'] = $this->apiClient->getSerializer()->toQueryValue($error_message);
        }// query params
        
        if ($last_successful_update_time !== null) {
            $queryParams['last_successful_update_time'] = $this->apiClient->getSerializer()->toQueryValue($last_successful_update_time);
        }// query params
        
        if ($reverse_pearson_correlation_coefficient !== null) {
            $queryParams['reverse_pearson_correlation_coefficient'] = $this->apiClient->getSerializer()->toQueryValue($reverse_pearson_correlation_coefficient);
        }// query params
        
        if ($predictive_pearson_correlation_coefficient !== null) {
            $queryParams['predictive_pearson_correlation_coefficient'] = $this->apiClient->getSerializer()->toQueryValue($predictive_pearson_correlation_coefficient);
        }// query params
        
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse200'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregatedCorrelationsPost
     *
     * Store AggregatedCorrelation
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be stored (optional)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsPost($access_token = null, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregatedCorrelationsPostWithHttpInfo ($access_token, $body);
        return $response; 
    }


    /**
     * aggregatedCorrelationsPostWithHttpInfo
     *
     * Store AggregatedCorrelation
     *
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be stored (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsPostWithHttpInfo($access_token = null, $body = null)
    {
        
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'POST',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2001'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregatedCorrelationsIdGet
     *
     * Get AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdGet($id, $access_token = null)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregatedCorrelationsIdGetWithHttpInfo ($id, $access_token);
        return $response; 
    }


    /**
     * aggregatedCorrelationsIdGetWithHttpInfo
     *
     * Get AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdGetWithHttpInfo($id, $access_token = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdGet');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'GET',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2001'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregatedCorrelationsIdPut
     *
     * Update AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be updated (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdPut($id, $access_token = null, $body = null)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregatedCorrelationsIdPutWithHttpInfo ($id, $access_token, $body);
        return $response; 
    }


    /**
     * aggregatedCorrelationsIdPutWithHttpInfo
     *
     * Update AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be updated (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdPutWithHttpInfo($id, $access_token = null, $body = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdPut');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'PUT',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
    /**
     * aggregatedCorrelationsIdDelete
     *
     * Delete AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdDelete($id, $access_token = null)
    {
        list($response, $statusCode, $httpHeader) = $this->aggregatedCorrelationsIdDeleteWithHttpInfo ($id, $access_token);
        return $response; 
    }


    /**
     * aggregatedCorrelationsIdDeleteWithHttpInfo
     *
     * Delete AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param string $access_token User&#39;s OAuth2 access token (optional)
     * @return Array of \Swagger\Client\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdDeleteWithHttpInfo($id, $access_token = null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdDelete');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        
        if ($access_token !== null) {
            $queryParams['access_token'] = $this->apiClient->getSerializer()->toQueryValue($access_token);
        }
        
        // path params
        
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, 'DELETE',
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return array(null, $statusCode, $httpHeader);
            }

            return array(\Swagger\Client\ObjectSerializer::deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = \Swagger\Client\ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
    }
    
}
