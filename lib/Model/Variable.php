<?php
/**
 * Variable
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * Variable Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Variable implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'original_name' => 'string',
        'category' => 'string',
        'abbreviated_unit_name' => 'string',
        'abbreviated_unit_id' => 'int',
        'sources' => 'string',
        'minimum_value' => 'double',
        'maximum_value' => 'double',
        'combination_operation' => 'string',
        'filling_value' => 'double',
        'join_with' => 'string',
        'joined_variables' => '\Swagger\Client\Model\Variable[]',
        'parent' => 'int',
        'sub_variables' => '\Swagger\Client\Model\Variable[]',
        'onset_delay' => 'int',
        'duration_of_action' => 'int',
        'earliest_measurement_time' => 'int',
        'latest_measurement_time' => 'int',
        'updated' => 'int',
        'cause_only' => 'int',
        'number_of_correlations' => 'int',
        'outcome' => 'int',
        'measurements_at_last_analysis' => 'int',
        'number_of_measurements' => 'int',
        'last_unit' => 'string',
        'last_value' => 'int',
        'most_common_value' => 'int',
        'most_common_unit' => 'string',
        'last_source' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'original_name' => 'originalName',
        'category' => 'category',
        'abbreviated_unit_name' => 'abbreviatedUnitName',
        'abbreviated_unit_id' => 'abbreviatedUnitId',
        'sources' => 'sources',
        'minimum_value' => 'minimumValue',
        'maximum_value' => 'maximumValue',
        'combination_operation' => 'combinationOperation',
        'filling_value' => 'fillingValue',
        'join_with' => 'joinWith',
        'joined_variables' => 'joinedVariables',
        'parent' => 'parent',
        'sub_variables' => 'subVariables',
        'onset_delay' => 'onsetDelay',
        'duration_of_action' => 'durationOfAction',
        'earliest_measurement_time' => 'earliestMeasurementTime',
        'latest_measurement_time' => 'latestMeasurementTime',
        'updated' => 'updated',
        'cause_only' => 'causeOnly',
        'number_of_correlations' => 'numberOfCorrelations',
        'outcome' => 'outcome',
        'measurements_at_last_analysis' => 'measurementsAtLastAnalysis',
        'number_of_measurements' => 'numberOfMeasurements',
        'last_unit' => 'lastUnit',
        'last_value' => 'lastValue',
        'most_common_value' => 'mostCommonValue',
        'most_common_unit' => 'mostCommonUnit',
        'last_source' => 'lastSource'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'original_name' => 'setOriginalName',
        'category' => 'setCategory',
        'abbreviated_unit_name' => 'setAbbreviatedUnitName',
        'abbreviated_unit_id' => 'setAbbreviatedUnitId',
        'sources' => 'setSources',
        'minimum_value' => 'setMinimumValue',
        'maximum_value' => 'setMaximumValue',
        'combination_operation' => 'setCombinationOperation',
        'filling_value' => 'setFillingValue',
        'join_with' => 'setJoinWith',
        'joined_variables' => 'setJoinedVariables',
        'parent' => 'setParent',
        'sub_variables' => 'setSubVariables',
        'onset_delay' => 'setOnsetDelay',
        'duration_of_action' => 'setDurationOfAction',
        'earliest_measurement_time' => 'setEarliestMeasurementTime',
        'latest_measurement_time' => 'setLatestMeasurementTime',
        'updated' => 'setUpdated',
        'cause_only' => 'setCauseOnly',
        'number_of_correlations' => 'setNumberOfCorrelations',
        'outcome' => 'setOutcome',
        'measurements_at_last_analysis' => 'setMeasurementsAtLastAnalysis',
        'number_of_measurements' => 'setNumberOfMeasurements',
        'last_unit' => 'setLastUnit',
        'last_value' => 'setLastValue',
        'most_common_value' => 'setMostCommonValue',
        'most_common_unit' => 'setMostCommonUnit',
        'last_source' => 'setLastSource'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'original_name' => 'getOriginalName',
        'category' => 'getCategory',
        'abbreviated_unit_name' => 'getAbbreviatedUnitName',
        'abbreviated_unit_id' => 'getAbbreviatedUnitId',
        'sources' => 'getSources',
        'minimum_value' => 'getMinimumValue',
        'maximum_value' => 'getMaximumValue',
        'combination_operation' => 'getCombinationOperation',
        'filling_value' => 'getFillingValue',
        'join_with' => 'getJoinWith',
        'joined_variables' => 'getJoinedVariables',
        'parent' => 'getParent',
        'sub_variables' => 'getSubVariables',
        'onset_delay' => 'getOnsetDelay',
        'duration_of_action' => 'getDurationOfAction',
        'earliest_measurement_time' => 'getEarliestMeasurementTime',
        'latest_measurement_time' => 'getLatestMeasurementTime',
        'updated' => 'getUpdated',
        'cause_only' => 'getCauseOnly',
        'number_of_correlations' => 'getNumberOfCorrelations',
        'outcome' => 'getOutcome',
        'measurements_at_last_analysis' => 'getMeasurementsAtLastAnalysis',
        'number_of_measurements' => 'getNumberOfMeasurements',
        'last_unit' => 'getLastUnit',
        'last_value' => 'getLastValue',
        'most_common_value' => 'getMostCommonValue',
        'most_common_unit' => 'getMostCommonUnit',
        'last_source' => 'getLastSource'
    );
  
    
    /**
      * $id Variable ID
      * @var int
      */
    protected $id;
    
    /**
      * $name User-defined variable display name.
      * @var string
      */
    protected $name;
    
    /**
      * $original_name Name used when the variable was originally created in the `variables` table.
      * @var string
      */
    protected $original_name;
    
    /**
      * $category Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
      * @var string
      */
    protected $category;
    
    /**
      * $abbreviated_unit_name Abbreviated name of the default unit for the variable
      * @var string
      */
    protected $abbreviated_unit_name;
    
    /**
      * $abbreviated_unit_id Id of the default unit for the variable
      * @var int
      */
    protected $abbreviated_unit_id;
    
    /**
      * $sources Comma-separated list of source names to limit variables to those sources
      * @var string
      */
    protected $sources;
    
    /**
      * $minimum_value Minimum reasonable value for this variable (uses default unit)
      * @var double
      */
    protected $minimum_value;
    
    /**
      * $maximum_value Maximum reasonable value for this variable (uses default unit)
      * @var double
      */
    protected $maximum_value;
    
    /**
      * $combination_operation How to aggregate measurements over time.
      * @var string
      */
    protected $combination_operation;
    
    /**
      * $filling_value Value for replacing null measurements
      * @var double
      */
    protected $filling_value;
    
    /**
      * $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
      * @var string
      */
    protected $join_with;
    
    /**
      * $joined_variables Array of Variables that are joined with this Variable
      * @var \Swagger\Client\Model\Variable[]
      */
    protected $joined_variables;
    
    /**
      * $parent Id of the parent variable if this variable has any parent
      * @var int
      */
    protected $parent;
    
    /**
      * $sub_variables Array of Variables that are sub variables to this Variable
      * @var \Swagger\Client\Model\Variable[]
      */
    protected $sub_variables;
    
    /**
      * $onset_delay How long it takes for a measurement in this variable to take effect
      * @var int
      */
    protected $onset_delay;
    
    /**
      * $duration_of_action How long the effect of a measurement in this variable lasts
      * @var int
      */
    protected $duration_of_action;
    
    /**
      * $earliest_measurement_time Earliest measurement time
      * @var int
      */
    protected $earliest_measurement_time;
    
    /**
      * $latest_measurement_time Latest measurement time
      * @var int
      */
    protected $latest_measurement_time;
    
    /**
      * $updated When this variable or its settings were last updated
      * @var int
      */
    protected $updated;
    
    /**
      * $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
      * @var int
      */
    protected $cause_only;
    
    /**
      * $number_of_correlations Number of correlations
      * @var int
      */
    protected $number_of_correlations;
    
    /**
      * $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
      * @var int
      */
    protected $outcome;
    
    /**
      * $measurements_at_last_analysis The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the measurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.
      * @var int
      */
    protected $measurements_at_last_analysis;
    
    /**
      * $number_of_measurements Number of measurements
      * @var int
      */
    protected $number_of_measurements;
    
    /**
      * $last_unit Last unit
      * @var string
      */
    protected $last_unit;
    
    /**
      * $last_value Last value
      * @var int
      */
    protected $last_value;
    
    /**
      * $most_common_value Most common value
      * @var int
      */
    protected $most_common_value;
    
    /**
      * $most_common_unit Most common unit
      * @var string
      */
    protected $most_common_unit;
    
    /**
      * $last_source Last source
      * @var int
      */
    protected $last_source;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->name = $data["name"];
            $this->original_name = $data["original_name"];
            $this->category = $data["category"];
            $this->abbreviated_unit_name = $data["abbreviated_unit_name"];
            $this->abbreviated_unit_id = $data["abbreviated_unit_id"];
            $this->sources = $data["sources"];
            $this->minimum_value = $data["minimum_value"];
            $this->maximum_value = $data["maximum_value"];
            $this->combination_operation = $data["combination_operation"];
            $this->filling_value = $data["filling_value"];
            $this->join_with = $data["join_with"];
            $this->joined_variables = $data["joined_variables"];
            $this->parent = $data["parent"];
            $this->sub_variables = $data["sub_variables"];
            $this->onset_delay = $data["onset_delay"];
            $this->duration_of_action = $data["duration_of_action"];
            $this->earliest_measurement_time = $data["earliest_measurement_time"];
            $this->latest_measurement_time = $data["latest_measurement_time"];
            $this->updated = $data["updated"];
            $this->cause_only = $data["cause_only"];
            $this->number_of_correlations = $data["number_of_correlations"];
            $this->outcome = $data["outcome"];
            $this->measurements_at_last_analysis = $data["measurements_at_last_analysis"];
            $this->number_of_measurements = $data["number_of_measurements"];
            $this->last_unit = $data["last_unit"];
            $this->last_value = $data["last_value"];
            $this->most_common_value = $data["most_common_value"];
            $this->most_common_unit = $data["most_common_unit"];
            $this->last_source = $data["last_source"];
        }
    }
    
    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param int $id Variable ID
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
  
    /**
     * Sets name
     * @param string $name User-defined variable display name.
     * @return $this
     */
    public function setName($name)
    {
        
        $this->name = $name;
        return $this;
    }
    
    /**
     * Gets original_name
     * @return string
     */
    public function getOriginalName()
    {
        return $this->original_name;
    }
  
    /**
     * Sets original_name
     * @param string $original_name Name used when the variable was originally created in the `variables` table.
     * @return $this
     */
    public function setOriginalName($original_name)
    {
        
        $this->original_name = $original_name;
        return $this;
    }
    
    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->category;
    }
  
    /**
     * Sets category
     * @param string $category Variable category like Mood, Sleep, Physical Activity, Treatment, Symptom, etc.
     * @return $this
     */
    public function setCategory($category)
    {
        
        $this->category = $category;
        return $this;
    }
    
    /**
     * Gets abbreviated_unit_name
     * @return string
     */
    public function getAbbreviatedUnitName()
    {
        return $this->abbreviated_unit_name;
    }
  
    /**
     * Sets abbreviated_unit_name
     * @param string $abbreviated_unit_name Abbreviated name of the default unit for the variable
     * @return $this
     */
    public function setAbbreviatedUnitName($abbreviated_unit_name)
    {
        
        $this->abbreviated_unit_name = $abbreviated_unit_name;
        return $this;
    }
    
    /**
     * Gets abbreviated_unit_id
     * @return int
     */
    public function getAbbreviatedUnitId()
    {
        return $this->abbreviated_unit_id;
    }
  
    /**
     * Sets abbreviated_unit_id
     * @param int $abbreviated_unit_id Id of the default unit for the variable
     * @return $this
     */
    public function setAbbreviatedUnitId($abbreviated_unit_id)
    {
        
        $this->abbreviated_unit_id = $abbreviated_unit_id;
        return $this;
    }
    
    /**
     * Gets sources
     * @return string
     */
    public function getSources()
    {
        return $this->sources;
    }
  
    /**
     * Sets sources
     * @param string $sources Comma-separated list of source names to limit variables to those sources
     * @return $this
     */
    public function setSources($sources)
    {
        
        $this->sources = $sources;
        return $this;
    }
    
    /**
     * Gets minimum_value
     * @return double
     */
    public function getMinimumValue()
    {
        return $this->minimum_value;
    }
  
    /**
     * Sets minimum_value
     * @param double $minimum_value Minimum reasonable value for this variable (uses default unit)
     * @return $this
     */
    public function setMinimumValue($minimum_value)
    {
        
        $this->minimum_value = $minimum_value;
        return $this;
    }
    
    /**
     * Gets maximum_value
     * @return double
     */
    public function getMaximumValue()
    {
        return $this->maximum_value;
    }
  
    /**
     * Sets maximum_value
     * @param double $maximum_value Maximum reasonable value for this variable (uses default unit)
     * @return $this
     */
    public function setMaximumValue($maximum_value)
    {
        
        $this->maximum_value = $maximum_value;
        return $this;
    }
    
    /**
     * Gets combination_operation
     * @return string
     */
    public function getCombinationOperation()
    {
        return $this->combination_operation;
    }
  
    /**
     * Sets combination_operation
     * @param string $combination_operation How to aggregate measurements over time.
     * @return $this
     */
    public function setCombinationOperation($combination_operation)
    {
        $allowed_values = array("MEAN", "SUM");
        if (!in_array($combination_operation, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'combination_operation', must be one of 'MEAN', 'SUM'");
        }
        $this->combination_operation = $combination_operation;
        return $this;
    }
    
    /**
     * Gets filling_value
     * @return double
     */
    public function getFillingValue()
    {
        return $this->filling_value;
    }
  
    /**
     * Sets filling_value
     * @param double $filling_value Value for replacing null measurements
     * @return $this
     */
    public function setFillingValue($filling_value)
    {
        
        $this->filling_value = $filling_value;
        return $this;
    }
    
    /**
     * Gets join_with
     * @return string
     */
    public function getJoinWith()
    {
        return $this->join_with;
    }
  
    /**
     * Sets join_with
     * @param string $join_with The Variable this Variable should be joined with. If the variable is joined with some other variable then it is not shown to user in the list of variables.
     * @return $this
     */
    public function setJoinWith($join_with)
    {
        
        $this->join_with = $join_with;
        return $this;
    }
    
    /**
     * Gets joined_variables
     * @return \Swagger\Client\Model\Variable[]
     */
    public function getJoinedVariables()
    {
        return $this->joined_variables;
    }
  
    /**
     * Sets joined_variables
     * @param \Swagger\Client\Model\Variable[] $joined_variables Array of Variables that are joined with this Variable
     * @return $this
     */
    public function setJoinedVariables($joined_variables)
    {
        
        $this->joined_variables = $joined_variables;
        return $this;
    }
    
    /**
     * Gets parent
     * @return int
     */
    public function getParent()
    {
        return $this->parent;
    }
  
    /**
     * Sets parent
     * @param int $parent Id of the parent variable if this variable has any parent
     * @return $this
     */
    public function setParent($parent)
    {
        
        $this->parent = $parent;
        return $this;
    }
    
    /**
     * Gets sub_variables
     * @return \Swagger\Client\Model\Variable[]
     */
    public function getSubVariables()
    {
        return $this->sub_variables;
    }
  
    /**
     * Sets sub_variables
     * @param \Swagger\Client\Model\Variable[] $sub_variables Array of Variables that are sub variables to this Variable
     * @return $this
     */
    public function setSubVariables($sub_variables)
    {
        
        $this->sub_variables = $sub_variables;
        return $this;
    }
    
    /**
     * Gets onset_delay
     * @return int
     */
    public function getOnsetDelay()
    {
        return $this->onset_delay;
    }
  
    /**
     * Sets onset_delay
     * @param int $onset_delay How long it takes for a measurement in this variable to take effect
     * @return $this
     */
    public function setOnsetDelay($onset_delay)
    {
        
        $this->onset_delay = $onset_delay;
        return $this;
    }
    
    /**
     * Gets duration_of_action
     * @return int
     */
    public function getDurationOfAction()
    {
        return $this->duration_of_action;
    }
  
    /**
     * Sets duration_of_action
     * @param int $duration_of_action How long the effect of a measurement in this variable lasts
     * @return $this
     */
    public function setDurationOfAction($duration_of_action)
    {
        
        $this->duration_of_action = $duration_of_action;
        return $this;
    }
    
    /**
     * Gets earliest_measurement_time
     * @return int
     */
    public function getEarliestMeasurementTime()
    {
        return $this->earliest_measurement_time;
    }
  
    /**
     * Sets earliest_measurement_time
     * @param int $earliest_measurement_time Earliest measurement time
     * @return $this
     */
    public function setEarliestMeasurementTime($earliest_measurement_time)
    {
        
        $this->earliest_measurement_time = $earliest_measurement_time;
        return $this;
    }
    
    /**
     * Gets latest_measurement_time
     * @return int
     */
    public function getLatestMeasurementTime()
    {
        return $this->latest_measurement_time;
    }
  
    /**
     * Sets latest_measurement_time
     * @param int $latest_measurement_time Latest measurement time
     * @return $this
     */
    public function setLatestMeasurementTime($latest_measurement_time)
    {
        
        $this->latest_measurement_time = $latest_measurement_time;
        return $this;
    }
    
    /**
     * Gets updated
     * @return int
     */
    public function getUpdated()
    {
        return $this->updated;
    }
  
    /**
     * Sets updated
     * @param int $updated When this variable or its settings were last updated
     * @return $this
     */
    public function setUpdated($updated)
    {
        
        $this->updated = $updated;
        return $this;
    }
    
    /**
     * Gets cause_only
     * @return int
     */
    public function getCauseOnly()
    {
        return $this->cause_only;
    }
  
    /**
     * Sets cause_only
     * @param int $cause_only A value of 1 indicates that this variable is generally a cause in a causal relationship.  An example of a causeOnly variable would be a variable such as Cloud Cover which would generally not be influenced by the behaviour of the user.
     * @return $this
     */
    public function setCauseOnly($cause_only)
    {
        
        $this->cause_only = $cause_only;
        return $this;
    }
    
    /**
     * Gets number_of_correlations
     * @return int
     */
    public function getNumberOfCorrelations()
    {
        return $this->number_of_correlations;
    }
  
    /**
     * Sets number_of_correlations
     * @param int $number_of_correlations Number of correlations
     * @return $this
     */
    public function setNumberOfCorrelations($number_of_correlations)
    {
        
        $this->number_of_correlations = $number_of_correlations;
        return $this;
    }
    
    /**
     * Gets outcome
     * @return int
     */
    public function getOutcome()
    {
        return $this->outcome;
    }
  
    /**
     * Sets outcome
     * @param int $outcome Outcome variables (those with `outcome` == 1) are variables for which a human would generally want to identify the influencing factors.  These include symptoms of illness, physique, mood, cognitive performance, etc.  Generally correlation calculations are only performed on outcome variables.
     * @return $this
     */
    public function setOutcome($outcome)
    {
        
        $this->outcome = $outcome;
        return $this;
    }
    
    /**
     * Gets measurements_at_last_analysis
     * @return int
     */
    public function getMeasurementsAtLastAnalysis()
    {
        return $this->measurements_at_last_analysis;
    }
  
    /**
     * Sets measurements_at_last_analysis
     * @param int $measurements_at_last_analysis The number of measurements that a given user had for this variable the last time a correlation calculation was performed. Generally correlation values are only updated once the current number of measurements for a variable is more than 10% greater than the measurementsAtLastAnalysis.  This avoids a computationally-demanding recalculation when there's not enough new data to make a significant difference in the correlation.
     * @return $this
     */
    public function setMeasurementsAtLastAnalysis($measurements_at_last_analysis)
    {
        
        $this->measurements_at_last_analysis = $measurements_at_last_analysis;
        return $this;
    }
    
    /**
     * Gets number_of_measurements
     * @return int
     */
    public function getNumberOfMeasurements()
    {
        return $this->number_of_measurements;
    }
  
    /**
     * Sets number_of_measurements
     * @param int $number_of_measurements Number of measurements
     * @return $this
     */
    public function setNumberOfMeasurements($number_of_measurements)
    {
        
        $this->number_of_measurements = $number_of_measurements;
        return $this;
    }
    
    /**
     * Gets last_unit
     * @return string
     */
    public function getLastUnit()
    {
        return $this->last_unit;
    }
  
    /**
     * Sets last_unit
     * @param string $last_unit Last unit
     * @return $this
     */
    public function setLastUnit($last_unit)
    {
        
        $this->last_unit = $last_unit;
        return $this;
    }
    
    /**
     * Gets last_value
     * @return int
     */
    public function getLastValue()
    {
        return $this->last_value;
    }
  
    /**
     * Sets last_value
     * @param int $last_value Last value
     * @return $this
     */
    public function setLastValue($last_value)
    {
        
        $this->last_value = $last_value;
        return $this;
    }
    
    /**
     * Gets most_common_value
     * @return int
     */
    public function getMostCommonValue()
    {
        return $this->most_common_value;
    }
  
    /**
     * Sets most_common_value
     * @param int $most_common_value Most common value
     * @return $this
     */
    public function setMostCommonValue($most_common_value)
    {
        
        $this->most_common_value = $most_common_value;
        return $this;
    }
    
    /**
     * Gets most_common_unit
     * @return string
     */
    public function getMostCommonUnit()
    {
        return $this->most_common_unit;
    }
  
    /**
     * Sets most_common_unit
     * @param string $most_common_unit Most common unit
     * @return $this
     */
    public function setMostCommonUnit($most_common_unit)
    {
        
        $this->most_common_unit = $most_common_unit;
        return $this;
    }
    
    /**
     * Gets last_source
     * @return int
     */
    public function getLastSource()
    {
        return $this->last_source;
    }
  
    /**
     * Sets last_source
     * @param int $last_source Last source
     * @return $this
     */
    public function setLastSource($last_source)
    {
        
        $this->last_source = $last_source;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
