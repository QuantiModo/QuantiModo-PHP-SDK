<?php
/**
 * AggregatedCorrelationApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AggregatedCorrelationApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AggregatedCorrelationApi
{

    /**
     * API Client
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;
  
    /**
     * Constructor
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    function __construct($apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://app.quantimo.do/api/v2');
        }
  
        $this->apiClient = $apiClient;
    }
  
    /**
     * Get API client
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }
  
    /**
     * Set the API client
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     * @return AggregatedCorrelationApi
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }
  
    
    /**
     * aggregatedCorrelationsGet
     *
     * Get all AggregatedCorrelations
     *
     * @param Number $correlation correlation (optional)
     * @param int $cause_id cause_id (optional)
     * @param int $effect_id effect_id (optional)
     * @param int $onset_delay onset_delay (optional)
     * @param int $duration_of_action duration_of_action (optional)
     * @param int $number_of_pairs number_of_pairs (optional)
     * @param Number $value_predicting_high_outcome value_predicting_high_outcome (optional)
     * @param Number $value_predicting_low_outcome value_predicting_low_outcome (optional)
     * @param Number $optimal_pearson_product optimal_pearson_product (optional)
     * @param Number $vote vote (optional)
     * @param int $number_of_users number_of_users (optional)
     * @param int $number_of_correlations number_of_correlations (optional)
     * @param Number $statistical_significance statistical_significance (optional)
     * @param string $cause_unit cause_unit (optional)
     * @param int $cause_unit_id cause_unit_id (optional)
     * @param int $cause_changes cause_changes (optional)
     * @param int $effect_changes effect_changes (optional)
     * @param Number $aggregate_qm_score aggregate_qm_score (optional)
     * @param string $created_at created_at (optional)
     * @param string $updated_at updated_at (optional)
     * @param string $status status (optional)
     * @param string $error_message error_message (optional)
     * @param string $last_successful_update_time last_successful_update_time (optional)
     * @param Number $reverse_pearson_correlation_coefficient reverse_pearson_correlation_coefficient (optional)
     * @param Number $predictive_pearson_correlation_coefficient predictive_pearson_correlation_coefficient (optional)
     * @param int $limit limit (optional)
     * @param int $offset offset (optional)
     * @param string $sort sort (optional)
     * @return \Swagger\Client\Model\InlineResponse200
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsGet($correlation=null, $cause_id=null, $effect_id=null, $onset_delay=null, $duration_of_action=null, $number_of_pairs=null, $value_predicting_high_outcome=null, $value_predicting_low_outcome=null, $optimal_pearson_product=null, $vote=null, $number_of_users=null, $number_of_correlations=null, $statistical_significance=null, $cause_unit=null, $cause_unit_id=null, $cause_changes=null, $effect_changes=null, $aggregate_qm_score=null, $created_at=null, $updated_at=null, $status=null, $error_message=null, $last_successful_update_time=null, $reverse_pearson_correlation_coefficient=null, $predictive_pearson_correlation_coefficient=null, $limit=null, $offset=null, $sort=null)
    {
        
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        // query params
        if ($correlation !== null) {
            $queryParams['correlation'] = $this->apiClient->getSerializer()->toQueryValue($correlation);
        }// query params
        if ($cause_id !== null) {
            $queryParams['cause_id'] = $this->apiClient->getSerializer()->toQueryValue($cause_id);
        }// query params
        if ($effect_id !== null) {
            $queryParams['effect_id'] = $this->apiClient->getSerializer()->toQueryValue($effect_id);
        }// query params
        if ($onset_delay !== null) {
            $queryParams['onset_delay'] = $this->apiClient->getSerializer()->toQueryValue($onset_delay);
        }// query params
        if ($duration_of_action !== null) {
            $queryParams['duration_of_action'] = $this->apiClient->getSerializer()->toQueryValue($duration_of_action);
        }// query params
        if ($number_of_pairs !== null) {
            $queryParams['number_of_pairs'] = $this->apiClient->getSerializer()->toQueryValue($number_of_pairs);
        }// query params
        if ($value_predicting_high_outcome !== null) {
            $queryParams['value_predicting_high_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_high_outcome);
        }// query params
        if ($value_predicting_low_outcome !== null) {
            $queryParams['value_predicting_low_outcome'] = $this->apiClient->getSerializer()->toQueryValue($value_predicting_low_outcome);
        }// query params
        if ($optimal_pearson_product !== null) {
            $queryParams['optimal_pearson_product'] = $this->apiClient->getSerializer()->toQueryValue($optimal_pearson_product);
        }// query params
        if ($vote !== null) {
            $queryParams['vote'] = $this->apiClient->getSerializer()->toQueryValue($vote);
        }// query params
        if ($number_of_users !== null) {
            $queryParams['number_of_users'] = $this->apiClient->getSerializer()->toQueryValue($number_of_users);
        }// query params
        if ($number_of_correlations !== null) {
            $queryParams['number_of_correlations'] = $this->apiClient->getSerializer()->toQueryValue($number_of_correlations);
        }// query params
        if ($statistical_significance !== null) {
            $queryParams['statistical_significance'] = $this->apiClient->getSerializer()->toQueryValue($statistical_significance);
        }// query params
        if ($cause_unit !== null) {
            $queryParams['cause_unit'] = $this->apiClient->getSerializer()->toQueryValue($cause_unit);
        }// query params
        if ($cause_unit_id !== null) {
            $queryParams['cause_unit_id'] = $this->apiClient->getSerializer()->toQueryValue($cause_unit_id);
        }// query params
        if ($cause_changes !== null) {
            $queryParams['cause_changes'] = $this->apiClient->getSerializer()->toQueryValue($cause_changes);
        }// query params
        if ($effect_changes !== null) {
            $queryParams['effect_changes'] = $this->apiClient->getSerializer()->toQueryValue($effect_changes);
        }// query params
        if ($aggregate_qm_score !== null) {
            $queryParams['aggregate_qm_score'] = $this->apiClient->getSerializer()->toQueryValue($aggregate_qm_score);
        }// query params
        if ($created_at !== null) {
            $queryParams['created_at'] = $this->apiClient->getSerializer()->toQueryValue($created_at);
        }// query params
        if ($updated_at !== null) {
            $queryParams['updated_at'] = $this->apiClient->getSerializer()->toQueryValue($updated_at);
        }// query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }// query params
        if ($error_message !== null) {
            $queryParams['error_message'] = $this->apiClient->getSerializer()->toQueryValue($error_message);
        }// query params
        if ($last_successful_update_time !== null) {
            $queryParams['last_successful_update_time'] = $this->apiClient->getSerializer()->toQueryValue($last_successful_update_time);
        }// query params
        if ($reverse_pearson_correlation_coefficient !== null) {
            $queryParams['reverse_pearson_correlation_coefficient'] = $this->apiClient->getSerializer()->toQueryValue($reverse_pearson_correlation_coefficient);
        }// query params
        if ($predictive_pearson_correlation_coefficient !== null) {
            $queryParams['predictive_pearson_correlation_coefficient'] = $this->apiClient->getSerializer()->toQueryValue($predictive_pearson_correlation_coefficient);
        }// query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }// query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }// query params
        if ($sort !== null) {
            $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($sort);
        }
        
        
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse200'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse200', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse200', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * aggregatedCorrelationsPost
     *
     * Store AggregatedCorrelation
     *
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be stored (optional)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsPost($body=null)
    {
        
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2001'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * aggregatedCorrelationsIdGet
     *
     * Get AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @return \Swagger\Client\Model\InlineResponse2001
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdGet($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdGet');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2001'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2001', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2001', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * aggregatedCorrelationsIdPut
     *
     * Update AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @param \Swagger\Client\Model\AggregatedCorrelation $body AggregatedCorrelation that should be updated (optional)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdPut($id, $body=null)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdPut');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PUT";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
    /**
     * aggregatedCorrelationsIdDelete
     *
     * Delete AggregatedCorrelation
     *
     * @param int $id id of AggregatedCorrelation (required)
     * @return \Swagger\Client\Model\InlineResponse2002
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function aggregatedCorrelationsIdDelete($id)
    {
        
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling aggregatedCorrelationsIdDelete');
        }
  
        // parse inputs
        $resourcePath = "/aggregatedCorrelations/{id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = ApiClient::selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = ApiClient::selectHeaderContentType(array('application/json'));
  
        
        
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        
        
  
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        
        // make the API Call
        try
        {
            list($response, $httpHeader) = $this->apiClient->callApi(
                $resourcePath, $method,
                $queryParams, $httpBody,
                $headerParams, '\Swagger\Client\Model\InlineResponse2002'
            );
            
            if (!$response) {
                return null;
            }

            return $this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\InlineResponse2002', $httpHeader);
            
        } catch (ApiException $e) {
            switch ($e->getCode()) { 
            case 200:
                $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse2002', $e->getResponseHeaders());
                $e->setResponseObject($data);
                break;
            }
  
            throw $e;
        }
        
        return null;
        
    }
    
}
