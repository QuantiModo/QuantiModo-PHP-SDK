<?php
/**
 * Connector
 *
 * PHP version 5
 *
 * @category Class
 * @package  QuantiModo\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * quantimodo
 *
 * We make it easy to retrieve and analyze normalized user data from a wide array of devices and applications. Check out our [docs and sdk's](https://github.com/QuantiModo/docs) or [contact us](https://help.quantimo.do).
 *
 * OpenAPI spec version: 5.8.100414
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace QuantiModo\Client\Model;

use \ArrayAccess;

/**
 * Connector Class Doc Comment
 *
 * @category    Class
 * @package     QuantiModo\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Connector implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Connector';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'affiliate' => 'bool',
        'buttons' => '\QuantiModo\Client\Model\Button[]',
        'client_id' => 'string',
        'connected' => 'string',
        'connect_error' => 'string',
        'connect_instructions' => 'string',
        'connector_client_id' => 'string',
        'connector_id' => 'int',
        'connect_status' => 'string',
        'created_at' => '\DateTime',
        'default_variable_category_name' => 'string',
        'display_name' => 'string',
        'enabled' => 'int',
        'get_it_url' => 'string',
        'id' => 'int',
        'image' => 'string',
        'image_html' => 'string',
        'last_successful_updated_at' => '\DateTime',
        'last_update' => 'int',
        'linked_display_name_html' => 'string',
        'long_description' => 'string',
        'message' => 'string',
        'name' => 'string',
        'oauth' => 'object',
        'scopes' => '\QuantiModo\Client\Model\Scope[]',
        'short_description' => 'string',
        'total_measurements_in_last_update' => 'int',
        'updated_at' => '\DateTime',
        'update_requested_at' => '\DateTime',
        'update_status' => 'string',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'affiliate' => null,
        'buttons' => null,
        'client_id' => null,
        'connected' => null,
        'connect_error' => null,
        'connect_instructions' => null,
        'connector_client_id' => null,
        'connector_id' => null,
        'connect_status' => null,
        'created_at' => 'date-time',
        'default_variable_category_name' => null,
        'display_name' => null,
        'enabled' => null,
        'get_it_url' => null,
        'id' => null,
        'image' => null,
        'image_html' => null,
        'last_successful_updated_at' => 'date-time',
        'last_update' => null,
        'linked_display_name_html' => null,
        'long_description' => null,
        'message' => null,
        'name' => null,
        'oauth' => null,
        'scopes' => null,
        'short_description' => null,
        'total_measurements_in_last_update' => null,
        'updated_at' => 'date-time',
        'update_requested_at' => 'date-time',
        'update_status' => null,
        'user_id' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'affiliate' => 'affiliate',
        'buttons' => 'buttons',
        'client_id' => 'clientId',
        'connected' => 'connected',
        'connect_error' => 'connectError',
        'connect_instructions' => 'connectInstructions',
        'connector_client_id' => 'connectorClientId',
        'connector_id' => 'connectorId',
        'connect_status' => 'connectStatus',
        'created_at' => 'createdAt',
        'default_variable_category_name' => 'defaultVariableCategoryName',
        'display_name' => 'displayName',
        'enabled' => 'enabled',
        'get_it_url' => 'getItUrl',
        'id' => 'id',
        'image' => 'image',
        'image_html' => 'imageHtml',
        'last_successful_updated_at' => 'lastSuccessfulUpdatedAt',
        'last_update' => 'lastUpdate',
        'linked_display_name_html' => 'linkedDisplayNameHtml',
        'long_description' => 'longDescription',
        'message' => 'message',
        'name' => 'name',
        'oauth' => 'oauth',
        'scopes' => 'scopes',
        'short_description' => 'shortDescription',
        'total_measurements_in_last_update' => 'totalMeasurementsInLastUpdate',
        'updated_at' => 'updatedAt',
        'update_requested_at' => 'updateRequestedAt',
        'update_status' => 'updateStatus',
        'user_id' => 'userId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'affiliate' => 'setAffiliate',
        'buttons' => 'setButtons',
        'client_id' => 'setClientId',
        'connected' => 'setConnected',
        'connect_error' => 'setConnectError',
        'connect_instructions' => 'setConnectInstructions',
        'connector_client_id' => 'setConnectorClientId',
        'connector_id' => 'setConnectorId',
        'connect_status' => 'setConnectStatus',
        'created_at' => 'setCreatedAt',
        'default_variable_category_name' => 'setDefaultVariableCategoryName',
        'display_name' => 'setDisplayName',
        'enabled' => 'setEnabled',
        'get_it_url' => 'setGetItUrl',
        'id' => 'setId',
        'image' => 'setImage',
        'image_html' => 'setImageHtml',
        'last_successful_updated_at' => 'setLastSuccessfulUpdatedAt',
        'last_update' => 'setLastUpdate',
        'linked_display_name_html' => 'setLinkedDisplayNameHtml',
        'long_description' => 'setLongDescription',
        'message' => 'setMessage',
        'name' => 'setName',
        'oauth' => 'setOauth',
        'scopes' => 'setScopes',
        'short_description' => 'setShortDescription',
        'total_measurements_in_last_update' => 'setTotalMeasurementsInLastUpdate',
        'updated_at' => 'setUpdatedAt',
        'update_requested_at' => 'setUpdateRequestedAt',
        'update_status' => 'setUpdateStatus',
        'user_id' => 'setUserId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'affiliate' => 'getAffiliate',
        'buttons' => 'getButtons',
        'client_id' => 'getClientId',
        'connected' => 'getConnected',
        'connect_error' => 'getConnectError',
        'connect_instructions' => 'getConnectInstructions',
        'connector_client_id' => 'getConnectorClientId',
        'connector_id' => 'getConnectorId',
        'connect_status' => 'getConnectStatus',
        'created_at' => 'getCreatedAt',
        'default_variable_category_name' => 'getDefaultVariableCategoryName',
        'display_name' => 'getDisplayName',
        'enabled' => 'getEnabled',
        'get_it_url' => 'getGetItUrl',
        'id' => 'getId',
        'image' => 'getImage',
        'image_html' => 'getImageHtml',
        'last_successful_updated_at' => 'getLastSuccessfulUpdatedAt',
        'last_update' => 'getLastUpdate',
        'linked_display_name_html' => 'getLinkedDisplayNameHtml',
        'long_description' => 'getLongDescription',
        'message' => 'getMessage',
        'name' => 'getName',
        'oauth' => 'getOauth',
        'scopes' => 'getScopes',
        'short_description' => 'getShortDescription',
        'total_measurements_in_last_update' => 'getTotalMeasurementsInLastUpdate',
        'updated_at' => 'getUpdatedAt',
        'update_requested_at' => 'getUpdateRequestedAt',
        'update_status' => 'getUpdateStatus',
        'user_id' => 'getUserId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['affiliate'] = isset($data['affiliate']) ? $data['affiliate'] : null;
        $this->container['buttons'] = isset($data['buttons']) ? $data['buttons'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['connected'] = isset($data['connected']) ? $data['connected'] : null;
        $this->container['connect_error'] = isset($data['connect_error']) ? $data['connect_error'] : null;
        $this->container['connect_instructions'] = isset($data['connect_instructions']) ? $data['connect_instructions'] : null;
        $this->container['connector_client_id'] = isset($data['connector_client_id']) ? $data['connector_client_id'] : null;
        $this->container['connector_id'] = isset($data['connector_id']) ? $data['connector_id'] : null;
        $this->container['connect_status'] = isset($data['connect_status']) ? $data['connect_status'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['default_variable_category_name'] = isset($data['default_variable_category_name']) ? $data['default_variable_category_name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['get_it_url'] = isset($data['get_it_url']) ? $data['get_it_url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['image_html'] = isset($data['image_html']) ? $data['image_html'] : null;
        $this->container['last_successful_updated_at'] = isset($data['last_successful_updated_at']) ? $data['last_successful_updated_at'] : null;
        $this->container['last_update'] = isset($data['last_update']) ? $data['last_update'] : null;
        $this->container['linked_display_name_html'] = isset($data['linked_display_name_html']) ? $data['linked_display_name_html'] : null;
        $this->container['long_description'] = isset($data['long_description']) ? $data['long_description'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['oauth'] = isset($data['oauth']) ? $data['oauth'] : null;
        $this->container['scopes'] = isset($data['scopes']) ? $data['scopes'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['total_measurements_in_last_update'] = isset($data['total_measurements_in_last_update']) ? $data['total_measurements_in_last_update'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['update_requested_at'] = isset($data['update_requested_at']) ? $data['update_requested_at'] : null;
        $this->container['update_status'] = isset($data['update_status']) ? $data['update_status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['connected'] === null) {
            $invalid_properties[] = "'connected' can't be null";
        }
        if ($this->container['connect_instructions'] === null) {
            $invalid_properties[] = "'connect_instructions' can't be null";
        }
        if ($this->container['display_name'] === null) {
            $invalid_properties[] = "'display_name' can't be null";
        }
        if ($this->container['get_it_url'] === null) {
            $invalid_properties[] = "'get_it_url' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalid_properties[] = "'image' can't be null";
        }
        if ($this->container['last_update'] === null) {
            $invalid_properties[] = "'last_update' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['total_measurements_in_last_update'] === null) {
            $invalid_properties[] = "'total_measurements_in_last_update' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['connected'] === null) {
            return false;
        }
        if ($this->container['connect_instructions'] === null) {
            return false;
        }
        if ($this->container['display_name'] === null) {
            return false;
        }
        if ($this->container['get_it_url'] === null) {
            return false;
        }
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['image'] === null) {
            return false;
        }
        if ($this->container['last_update'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['total_measurements_in_last_update'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets affiliate
     * @return bool
     */
    public function getAffiliate()
    {
        return $this->container['affiliate'];
    }

    /**
     * Sets affiliate
     * @param bool $affiliate Example: false
     * @return $this
     */
    public function setAffiliate($affiliate)
    {
        $this->container['affiliate'] = $affiliate;

        return $this;
    }

    /**
     * Gets buttons
     * @return \QuantiModo\Client\Model\Button[]
     */
    public function getButtons()
    {
        return $this->container['buttons'];
    }

    /**
     * Sets buttons
     * @param \QuantiModo\Client\Model\Button[] $buttons
     * @return $this
     */
    public function setButtons($buttons)
    {
        $this->container['buttons'] = $buttons;

        return $this;
    }

    /**
     * Gets client_id
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     * @param string $client_id Example: ghostInspector
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets connected
     * @return string
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     * @param string $connected True if the authenticated user has this connector enabled
     * @return $this
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets connect_error
     * @return string
     */
    public function getConnectError()
    {
        return $this->container['connect_error'];
    }

    /**
     * Sets connect_error
     * @param string $connect_error Example: Your token is expired. Please re-connect
     * @return $this
     */
    public function setConnectError($connect_error)
    {
        $this->container['connect_error'] = $connect_error;

        return $this;
    }

    /**
     * Gets connect_instructions
     * @return string
     */
    public function getConnectInstructions()
    {
        return $this->container['connect_instructions'];
    }

    /**
     * Sets connect_instructions
     * @param string $connect_instructions URL and parameters used when connecting to a service
     * @return $this
     */
    public function setConnectInstructions($connect_instructions)
    {
        $this->container['connect_instructions'] = $connect_instructions;

        return $this;
    }

    /**
     * Gets connector_client_id
     * @return string
     */
    public function getConnectorClientId()
    {
        return $this->container['connector_client_id'];
    }

    /**
     * Sets connector_client_id
     * @param string $connector_client_id Example: 225078261031461
     * @return $this
     */
    public function setConnectorClientId($connector_client_id)
    {
        $this->container['connector_client_id'] = $connector_client_id;

        return $this;
    }

    /**
     * Gets connector_id
     * @return int
     */
    public function getConnectorId()
    {
        return $this->container['connector_id'];
    }

    /**
     * Sets connector_id
     * @param int $connector_id Example: 8
     * @return $this
     */
    public function setConnectorId($connector_id)
    {
        $this->container['connector_id'] = $connector_id;

        return $this;
    }

    /**
     * Gets connect_status
     * @return string
     */
    public function getConnectStatus()
    {
        return $this->container['connect_status'];
    }

    /**
     * Sets connect_status
     * @param string $connect_status Example: CONNECTED
     * @return $this
     */
    public function setConnectStatus($connect_status)
    {
        $this->container['connect_status'] = $connect_status;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Example: 2000-01-01 00:00:00
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets default_variable_category_name
     * @return string
     */
    public function getDefaultVariableCategoryName()
    {
        return $this->container['default_variable_category_name'];
    }

    /**
     * Sets default_variable_category_name
     * @param string $default_variable_category_name Example: Social Interactions
     * @return $this
     */
    public function setDefaultVariableCategoryName($default_variable_category_name)
    {
        $this->container['default_variable_category_name'] = $default_variable_category_name;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name Connector pretty display name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets enabled
     * @return int
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     * @param int $enabled Example: 1
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets get_it_url
     * @return string
     */
    public function getGetItUrl()
    {
        return $this->container['get_it_url'];
    }

    /**
     * Sets get_it_url
     * @param string $get_it_url URL to a site where one can get this device or application
     * @return $this
     */
    public function setGetItUrl($get_it_url)
    {
        $this->container['get_it_url'] = $get_it_url;

        return $this;
    }

    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Connector ID number
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     * @param string $image URL to the image of the connector logo
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_html
     * @return string
     */
    public function getImageHtml()
    {
        return $this->container['image_html'];
    }

    /**
     * Sets image_html
     * @param string $image_html Example: <a href=\"http://www.facebook.com\"><img id=\"facebook_image\" title=\"Facebook\" src=\"https://i.imgur.com/GhwqK4f.png\" alt=\"Facebook\"></a>
     * @return $this
     */
    public function setImageHtml($image_html)
    {
        $this->container['image_html'] = $image_html;

        return $this;
    }

    /**
     * Gets last_successful_updated_at
     * @return \DateTime
     */
    public function getLastSuccessfulUpdatedAt()
    {
        return $this->container['last_successful_updated_at'];
    }

    /**
     * Sets last_successful_updated_at
     * @param \DateTime $last_successful_updated_at Example: 2017-07-31 10:10:34
     * @return $this
     */
    public function setLastSuccessfulUpdatedAt($last_successful_updated_at)
    {
        $this->container['last_successful_updated_at'] = $last_successful_updated_at;

        return $this;
    }

    /**
     * Gets last_update
     * @return int
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     * @param int $last_update Epoch timestamp of last sync
     * @return $this
     */
    public function setLastUpdate($last_update)
    {
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets linked_display_name_html
     * @return string
     */
    public function getLinkedDisplayNameHtml()
    {
        return $this->container['linked_display_name_html'];
    }

    /**
     * Sets linked_display_name_html
     * @param string $linked_display_name_html Example: <a href=\"http://www.facebook.com\">Facebook</a>
     * @return $this
     */
    public function setLinkedDisplayNameHtml($linked_display_name_html)
    {
        $this->container['linked_display_name_html'] = $linked_display_name_html;

        return $this;
    }

    /**
     * Gets long_description
     * @return string
     */
    public function getLongDescription()
    {
        return $this->container['long_description'];
    }

    /**
     * Sets long_description
     * @param string $long_description Example: Facebook is a social networking website where users may create a personal profile, add other users as friends, and exchange messages.
     * @return $this
     */
    public function setLongDescription($long_description)
    {
        $this->container['long_description'] = $long_description;

        return $this;
    }

    /**
     * Gets message
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     * @param string $message Example: Got 412 new measurements on 2017-07-31 10:10:34
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Connector lowercase system name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets oauth
     * @return object
     */
    public function getOauth()
    {
        return $this->container['oauth'];
    }

    /**
     * Sets oauth
     * @param object $oauth Example: {}
     * @return $this
     */
    public function setOauth($oauth)
    {
        $this->container['oauth'] = $oauth;

        return $this;
    }

    /**
     * Gets scopes
     * @return \QuantiModo\Client\Model\Scope[]
     */
    public function getScopes()
    {
        return $this->container['scopes'];
    }

    /**
     * Sets scopes
     * @param \QuantiModo\Client\Model\Scope[] $scopes
     * @return $this
     */
    public function setScopes($scopes)
    {
        $this->container['scopes'] = $scopes;

        return $this;
    }

    /**
     * Gets short_description
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     * @param string $short_description Example: Tracks social interaction. QuantiModo requires permission to access your Facebook \"user likes\" and \"user posts\".
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets total_measurements_in_last_update
     * @return int
     */
    public function getTotalMeasurementsInLastUpdate()
    {
        return $this->container['total_measurements_in_last_update'];
    }

    /**
     * Sets total_measurements_in_last_update
     * @param int $total_measurements_in_last_update Number of measurements obtained during latest update
     * @return $this
     */
    public function setTotalMeasurementsInLastUpdate($total_measurements_in_last_update)
    {
        $this->container['total_measurements_in_last_update'] = $total_measurements_in_last_update;

        return $this;
    }

    /**
     * Gets updated_at
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     * @param \DateTime $updated_at Example: 2017-07-31 10:10:34
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets update_requested_at
     * @return \DateTime
     */
    public function getUpdateRequestedAt()
    {
        return $this->container['update_requested_at'];
    }

    /**
     * Sets update_requested_at
     * @param \DateTime $update_requested_at Example: 2017-07-18 05:16:31
     * @return $this
     */
    public function setUpdateRequestedAt($update_requested_at)
    {
        $this->container['update_requested_at'] = $update_requested_at;

        return $this;
    }

    /**
     * Gets update_status
     * @return string
     */
    public function getUpdateStatus()
    {
        return $this->container['update_status'];
    }

    /**
     * Sets update_status
     * @param string $update_status Example: UPDATED
     * @return $this
     */
    public function setUpdateStatus($update_status)
    {
        $this->container['update_status'] = $update_status;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id Example: 230
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\QuantiModo\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


